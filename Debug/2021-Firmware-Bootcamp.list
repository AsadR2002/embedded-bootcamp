
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c30  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d38  08004d38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d38  08004d38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d38  08004d38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08004d4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004d4c  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0f0  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020af  00000000  00000000  0002e167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00030218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac2  00000000  00000000  00030fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a658  00000000  00000000  00031a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b54  00000000  00000000  0004c0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a5a3  00000000  00000000  0005dc36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003270  00000000  00000000  000f81dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000fb44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004cd8 	.word	0x08004cd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004cd8 	.word	0x08004cd8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_d2uiz>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	2200      	movs	r2, #0
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <__aeabi_d2uiz+0x38>)
 80003fa:	0004      	movs	r4, r0
 80003fc:	000d      	movs	r5, r1
 80003fe:	f000 ff93 	bl	8001328 <__aeabi_dcmpge>
 8000402:	2800      	cmp	r0, #0
 8000404:	d104      	bne.n	8000410 <__aeabi_d2uiz+0x1c>
 8000406:	0020      	movs	r0, r4
 8000408:	0029      	movs	r1, r5
 800040a:	f000 fef3 	bl	80011f4 <__aeabi_d2iz>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <__aeabi_d2uiz+0x38>)
 8000412:	2200      	movs	r2, #0
 8000414:	0020      	movs	r0, r4
 8000416:	0029      	movs	r1, r5
 8000418:	f000 fb6a 	bl	8000af0 <__aeabi_dsub>
 800041c:	f000 feea 	bl	80011f4 <__aeabi_d2iz>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	061b      	lsls	r3, r3, #24
 8000424:	469c      	mov	ip, r3
 8000426:	4460      	add	r0, ip
 8000428:	e7f1      	b.n	800040e <__aeabi_d2uiz+0x1a>
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	41e00000 	.word	0x41e00000

08000430 <__aeabi_dadd>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	0004      	movs	r4, r0
 800043a:	b5c0      	push	{r6, r7, lr}
 800043c:	001f      	movs	r7, r3
 800043e:	030b      	lsls	r3, r1, #12
 8000440:	0010      	movs	r0, r2
 8000442:	004e      	lsls	r6, r1, #1
 8000444:	0a5b      	lsrs	r3, r3, #9
 8000446:	0fcd      	lsrs	r5, r1, #31
 8000448:	0f61      	lsrs	r1, r4, #29
 800044a:	007a      	lsls	r2, r7, #1
 800044c:	4319      	orrs	r1, r3
 800044e:	00e3      	lsls	r3, r4, #3
 8000450:	033c      	lsls	r4, r7, #12
 8000452:	0fff      	lsrs	r7, r7, #31
 8000454:	46bc      	mov	ip, r7
 8000456:	0a64      	lsrs	r4, r4, #9
 8000458:	0f47      	lsrs	r7, r0, #29
 800045a:	4327      	orrs	r7, r4
 800045c:	0d76      	lsrs	r6, r6, #21
 800045e:	0d52      	lsrs	r2, r2, #21
 8000460:	00c0      	lsls	r0, r0, #3
 8000462:	46b9      	mov	r9, r7
 8000464:	4680      	mov	r8, r0
 8000466:	1ab7      	subs	r7, r6, r2
 8000468:	4565      	cmp	r5, ip
 800046a:	d100      	bne.n	800046e <__aeabi_dadd+0x3e>
 800046c:	e09b      	b.n	80005a6 <__aeabi_dadd+0x176>
 800046e:	2f00      	cmp	r7, #0
 8000470:	dc00      	bgt.n	8000474 <__aeabi_dadd+0x44>
 8000472:	e084      	b.n	800057e <__aeabi_dadd+0x14e>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d100      	bne.n	800047a <__aeabi_dadd+0x4a>
 8000478:	e0be      	b.n	80005f8 <__aeabi_dadd+0x1c8>
 800047a:	4ac8      	ldr	r2, [pc, #800]	; (800079c <__aeabi_dadd+0x36c>)
 800047c:	4296      	cmp	r6, r2
 800047e:	d100      	bne.n	8000482 <__aeabi_dadd+0x52>
 8000480:	e124      	b.n	80006cc <__aeabi_dadd+0x29c>
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	464c      	mov	r4, r9
 8000486:	0412      	lsls	r2, r2, #16
 8000488:	4314      	orrs	r4, r2
 800048a:	46a1      	mov	r9, r4
 800048c:	2f38      	cmp	r7, #56	; 0x38
 800048e:	dd00      	ble.n	8000492 <__aeabi_dadd+0x62>
 8000490:	e167      	b.n	8000762 <__aeabi_dadd+0x332>
 8000492:	2f1f      	cmp	r7, #31
 8000494:	dd00      	ble.n	8000498 <__aeabi_dadd+0x68>
 8000496:	e1d6      	b.n	8000846 <__aeabi_dadd+0x416>
 8000498:	2220      	movs	r2, #32
 800049a:	464c      	mov	r4, r9
 800049c:	1bd2      	subs	r2, r2, r7
 800049e:	4094      	lsls	r4, r2
 80004a0:	46a2      	mov	sl, r4
 80004a2:	4644      	mov	r4, r8
 80004a4:	40fc      	lsrs	r4, r7
 80004a6:	0020      	movs	r0, r4
 80004a8:	4654      	mov	r4, sl
 80004aa:	4304      	orrs	r4, r0
 80004ac:	4640      	mov	r0, r8
 80004ae:	4090      	lsls	r0, r2
 80004b0:	1e42      	subs	r2, r0, #1
 80004b2:	4190      	sbcs	r0, r2
 80004b4:	464a      	mov	r2, r9
 80004b6:	40fa      	lsrs	r2, r7
 80004b8:	4304      	orrs	r4, r0
 80004ba:	1a89      	subs	r1, r1, r2
 80004bc:	1b1c      	subs	r4, r3, r4
 80004be:	42a3      	cmp	r3, r4
 80004c0:	4192      	sbcs	r2, r2
 80004c2:	4252      	negs	r2, r2
 80004c4:	1a8b      	subs	r3, r1, r2
 80004c6:	469a      	mov	sl, r3
 80004c8:	4653      	mov	r3, sl
 80004ca:	021b      	lsls	r3, r3, #8
 80004cc:	d400      	bmi.n	80004d0 <__aeabi_dadd+0xa0>
 80004ce:	e0d4      	b.n	800067a <__aeabi_dadd+0x24a>
 80004d0:	4653      	mov	r3, sl
 80004d2:	025a      	lsls	r2, r3, #9
 80004d4:	0a53      	lsrs	r3, r2, #9
 80004d6:	469a      	mov	sl, r3
 80004d8:	4653      	mov	r3, sl
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d100      	bne.n	80004e0 <__aeabi_dadd+0xb0>
 80004de:	e104      	b.n	80006ea <__aeabi_dadd+0x2ba>
 80004e0:	4650      	mov	r0, sl
 80004e2:	f000 ff2b 	bl	800133c <__clzsi2>
 80004e6:	0003      	movs	r3, r0
 80004e8:	3b08      	subs	r3, #8
 80004ea:	2220      	movs	r2, #32
 80004ec:	0020      	movs	r0, r4
 80004ee:	1ad2      	subs	r2, r2, r3
 80004f0:	4651      	mov	r1, sl
 80004f2:	40d0      	lsrs	r0, r2
 80004f4:	4099      	lsls	r1, r3
 80004f6:	0002      	movs	r2, r0
 80004f8:	409c      	lsls	r4, r3
 80004fa:	430a      	orrs	r2, r1
 80004fc:	42b3      	cmp	r3, r6
 80004fe:	da00      	bge.n	8000502 <__aeabi_dadd+0xd2>
 8000500:	e102      	b.n	8000708 <__aeabi_dadd+0x2d8>
 8000502:	1b9b      	subs	r3, r3, r6
 8000504:	1c59      	adds	r1, r3, #1
 8000506:	291f      	cmp	r1, #31
 8000508:	dd00      	ble.n	800050c <__aeabi_dadd+0xdc>
 800050a:	e0a7      	b.n	800065c <__aeabi_dadd+0x22c>
 800050c:	2320      	movs	r3, #32
 800050e:	0010      	movs	r0, r2
 8000510:	0026      	movs	r6, r4
 8000512:	1a5b      	subs	r3, r3, r1
 8000514:	409c      	lsls	r4, r3
 8000516:	4098      	lsls	r0, r3
 8000518:	40ce      	lsrs	r6, r1
 800051a:	40ca      	lsrs	r2, r1
 800051c:	1e63      	subs	r3, r4, #1
 800051e:	419c      	sbcs	r4, r3
 8000520:	4330      	orrs	r0, r6
 8000522:	4692      	mov	sl, r2
 8000524:	2600      	movs	r6, #0
 8000526:	4304      	orrs	r4, r0
 8000528:	0763      	lsls	r3, r4, #29
 800052a:	d009      	beq.n	8000540 <__aeabi_dadd+0x110>
 800052c:	230f      	movs	r3, #15
 800052e:	4023      	ands	r3, r4
 8000530:	2b04      	cmp	r3, #4
 8000532:	d005      	beq.n	8000540 <__aeabi_dadd+0x110>
 8000534:	1d23      	adds	r3, r4, #4
 8000536:	42a3      	cmp	r3, r4
 8000538:	41a4      	sbcs	r4, r4
 800053a:	4264      	negs	r4, r4
 800053c:	44a2      	add	sl, r4
 800053e:	001c      	movs	r4, r3
 8000540:	4653      	mov	r3, sl
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	d400      	bmi.n	8000548 <__aeabi_dadd+0x118>
 8000546:	e09b      	b.n	8000680 <__aeabi_dadd+0x250>
 8000548:	4b94      	ldr	r3, [pc, #592]	; (800079c <__aeabi_dadd+0x36c>)
 800054a:	3601      	adds	r6, #1
 800054c:	429e      	cmp	r6, r3
 800054e:	d100      	bne.n	8000552 <__aeabi_dadd+0x122>
 8000550:	e0b8      	b.n	80006c4 <__aeabi_dadd+0x294>
 8000552:	4653      	mov	r3, sl
 8000554:	4992      	ldr	r1, [pc, #584]	; (80007a0 <__aeabi_dadd+0x370>)
 8000556:	08e4      	lsrs	r4, r4, #3
 8000558:	400b      	ands	r3, r1
 800055a:	0019      	movs	r1, r3
 800055c:	075b      	lsls	r3, r3, #29
 800055e:	4323      	orrs	r3, r4
 8000560:	0572      	lsls	r2, r6, #21
 8000562:	024c      	lsls	r4, r1, #9
 8000564:	0b24      	lsrs	r4, r4, #12
 8000566:	0d52      	lsrs	r2, r2, #21
 8000568:	0512      	lsls	r2, r2, #20
 800056a:	07ed      	lsls	r5, r5, #31
 800056c:	4322      	orrs	r2, r4
 800056e:	432a      	orrs	r2, r5
 8000570:	0018      	movs	r0, r3
 8000572:	0011      	movs	r1, r2
 8000574:	bce0      	pop	{r5, r6, r7}
 8000576:	46ba      	mov	sl, r7
 8000578:	46b1      	mov	r9, r6
 800057a:	46a8      	mov	r8, r5
 800057c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057e:	2f00      	cmp	r7, #0
 8000580:	d048      	beq.n	8000614 <__aeabi_dadd+0x1e4>
 8000582:	1b97      	subs	r7, r2, r6
 8000584:	2e00      	cmp	r6, #0
 8000586:	d000      	beq.n	800058a <__aeabi_dadd+0x15a>
 8000588:	e10e      	b.n	80007a8 <__aeabi_dadd+0x378>
 800058a:	000c      	movs	r4, r1
 800058c:	431c      	orrs	r4, r3
 800058e:	d100      	bne.n	8000592 <__aeabi_dadd+0x162>
 8000590:	e1b7      	b.n	8000902 <__aeabi_dadd+0x4d2>
 8000592:	1e7c      	subs	r4, r7, #1
 8000594:	2f01      	cmp	r7, #1
 8000596:	d100      	bne.n	800059a <__aeabi_dadd+0x16a>
 8000598:	e226      	b.n	80009e8 <__aeabi_dadd+0x5b8>
 800059a:	4d80      	ldr	r5, [pc, #512]	; (800079c <__aeabi_dadd+0x36c>)
 800059c:	42af      	cmp	r7, r5
 800059e:	d100      	bne.n	80005a2 <__aeabi_dadd+0x172>
 80005a0:	e1d5      	b.n	800094e <__aeabi_dadd+0x51e>
 80005a2:	0027      	movs	r7, r4
 80005a4:	e107      	b.n	80007b6 <__aeabi_dadd+0x386>
 80005a6:	2f00      	cmp	r7, #0
 80005a8:	dc00      	bgt.n	80005ac <__aeabi_dadd+0x17c>
 80005aa:	e0b2      	b.n	8000712 <__aeabi_dadd+0x2e2>
 80005ac:	2a00      	cmp	r2, #0
 80005ae:	d047      	beq.n	8000640 <__aeabi_dadd+0x210>
 80005b0:	4a7a      	ldr	r2, [pc, #488]	; (800079c <__aeabi_dadd+0x36c>)
 80005b2:	4296      	cmp	r6, r2
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dadd+0x188>
 80005b6:	e089      	b.n	80006cc <__aeabi_dadd+0x29c>
 80005b8:	2280      	movs	r2, #128	; 0x80
 80005ba:	464c      	mov	r4, r9
 80005bc:	0412      	lsls	r2, r2, #16
 80005be:	4314      	orrs	r4, r2
 80005c0:	46a1      	mov	r9, r4
 80005c2:	2f38      	cmp	r7, #56	; 0x38
 80005c4:	dc6b      	bgt.n	800069e <__aeabi_dadd+0x26e>
 80005c6:	2f1f      	cmp	r7, #31
 80005c8:	dc00      	bgt.n	80005cc <__aeabi_dadd+0x19c>
 80005ca:	e16e      	b.n	80008aa <__aeabi_dadd+0x47a>
 80005cc:	003a      	movs	r2, r7
 80005ce:	4648      	mov	r0, r9
 80005d0:	3a20      	subs	r2, #32
 80005d2:	40d0      	lsrs	r0, r2
 80005d4:	4684      	mov	ip, r0
 80005d6:	2f20      	cmp	r7, #32
 80005d8:	d007      	beq.n	80005ea <__aeabi_dadd+0x1ba>
 80005da:	2240      	movs	r2, #64	; 0x40
 80005dc:	4648      	mov	r0, r9
 80005de:	1bd2      	subs	r2, r2, r7
 80005e0:	4090      	lsls	r0, r2
 80005e2:	0002      	movs	r2, r0
 80005e4:	4640      	mov	r0, r8
 80005e6:	4310      	orrs	r0, r2
 80005e8:	4680      	mov	r8, r0
 80005ea:	4640      	mov	r0, r8
 80005ec:	1e42      	subs	r2, r0, #1
 80005ee:	4190      	sbcs	r0, r2
 80005f0:	4662      	mov	r2, ip
 80005f2:	0004      	movs	r4, r0
 80005f4:	4314      	orrs	r4, r2
 80005f6:	e057      	b.n	80006a8 <__aeabi_dadd+0x278>
 80005f8:	464a      	mov	r2, r9
 80005fa:	4302      	orrs	r2, r0
 80005fc:	d100      	bne.n	8000600 <__aeabi_dadd+0x1d0>
 80005fe:	e103      	b.n	8000808 <__aeabi_dadd+0x3d8>
 8000600:	1e7a      	subs	r2, r7, #1
 8000602:	2f01      	cmp	r7, #1
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x1d8>
 8000606:	e193      	b.n	8000930 <__aeabi_dadd+0x500>
 8000608:	4c64      	ldr	r4, [pc, #400]	; (800079c <__aeabi_dadd+0x36c>)
 800060a:	42a7      	cmp	r7, r4
 800060c:	d100      	bne.n	8000610 <__aeabi_dadd+0x1e0>
 800060e:	e18a      	b.n	8000926 <__aeabi_dadd+0x4f6>
 8000610:	0017      	movs	r7, r2
 8000612:	e73b      	b.n	800048c <__aeabi_dadd+0x5c>
 8000614:	4c63      	ldr	r4, [pc, #396]	; (80007a4 <__aeabi_dadd+0x374>)
 8000616:	1c72      	adds	r2, r6, #1
 8000618:	4222      	tst	r2, r4
 800061a:	d000      	beq.n	800061e <__aeabi_dadd+0x1ee>
 800061c:	e0e0      	b.n	80007e0 <__aeabi_dadd+0x3b0>
 800061e:	000a      	movs	r2, r1
 8000620:	431a      	orrs	r2, r3
 8000622:	2e00      	cmp	r6, #0
 8000624:	d000      	beq.n	8000628 <__aeabi_dadd+0x1f8>
 8000626:	e174      	b.n	8000912 <__aeabi_dadd+0x4e2>
 8000628:	2a00      	cmp	r2, #0
 800062a:	d100      	bne.n	800062e <__aeabi_dadd+0x1fe>
 800062c:	e1d0      	b.n	80009d0 <__aeabi_dadd+0x5a0>
 800062e:	464a      	mov	r2, r9
 8000630:	4302      	orrs	r2, r0
 8000632:	d000      	beq.n	8000636 <__aeabi_dadd+0x206>
 8000634:	e1e3      	b.n	80009fe <__aeabi_dadd+0x5ce>
 8000636:	074a      	lsls	r2, r1, #29
 8000638:	08db      	lsrs	r3, r3, #3
 800063a:	4313      	orrs	r3, r2
 800063c:	08c9      	lsrs	r1, r1, #3
 800063e:	e029      	b.n	8000694 <__aeabi_dadd+0x264>
 8000640:	464a      	mov	r2, r9
 8000642:	4302      	orrs	r2, r0
 8000644:	d100      	bne.n	8000648 <__aeabi_dadd+0x218>
 8000646:	e17d      	b.n	8000944 <__aeabi_dadd+0x514>
 8000648:	1e7a      	subs	r2, r7, #1
 800064a:	2f01      	cmp	r7, #1
 800064c:	d100      	bne.n	8000650 <__aeabi_dadd+0x220>
 800064e:	e0e0      	b.n	8000812 <__aeabi_dadd+0x3e2>
 8000650:	4c52      	ldr	r4, [pc, #328]	; (800079c <__aeabi_dadd+0x36c>)
 8000652:	42a7      	cmp	r7, r4
 8000654:	d100      	bne.n	8000658 <__aeabi_dadd+0x228>
 8000656:	e166      	b.n	8000926 <__aeabi_dadd+0x4f6>
 8000658:	0017      	movs	r7, r2
 800065a:	e7b2      	b.n	80005c2 <__aeabi_dadd+0x192>
 800065c:	0010      	movs	r0, r2
 800065e:	3b1f      	subs	r3, #31
 8000660:	40d8      	lsrs	r0, r3
 8000662:	2920      	cmp	r1, #32
 8000664:	d003      	beq.n	800066e <__aeabi_dadd+0x23e>
 8000666:	2340      	movs	r3, #64	; 0x40
 8000668:	1a5b      	subs	r3, r3, r1
 800066a:	409a      	lsls	r2, r3
 800066c:	4314      	orrs	r4, r2
 800066e:	1e63      	subs	r3, r4, #1
 8000670:	419c      	sbcs	r4, r3
 8000672:	2300      	movs	r3, #0
 8000674:	2600      	movs	r6, #0
 8000676:	469a      	mov	sl, r3
 8000678:	4304      	orrs	r4, r0
 800067a:	0763      	lsls	r3, r4, #29
 800067c:	d000      	beq.n	8000680 <__aeabi_dadd+0x250>
 800067e:	e755      	b.n	800052c <__aeabi_dadd+0xfc>
 8000680:	4652      	mov	r2, sl
 8000682:	08e3      	lsrs	r3, r4, #3
 8000684:	0752      	lsls	r2, r2, #29
 8000686:	4313      	orrs	r3, r2
 8000688:	4652      	mov	r2, sl
 800068a:	0037      	movs	r7, r6
 800068c:	08d1      	lsrs	r1, r2, #3
 800068e:	4a43      	ldr	r2, [pc, #268]	; (800079c <__aeabi_dadd+0x36c>)
 8000690:	4297      	cmp	r7, r2
 8000692:	d01f      	beq.n	80006d4 <__aeabi_dadd+0x2a4>
 8000694:	0309      	lsls	r1, r1, #12
 8000696:	057a      	lsls	r2, r7, #21
 8000698:	0b0c      	lsrs	r4, r1, #12
 800069a:	0d52      	lsrs	r2, r2, #21
 800069c:	e764      	b.n	8000568 <__aeabi_dadd+0x138>
 800069e:	4642      	mov	r2, r8
 80006a0:	464c      	mov	r4, r9
 80006a2:	4314      	orrs	r4, r2
 80006a4:	1e62      	subs	r2, r4, #1
 80006a6:	4194      	sbcs	r4, r2
 80006a8:	18e4      	adds	r4, r4, r3
 80006aa:	429c      	cmp	r4, r3
 80006ac:	4192      	sbcs	r2, r2
 80006ae:	4252      	negs	r2, r2
 80006b0:	4692      	mov	sl, r2
 80006b2:	448a      	add	sl, r1
 80006b4:	4653      	mov	r3, sl
 80006b6:	021b      	lsls	r3, r3, #8
 80006b8:	d5df      	bpl.n	800067a <__aeabi_dadd+0x24a>
 80006ba:	4b38      	ldr	r3, [pc, #224]	; (800079c <__aeabi_dadd+0x36c>)
 80006bc:	3601      	adds	r6, #1
 80006be:	429e      	cmp	r6, r3
 80006c0:	d000      	beq.n	80006c4 <__aeabi_dadd+0x294>
 80006c2:	e0b3      	b.n	800082c <__aeabi_dadd+0x3fc>
 80006c4:	0032      	movs	r2, r6
 80006c6:	2400      	movs	r4, #0
 80006c8:	2300      	movs	r3, #0
 80006ca:	e74d      	b.n	8000568 <__aeabi_dadd+0x138>
 80006cc:	074a      	lsls	r2, r1, #29
 80006ce:	08db      	lsrs	r3, r3, #3
 80006d0:	4313      	orrs	r3, r2
 80006d2:	08c9      	lsrs	r1, r1, #3
 80006d4:	001a      	movs	r2, r3
 80006d6:	430a      	orrs	r2, r1
 80006d8:	d100      	bne.n	80006dc <__aeabi_dadd+0x2ac>
 80006da:	e200      	b.n	8000ade <__aeabi_dadd+0x6ae>
 80006dc:	2480      	movs	r4, #128	; 0x80
 80006de:	0324      	lsls	r4, r4, #12
 80006e0:	430c      	orrs	r4, r1
 80006e2:	0324      	lsls	r4, r4, #12
 80006e4:	4a2d      	ldr	r2, [pc, #180]	; (800079c <__aeabi_dadd+0x36c>)
 80006e6:	0b24      	lsrs	r4, r4, #12
 80006e8:	e73e      	b.n	8000568 <__aeabi_dadd+0x138>
 80006ea:	0020      	movs	r0, r4
 80006ec:	f000 fe26 	bl	800133c <__clzsi2>
 80006f0:	0003      	movs	r3, r0
 80006f2:	3318      	adds	r3, #24
 80006f4:	2b1f      	cmp	r3, #31
 80006f6:	dc00      	bgt.n	80006fa <__aeabi_dadd+0x2ca>
 80006f8:	e6f7      	b.n	80004ea <__aeabi_dadd+0xba>
 80006fa:	0022      	movs	r2, r4
 80006fc:	3808      	subs	r0, #8
 80006fe:	4082      	lsls	r2, r0
 8000700:	2400      	movs	r4, #0
 8000702:	42b3      	cmp	r3, r6
 8000704:	db00      	blt.n	8000708 <__aeabi_dadd+0x2d8>
 8000706:	e6fc      	b.n	8000502 <__aeabi_dadd+0xd2>
 8000708:	1af6      	subs	r6, r6, r3
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <__aeabi_dadd+0x370>)
 800070c:	401a      	ands	r2, r3
 800070e:	4692      	mov	sl, r2
 8000710:	e70a      	b.n	8000528 <__aeabi_dadd+0xf8>
 8000712:	2f00      	cmp	r7, #0
 8000714:	d02b      	beq.n	800076e <__aeabi_dadd+0x33e>
 8000716:	1b97      	subs	r7, r2, r6
 8000718:	2e00      	cmp	r6, #0
 800071a:	d100      	bne.n	800071e <__aeabi_dadd+0x2ee>
 800071c:	e0b8      	b.n	8000890 <__aeabi_dadd+0x460>
 800071e:	4c1f      	ldr	r4, [pc, #124]	; (800079c <__aeabi_dadd+0x36c>)
 8000720:	42a2      	cmp	r2, r4
 8000722:	d100      	bne.n	8000726 <__aeabi_dadd+0x2f6>
 8000724:	e11c      	b.n	8000960 <__aeabi_dadd+0x530>
 8000726:	2480      	movs	r4, #128	; 0x80
 8000728:	0424      	lsls	r4, r4, #16
 800072a:	4321      	orrs	r1, r4
 800072c:	2f38      	cmp	r7, #56	; 0x38
 800072e:	dd00      	ble.n	8000732 <__aeabi_dadd+0x302>
 8000730:	e11e      	b.n	8000970 <__aeabi_dadd+0x540>
 8000732:	2f1f      	cmp	r7, #31
 8000734:	dd00      	ble.n	8000738 <__aeabi_dadd+0x308>
 8000736:	e19e      	b.n	8000a76 <__aeabi_dadd+0x646>
 8000738:	2620      	movs	r6, #32
 800073a:	000c      	movs	r4, r1
 800073c:	1bf6      	subs	r6, r6, r7
 800073e:	0018      	movs	r0, r3
 8000740:	40b3      	lsls	r3, r6
 8000742:	40b4      	lsls	r4, r6
 8000744:	40f8      	lsrs	r0, r7
 8000746:	1e5e      	subs	r6, r3, #1
 8000748:	41b3      	sbcs	r3, r6
 800074a:	40f9      	lsrs	r1, r7
 800074c:	4304      	orrs	r4, r0
 800074e:	431c      	orrs	r4, r3
 8000750:	4489      	add	r9, r1
 8000752:	4444      	add	r4, r8
 8000754:	4544      	cmp	r4, r8
 8000756:	419b      	sbcs	r3, r3
 8000758:	425b      	negs	r3, r3
 800075a:	444b      	add	r3, r9
 800075c:	469a      	mov	sl, r3
 800075e:	0016      	movs	r6, r2
 8000760:	e7a8      	b.n	80006b4 <__aeabi_dadd+0x284>
 8000762:	4642      	mov	r2, r8
 8000764:	464c      	mov	r4, r9
 8000766:	4314      	orrs	r4, r2
 8000768:	1e62      	subs	r2, r4, #1
 800076a:	4194      	sbcs	r4, r2
 800076c:	e6a6      	b.n	80004bc <__aeabi_dadd+0x8c>
 800076e:	4c0d      	ldr	r4, [pc, #52]	; (80007a4 <__aeabi_dadd+0x374>)
 8000770:	1c72      	adds	r2, r6, #1
 8000772:	4222      	tst	r2, r4
 8000774:	d000      	beq.n	8000778 <__aeabi_dadd+0x348>
 8000776:	e0a8      	b.n	80008ca <__aeabi_dadd+0x49a>
 8000778:	000a      	movs	r2, r1
 800077a:	431a      	orrs	r2, r3
 800077c:	2e00      	cmp	r6, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_dadd+0x352>
 8000780:	e10a      	b.n	8000998 <__aeabi_dadd+0x568>
 8000782:	2a00      	cmp	r2, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_dadd+0x358>
 8000786:	e15e      	b.n	8000a46 <__aeabi_dadd+0x616>
 8000788:	464a      	mov	r2, r9
 800078a:	4302      	orrs	r2, r0
 800078c:	d000      	beq.n	8000790 <__aeabi_dadd+0x360>
 800078e:	e161      	b.n	8000a54 <__aeabi_dadd+0x624>
 8000790:	074a      	lsls	r2, r1, #29
 8000792:	08db      	lsrs	r3, r3, #3
 8000794:	4313      	orrs	r3, r2
 8000796:	08c9      	lsrs	r1, r1, #3
 8000798:	e77c      	b.n	8000694 <__aeabi_dadd+0x264>
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	000007ff 	.word	0x000007ff
 80007a0:	ff7fffff 	.word	0xff7fffff
 80007a4:	000007fe 	.word	0x000007fe
 80007a8:	4ccf      	ldr	r4, [pc, #828]	; (8000ae8 <__aeabi_dadd+0x6b8>)
 80007aa:	42a2      	cmp	r2, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x380>
 80007ae:	e0ce      	b.n	800094e <__aeabi_dadd+0x51e>
 80007b0:	2480      	movs	r4, #128	; 0x80
 80007b2:	0424      	lsls	r4, r4, #16
 80007b4:	4321      	orrs	r1, r4
 80007b6:	2f38      	cmp	r7, #56	; 0x38
 80007b8:	dc5b      	bgt.n	8000872 <__aeabi_dadd+0x442>
 80007ba:	2f1f      	cmp	r7, #31
 80007bc:	dd00      	ble.n	80007c0 <__aeabi_dadd+0x390>
 80007be:	e0dc      	b.n	800097a <__aeabi_dadd+0x54a>
 80007c0:	2520      	movs	r5, #32
 80007c2:	000c      	movs	r4, r1
 80007c4:	1bed      	subs	r5, r5, r7
 80007c6:	001e      	movs	r6, r3
 80007c8:	40ab      	lsls	r3, r5
 80007ca:	40ac      	lsls	r4, r5
 80007cc:	40fe      	lsrs	r6, r7
 80007ce:	1e5d      	subs	r5, r3, #1
 80007d0:	41ab      	sbcs	r3, r5
 80007d2:	4334      	orrs	r4, r6
 80007d4:	40f9      	lsrs	r1, r7
 80007d6:	431c      	orrs	r4, r3
 80007d8:	464b      	mov	r3, r9
 80007da:	1a5b      	subs	r3, r3, r1
 80007dc:	4699      	mov	r9, r3
 80007de:	e04c      	b.n	800087a <__aeabi_dadd+0x44a>
 80007e0:	464a      	mov	r2, r9
 80007e2:	1a1c      	subs	r4, r3, r0
 80007e4:	1a88      	subs	r0, r1, r2
 80007e6:	42a3      	cmp	r3, r4
 80007e8:	4192      	sbcs	r2, r2
 80007ea:	4252      	negs	r2, r2
 80007ec:	4692      	mov	sl, r2
 80007ee:	0002      	movs	r2, r0
 80007f0:	4650      	mov	r0, sl
 80007f2:	1a12      	subs	r2, r2, r0
 80007f4:	4692      	mov	sl, r2
 80007f6:	0212      	lsls	r2, r2, #8
 80007f8:	d478      	bmi.n	80008ec <__aeabi_dadd+0x4bc>
 80007fa:	4653      	mov	r3, sl
 80007fc:	4323      	orrs	r3, r4
 80007fe:	d000      	beq.n	8000802 <__aeabi_dadd+0x3d2>
 8000800:	e66a      	b.n	80004d8 <__aeabi_dadd+0xa8>
 8000802:	2100      	movs	r1, #0
 8000804:	2500      	movs	r5, #0
 8000806:	e745      	b.n	8000694 <__aeabi_dadd+0x264>
 8000808:	074a      	lsls	r2, r1, #29
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	4313      	orrs	r3, r2
 800080e:	08c9      	lsrs	r1, r1, #3
 8000810:	e73d      	b.n	800068e <__aeabi_dadd+0x25e>
 8000812:	181c      	adds	r4, r3, r0
 8000814:	429c      	cmp	r4, r3
 8000816:	419b      	sbcs	r3, r3
 8000818:	4449      	add	r1, r9
 800081a:	468a      	mov	sl, r1
 800081c:	425b      	negs	r3, r3
 800081e:	449a      	add	sl, r3
 8000820:	4653      	mov	r3, sl
 8000822:	2601      	movs	r6, #1
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	d400      	bmi.n	800082a <__aeabi_dadd+0x3fa>
 8000828:	e727      	b.n	800067a <__aeabi_dadd+0x24a>
 800082a:	2602      	movs	r6, #2
 800082c:	4652      	mov	r2, sl
 800082e:	4baf      	ldr	r3, [pc, #700]	; (8000aec <__aeabi_dadd+0x6bc>)
 8000830:	2101      	movs	r1, #1
 8000832:	401a      	ands	r2, r3
 8000834:	0013      	movs	r3, r2
 8000836:	4021      	ands	r1, r4
 8000838:	0862      	lsrs	r2, r4, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	07dc      	lsls	r4, r3, #31
 800083e:	085b      	lsrs	r3, r3, #1
 8000840:	469a      	mov	sl, r3
 8000842:	4314      	orrs	r4, r2
 8000844:	e670      	b.n	8000528 <__aeabi_dadd+0xf8>
 8000846:	003a      	movs	r2, r7
 8000848:	464c      	mov	r4, r9
 800084a:	3a20      	subs	r2, #32
 800084c:	40d4      	lsrs	r4, r2
 800084e:	46a4      	mov	ip, r4
 8000850:	2f20      	cmp	r7, #32
 8000852:	d007      	beq.n	8000864 <__aeabi_dadd+0x434>
 8000854:	2240      	movs	r2, #64	; 0x40
 8000856:	4648      	mov	r0, r9
 8000858:	1bd2      	subs	r2, r2, r7
 800085a:	4090      	lsls	r0, r2
 800085c:	0002      	movs	r2, r0
 800085e:	4640      	mov	r0, r8
 8000860:	4310      	orrs	r0, r2
 8000862:	4680      	mov	r8, r0
 8000864:	4640      	mov	r0, r8
 8000866:	1e42      	subs	r2, r0, #1
 8000868:	4190      	sbcs	r0, r2
 800086a:	4662      	mov	r2, ip
 800086c:	0004      	movs	r4, r0
 800086e:	4314      	orrs	r4, r2
 8000870:	e624      	b.n	80004bc <__aeabi_dadd+0x8c>
 8000872:	4319      	orrs	r1, r3
 8000874:	000c      	movs	r4, r1
 8000876:	1e63      	subs	r3, r4, #1
 8000878:	419c      	sbcs	r4, r3
 800087a:	4643      	mov	r3, r8
 800087c:	1b1c      	subs	r4, r3, r4
 800087e:	45a0      	cmp	r8, r4
 8000880:	419b      	sbcs	r3, r3
 8000882:	4649      	mov	r1, r9
 8000884:	425b      	negs	r3, r3
 8000886:	1acb      	subs	r3, r1, r3
 8000888:	469a      	mov	sl, r3
 800088a:	4665      	mov	r5, ip
 800088c:	0016      	movs	r6, r2
 800088e:	e61b      	b.n	80004c8 <__aeabi_dadd+0x98>
 8000890:	000c      	movs	r4, r1
 8000892:	431c      	orrs	r4, r3
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x468>
 8000896:	e0c7      	b.n	8000a28 <__aeabi_dadd+0x5f8>
 8000898:	1e7c      	subs	r4, r7, #1
 800089a:	2f01      	cmp	r7, #1
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x470>
 800089e:	e0f9      	b.n	8000a94 <__aeabi_dadd+0x664>
 80008a0:	4e91      	ldr	r6, [pc, #580]	; (8000ae8 <__aeabi_dadd+0x6b8>)
 80008a2:	42b7      	cmp	r7, r6
 80008a4:	d05c      	beq.n	8000960 <__aeabi_dadd+0x530>
 80008a6:	0027      	movs	r7, r4
 80008a8:	e740      	b.n	800072c <__aeabi_dadd+0x2fc>
 80008aa:	2220      	movs	r2, #32
 80008ac:	464c      	mov	r4, r9
 80008ae:	4640      	mov	r0, r8
 80008b0:	1bd2      	subs	r2, r2, r7
 80008b2:	4094      	lsls	r4, r2
 80008b4:	40f8      	lsrs	r0, r7
 80008b6:	4304      	orrs	r4, r0
 80008b8:	4640      	mov	r0, r8
 80008ba:	4090      	lsls	r0, r2
 80008bc:	1e42      	subs	r2, r0, #1
 80008be:	4190      	sbcs	r0, r2
 80008c0:	464a      	mov	r2, r9
 80008c2:	40fa      	lsrs	r2, r7
 80008c4:	4304      	orrs	r4, r0
 80008c6:	1889      	adds	r1, r1, r2
 80008c8:	e6ee      	b.n	80006a8 <__aeabi_dadd+0x278>
 80008ca:	4c87      	ldr	r4, [pc, #540]	; (8000ae8 <__aeabi_dadd+0x6b8>)
 80008cc:	42a2      	cmp	r2, r4
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dadd+0x4a2>
 80008d0:	e6f9      	b.n	80006c6 <__aeabi_dadd+0x296>
 80008d2:	1818      	adds	r0, r3, r0
 80008d4:	4298      	cmp	r0, r3
 80008d6:	419b      	sbcs	r3, r3
 80008d8:	4449      	add	r1, r9
 80008da:	425b      	negs	r3, r3
 80008dc:	18cb      	adds	r3, r1, r3
 80008de:	07dc      	lsls	r4, r3, #31
 80008e0:	0840      	lsrs	r0, r0, #1
 80008e2:	085b      	lsrs	r3, r3, #1
 80008e4:	469a      	mov	sl, r3
 80008e6:	0016      	movs	r6, r2
 80008e8:	4304      	orrs	r4, r0
 80008ea:	e6c6      	b.n	800067a <__aeabi_dadd+0x24a>
 80008ec:	4642      	mov	r2, r8
 80008ee:	1ad4      	subs	r4, r2, r3
 80008f0:	45a0      	cmp	r8, r4
 80008f2:	4180      	sbcs	r0, r0
 80008f4:	464b      	mov	r3, r9
 80008f6:	4240      	negs	r0, r0
 80008f8:	1a59      	subs	r1, r3, r1
 80008fa:	1a0b      	subs	r3, r1, r0
 80008fc:	469a      	mov	sl, r3
 80008fe:	4665      	mov	r5, ip
 8000900:	e5ea      	b.n	80004d8 <__aeabi_dadd+0xa8>
 8000902:	464b      	mov	r3, r9
 8000904:	464a      	mov	r2, r9
 8000906:	08c0      	lsrs	r0, r0, #3
 8000908:	075b      	lsls	r3, r3, #29
 800090a:	4665      	mov	r5, ip
 800090c:	4303      	orrs	r3, r0
 800090e:	08d1      	lsrs	r1, r2, #3
 8000910:	e6bd      	b.n	800068e <__aeabi_dadd+0x25e>
 8000912:	2a00      	cmp	r2, #0
 8000914:	d000      	beq.n	8000918 <__aeabi_dadd+0x4e8>
 8000916:	e08e      	b.n	8000a36 <__aeabi_dadd+0x606>
 8000918:	464b      	mov	r3, r9
 800091a:	4303      	orrs	r3, r0
 800091c:	d117      	bne.n	800094e <__aeabi_dadd+0x51e>
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	2500      	movs	r5, #0
 8000922:	0309      	lsls	r1, r1, #12
 8000924:	e6da      	b.n	80006dc <__aeabi_dadd+0x2ac>
 8000926:	074a      	lsls	r2, r1, #29
 8000928:	08db      	lsrs	r3, r3, #3
 800092a:	4313      	orrs	r3, r2
 800092c:	08c9      	lsrs	r1, r1, #3
 800092e:	e6d1      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 8000930:	1a1c      	subs	r4, r3, r0
 8000932:	464a      	mov	r2, r9
 8000934:	42a3      	cmp	r3, r4
 8000936:	419b      	sbcs	r3, r3
 8000938:	1a89      	subs	r1, r1, r2
 800093a:	425b      	negs	r3, r3
 800093c:	1acb      	subs	r3, r1, r3
 800093e:	469a      	mov	sl, r3
 8000940:	2601      	movs	r6, #1
 8000942:	e5c1      	b.n	80004c8 <__aeabi_dadd+0x98>
 8000944:	074a      	lsls	r2, r1, #29
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	4313      	orrs	r3, r2
 800094a:	08c9      	lsrs	r1, r1, #3
 800094c:	e69f      	b.n	800068e <__aeabi_dadd+0x25e>
 800094e:	4643      	mov	r3, r8
 8000950:	08d8      	lsrs	r0, r3, #3
 8000952:	464b      	mov	r3, r9
 8000954:	464a      	mov	r2, r9
 8000956:	075b      	lsls	r3, r3, #29
 8000958:	4665      	mov	r5, ip
 800095a:	4303      	orrs	r3, r0
 800095c:	08d1      	lsrs	r1, r2, #3
 800095e:	e6b9      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 8000960:	4643      	mov	r3, r8
 8000962:	08d8      	lsrs	r0, r3, #3
 8000964:	464b      	mov	r3, r9
 8000966:	464a      	mov	r2, r9
 8000968:	075b      	lsls	r3, r3, #29
 800096a:	4303      	orrs	r3, r0
 800096c:	08d1      	lsrs	r1, r2, #3
 800096e:	e6b1      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 8000970:	4319      	orrs	r1, r3
 8000972:	000c      	movs	r4, r1
 8000974:	1e63      	subs	r3, r4, #1
 8000976:	419c      	sbcs	r4, r3
 8000978:	e6eb      	b.n	8000752 <__aeabi_dadd+0x322>
 800097a:	003c      	movs	r4, r7
 800097c:	000d      	movs	r5, r1
 800097e:	3c20      	subs	r4, #32
 8000980:	40e5      	lsrs	r5, r4
 8000982:	2f20      	cmp	r7, #32
 8000984:	d003      	beq.n	800098e <__aeabi_dadd+0x55e>
 8000986:	2440      	movs	r4, #64	; 0x40
 8000988:	1be4      	subs	r4, r4, r7
 800098a:	40a1      	lsls	r1, r4
 800098c:	430b      	orrs	r3, r1
 800098e:	001c      	movs	r4, r3
 8000990:	1e63      	subs	r3, r4, #1
 8000992:	419c      	sbcs	r4, r3
 8000994:	432c      	orrs	r4, r5
 8000996:	e770      	b.n	800087a <__aeabi_dadd+0x44a>
 8000998:	2a00      	cmp	r2, #0
 800099a:	d0e1      	beq.n	8000960 <__aeabi_dadd+0x530>
 800099c:	464a      	mov	r2, r9
 800099e:	4302      	orrs	r2, r0
 80009a0:	d0c1      	beq.n	8000926 <__aeabi_dadd+0x4f6>
 80009a2:	074a      	lsls	r2, r1, #29
 80009a4:	08db      	lsrs	r3, r3, #3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	08c9      	lsrs	r1, r1, #3
 80009ac:	0312      	lsls	r2, r2, #12
 80009ae:	4211      	tst	r1, r2
 80009b0:	d008      	beq.n	80009c4 <__aeabi_dadd+0x594>
 80009b2:	4648      	mov	r0, r9
 80009b4:	08c4      	lsrs	r4, r0, #3
 80009b6:	4214      	tst	r4, r2
 80009b8:	d104      	bne.n	80009c4 <__aeabi_dadd+0x594>
 80009ba:	4643      	mov	r3, r8
 80009bc:	0021      	movs	r1, r4
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	0742      	lsls	r2, r0, #29
 80009c2:	4313      	orrs	r3, r2
 80009c4:	0f5a      	lsrs	r2, r3, #29
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	0752      	lsls	r2, r2, #29
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	e681      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 80009d0:	464b      	mov	r3, r9
 80009d2:	4303      	orrs	r3, r0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x5a8>
 80009d6:	e714      	b.n	8000802 <__aeabi_dadd+0x3d2>
 80009d8:	464b      	mov	r3, r9
 80009da:	464a      	mov	r2, r9
 80009dc:	08c0      	lsrs	r0, r0, #3
 80009de:	075b      	lsls	r3, r3, #29
 80009e0:	4665      	mov	r5, ip
 80009e2:	4303      	orrs	r3, r0
 80009e4:	08d1      	lsrs	r1, r2, #3
 80009e6:	e655      	b.n	8000694 <__aeabi_dadd+0x264>
 80009e8:	1ac4      	subs	r4, r0, r3
 80009ea:	45a0      	cmp	r8, r4
 80009ec:	4180      	sbcs	r0, r0
 80009ee:	464b      	mov	r3, r9
 80009f0:	4240      	negs	r0, r0
 80009f2:	1a59      	subs	r1, r3, r1
 80009f4:	1a0b      	subs	r3, r1, r0
 80009f6:	469a      	mov	sl, r3
 80009f8:	4665      	mov	r5, ip
 80009fa:	2601      	movs	r6, #1
 80009fc:	e564      	b.n	80004c8 <__aeabi_dadd+0x98>
 80009fe:	1a1c      	subs	r4, r3, r0
 8000a00:	464a      	mov	r2, r9
 8000a02:	42a3      	cmp	r3, r4
 8000a04:	4180      	sbcs	r0, r0
 8000a06:	1a8a      	subs	r2, r1, r2
 8000a08:	4240      	negs	r0, r0
 8000a0a:	1a12      	subs	r2, r2, r0
 8000a0c:	4692      	mov	sl, r2
 8000a0e:	0212      	lsls	r2, r2, #8
 8000a10:	d549      	bpl.n	8000aa6 <__aeabi_dadd+0x676>
 8000a12:	4642      	mov	r2, r8
 8000a14:	1ad4      	subs	r4, r2, r3
 8000a16:	45a0      	cmp	r8, r4
 8000a18:	4180      	sbcs	r0, r0
 8000a1a:	464b      	mov	r3, r9
 8000a1c:	4240      	negs	r0, r0
 8000a1e:	1a59      	subs	r1, r3, r1
 8000a20:	1a0b      	subs	r3, r1, r0
 8000a22:	469a      	mov	sl, r3
 8000a24:	4665      	mov	r5, ip
 8000a26:	e57f      	b.n	8000528 <__aeabi_dadd+0xf8>
 8000a28:	464b      	mov	r3, r9
 8000a2a:	464a      	mov	r2, r9
 8000a2c:	08c0      	lsrs	r0, r0, #3
 8000a2e:	075b      	lsls	r3, r3, #29
 8000a30:	4303      	orrs	r3, r0
 8000a32:	08d1      	lsrs	r1, r2, #3
 8000a34:	e62b      	b.n	800068e <__aeabi_dadd+0x25e>
 8000a36:	464a      	mov	r2, r9
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	4302      	orrs	r2, r0
 8000a3c:	d138      	bne.n	8000ab0 <__aeabi_dadd+0x680>
 8000a3e:	074a      	lsls	r2, r1, #29
 8000a40:	4313      	orrs	r3, r2
 8000a42:	08c9      	lsrs	r1, r1, #3
 8000a44:	e646      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 8000a46:	464b      	mov	r3, r9
 8000a48:	464a      	mov	r2, r9
 8000a4a:	08c0      	lsrs	r0, r0, #3
 8000a4c:	075b      	lsls	r3, r3, #29
 8000a4e:	4303      	orrs	r3, r0
 8000a50:	08d1      	lsrs	r1, r2, #3
 8000a52:	e61f      	b.n	8000694 <__aeabi_dadd+0x264>
 8000a54:	181c      	adds	r4, r3, r0
 8000a56:	429c      	cmp	r4, r3
 8000a58:	419b      	sbcs	r3, r3
 8000a5a:	4449      	add	r1, r9
 8000a5c:	468a      	mov	sl, r1
 8000a5e:	425b      	negs	r3, r3
 8000a60:	449a      	add	sl, r3
 8000a62:	4653      	mov	r3, sl
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	d400      	bmi.n	8000a6a <__aeabi_dadd+0x63a>
 8000a68:	e607      	b.n	800067a <__aeabi_dadd+0x24a>
 8000a6a:	4652      	mov	r2, sl
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <__aeabi_dadd+0x6bc>)
 8000a6e:	2601      	movs	r6, #1
 8000a70:	401a      	ands	r2, r3
 8000a72:	4692      	mov	sl, r2
 8000a74:	e601      	b.n	800067a <__aeabi_dadd+0x24a>
 8000a76:	003c      	movs	r4, r7
 8000a78:	000e      	movs	r6, r1
 8000a7a:	3c20      	subs	r4, #32
 8000a7c:	40e6      	lsrs	r6, r4
 8000a7e:	2f20      	cmp	r7, #32
 8000a80:	d003      	beq.n	8000a8a <__aeabi_dadd+0x65a>
 8000a82:	2440      	movs	r4, #64	; 0x40
 8000a84:	1be4      	subs	r4, r4, r7
 8000a86:	40a1      	lsls	r1, r4
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	001c      	movs	r4, r3
 8000a8c:	1e63      	subs	r3, r4, #1
 8000a8e:	419c      	sbcs	r4, r3
 8000a90:	4334      	orrs	r4, r6
 8000a92:	e65e      	b.n	8000752 <__aeabi_dadd+0x322>
 8000a94:	4443      	add	r3, r8
 8000a96:	4283      	cmp	r3, r0
 8000a98:	4180      	sbcs	r0, r0
 8000a9a:	4449      	add	r1, r9
 8000a9c:	468a      	mov	sl, r1
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	001c      	movs	r4, r3
 8000aa2:	4482      	add	sl, r0
 8000aa4:	e6bc      	b.n	8000820 <__aeabi_dadd+0x3f0>
 8000aa6:	4653      	mov	r3, sl
 8000aa8:	4323      	orrs	r3, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x67e>
 8000aac:	e6a9      	b.n	8000802 <__aeabi_dadd+0x3d2>
 8000aae:	e5e4      	b.n	800067a <__aeabi_dadd+0x24a>
 8000ab0:	074a      	lsls	r2, r1, #29
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	08c9      	lsrs	r1, r1, #3
 8000ab8:	0312      	lsls	r2, r2, #12
 8000aba:	4211      	tst	r1, r2
 8000abc:	d009      	beq.n	8000ad2 <__aeabi_dadd+0x6a2>
 8000abe:	4648      	mov	r0, r9
 8000ac0:	08c4      	lsrs	r4, r0, #3
 8000ac2:	4214      	tst	r4, r2
 8000ac4:	d105      	bne.n	8000ad2 <__aeabi_dadd+0x6a2>
 8000ac6:	4643      	mov	r3, r8
 8000ac8:	4665      	mov	r5, ip
 8000aca:	0021      	movs	r1, r4
 8000acc:	08db      	lsrs	r3, r3, #3
 8000ace:	0742      	lsls	r2, r0, #29
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	0f5a      	lsrs	r2, r3, #29
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	0752      	lsls	r2, r2, #29
 8000ada:	4313      	orrs	r3, r2
 8000adc:	e5fa      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	4a01      	ldr	r2, [pc, #4]	; (8000ae8 <__aeabi_dadd+0x6b8>)
 8000ae2:	001c      	movs	r4, r3
 8000ae4:	e540      	b.n	8000568 <__aeabi_dadd+0x138>
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	000007ff 	.word	0x000007ff
 8000aec:	ff7fffff 	.word	0xff7fffff

08000af0 <__aeabi_dsub>:
 8000af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af2:	4657      	mov	r7, sl
 8000af4:	464e      	mov	r6, r9
 8000af6:	4645      	mov	r5, r8
 8000af8:	46de      	mov	lr, fp
 8000afa:	b5e0      	push	{r5, r6, r7, lr}
 8000afc:	000d      	movs	r5, r1
 8000afe:	0004      	movs	r4, r0
 8000b00:	0019      	movs	r1, r3
 8000b02:	0010      	movs	r0, r2
 8000b04:	032b      	lsls	r3, r5, #12
 8000b06:	0a5b      	lsrs	r3, r3, #9
 8000b08:	0f62      	lsrs	r2, r4, #29
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	00e3      	lsls	r3, r4, #3
 8000b0e:	030c      	lsls	r4, r1, #12
 8000b10:	0a64      	lsrs	r4, r4, #9
 8000b12:	0f47      	lsrs	r7, r0, #29
 8000b14:	4327      	orrs	r7, r4
 8000b16:	4cd0      	ldr	r4, [pc, #832]	; (8000e58 <__aeabi_dsub+0x368>)
 8000b18:	006e      	lsls	r6, r5, #1
 8000b1a:	4691      	mov	r9, r2
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	004a      	lsls	r2, r1, #1
 8000b20:	00c0      	lsls	r0, r0, #3
 8000b22:	4698      	mov	r8, r3
 8000b24:	46a2      	mov	sl, r4
 8000b26:	0d76      	lsrs	r6, r6, #21
 8000b28:	0fed      	lsrs	r5, r5, #31
 8000b2a:	0d52      	lsrs	r2, r2, #21
 8000b2c:	0fc9      	lsrs	r1, r1, #31
 8000b2e:	9001      	str	r0, [sp, #4]
 8000b30:	42a2      	cmp	r2, r4
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dsub+0x46>
 8000b34:	e0b9      	b.n	8000caa <__aeabi_dsub+0x1ba>
 8000b36:	2401      	movs	r4, #1
 8000b38:	4061      	eors	r1, r4
 8000b3a:	468b      	mov	fp, r1
 8000b3c:	428d      	cmp	r5, r1
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dsub+0x52>
 8000b40:	e08d      	b.n	8000c5e <__aeabi_dsub+0x16e>
 8000b42:	1ab4      	subs	r4, r6, r2
 8000b44:	46a4      	mov	ip, r4
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	dc00      	bgt.n	8000b4c <__aeabi_dsub+0x5c>
 8000b4a:	e0b7      	b.n	8000cbc <__aeabi_dsub+0x1cc>
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_dsub+0x62>
 8000b50:	e0cb      	b.n	8000cea <__aeabi_dsub+0x1fa>
 8000b52:	4ac1      	ldr	r2, [pc, #772]	; (8000e58 <__aeabi_dsub+0x368>)
 8000b54:	4296      	cmp	r6, r2
 8000b56:	d100      	bne.n	8000b5a <__aeabi_dsub+0x6a>
 8000b58:	e186      	b.n	8000e68 <__aeabi_dsub+0x378>
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	0412      	lsls	r2, r2, #16
 8000b5e:	4317      	orrs	r7, r2
 8000b60:	4662      	mov	r2, ip
 8000b62:	2a38      	cmp	r2, #56	; 0x38
 8000b64:	dd00      	ble.n	8000b68 <__aeabi_dsub+0x78>
 8000b66:	e1a4      	b.n	8000eb2 <__aeabi_dsub+0x3c2>
 8000b68:	2a1f      	cmp	r2, #31
 8000b6a:	dd00      	ble.n	8000b6e <__aeabi_dsub+0x7e>
 8000b6c:	e21d      	b.n	8000faa <__aeabi_dsub+0x4ba>
 8000b6e:	4661      	mov	r1, ip
 8000b70:	2220      	movs	r2, #32
 8000b72:	003c      	movs	r4, r7
 8000b74:	1a52      	subs	r2, r2, r1
 8000b76:	0001      	movs	r1, r0
 8000b78:	4090      	lsls	r0, r2
 8000b7a:	4094      	lsls	r4, r2
 8000b7c:	1e42      	subs	r2, r0, #1
 8000b7e:	4190      	sbcs	r0, r2
 8000b80:	4662      	mov	r2, ip
 8000b82:	46a0      	mov	r8, r4
 8000b84:	4664      	mov	r4, ip
 8000b86:	40d7      	lsrs	r7, r2
 8000b88:	464a      	mov	r2, r9
 8000b8a:	40e1      	lsrs	r1, r4
 8000b8c:	4644      	mov	r4, r8
 8000b8e:	1bd2      	subs	r2, r2, r7
 8000b90:	4691      	mov	r9, r2
 8000b92:	430c      	orrs	r4, r1
 8000b94:	4304      	orrs	r4, r0
 8000b96:	1b1c      	subs	r4, r3, r4
 8000b98:	42a3      	cmp	r3, r4
 8000b9a:	4192      	sbcs	r2, r2
 8000b9c:	464b      	mov	r3, r9
 8000b9e:	4252      	negs	r2, r2
 8000ba0:	1a9b      	subs	r3, r3, r2
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	4653      	mov	r3, sl
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	d400      	bmi.n	8000bac <__aeabi_dsub+0xbc>
 8000baa:	e12b      	b.n	8000e04 <__aeabi_dsub+0x314>
 8000bac:	4653      	mov	r3, sl
 8000bae:	025a      	lsls	r2, r3, #9
 8000bb0:	0a53      	lsrs	r3, r2, #9
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	4653      	mov	r3, sl
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dsub+0xcc>
 8000bba:	e166      	b.n	8000e8a <__aeabi_dsub+0x39a>
 8000bbc:	4650      	mov	r0, sl
 8000bbe:	f000 fbbd 	bl	800133c <__clzsi2>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	3b08      	subs	r3, #8
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	0020      	movs	r0, r4
 8000bca:	1ad2      	subs	r2, r2, r3
 8000bcc:	4651      	mov	r1, sl
 8000bce:	40d0      	lsrs	r0, r2
 8000bd0:	4099      	lsls	r1, r3
 8000bd2:	0002      	movs	r2, r0
 8000bd4:	409c      	lsls	r4, r3
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	429e      	cmp	r6, r3
 8000bda:	dd00      	ble.n	8000bde <__aeabi_dsub+0xee>
 8000bdc:	e164      	b.n	8000ea8 <__aeabi_dsub+0x3b8>
 8000bde:	1b9b      	subs	r3, r3, r6
 8000be0:	1c59      	adds	r1, r3, #1
 8000be2:	291f      	cmp	r1, #31
 8000be4:	dd00      	ble.n	8000be8 <__aeabi_dsub+0xf8>
 8000be6:	e0fe      	b.n	8000de6 <__aeabi_dsub+0x2f6>
 8000be8:	2320      	movs	r3, #32
 8000bea:	0010      	movs	r0, r2
 8000bec:	0026      	movs	r6, r4
 8000bee:	1a5b      	subs	r3, r3, r1
 8000bf0:	409c      	lsls	r4, r3
 8000bf2:	4098      	lsls	r0, r3
 8000bf4:	40ce      	lsrs	r6, r1
 8000bf6:	40ca      	lsrs	r2, r1
 8000bf8:	1e63      	subs	r3, r4, #1
 8000bfa:	419c      	sbcs	r4, r3
 8000bfc:	4330      	orrs	r0, r6
 8000bfe:	4692      	mov	sl, r2
 8000c00:	2600      	movs	r6, #0
 8000c02:	4304      	orrs	r4, r0
 8000c04:	0763      	lsls	r3, r4, #29
 8000c06:	d009      	beq.n	8000c1c <__aeabi_dsub+0x12c>
 8000c08:	230f      	movs	r3, #15
 8000c0a:	4023      	ands	r3, r4
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d005      	beq.n	8000c1c <__aeabi_dsub+0x12c>
 8000c10:	1d23      	adds	r3, r4, #4
 8000c12:	42a3      	cmp	r3, r4
 8000c14:	41a4      	sbcs	r4, r4
 8000c16:	4264      	negs	r4, r4
 8000c18:	44a2      	add	sl, r4
 8000c1a:	001c      	movs	r4, r3
 8000c1c:	4653      	mov	r3, sl
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	d400      	bmi.n	8000c24 <__aeabi_dsub+0x134>
 8000c22:	e0f2      	b.n	8000e0a <__aeabi_dsub+0x31a>
 8000c24:	4b8c      	ldr	r3, [pc, #560]	; (8000e58 <__aeabi_dsub+0x368>)
 8000c26:	3601      	adds	r6, #1
 8000c28:	429e      	cmp	r6, r3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dsub+0x13e>
 8000c2c:	e10f      	b.n	8000e4e <__aeabi_dsub+0x35e>
 8000c2e:	4653      	mov	r3, sl
 8000c30:	498a      	ldr	r1, [pc, #552]	; (8000e5c <__aeabi_dsub+0x36c>)
 8000c32:	08e4      	lsrs	r4, r4, #3
 8000c34:	400b      	ands	r3, r1
 8000c36:	0019      	movs	r1, r3
 8000c38:	075b      	lsls	r3, r3, #29
 8000c3a:	4323      	orrs	r3, r4
 8000c3c:	0572      	lsls	r2, r6, #21
 8000c3e:	024c      	lsls	r4, r1, #9
 8000c40:	0b24      	lsrs	r4, r4, #12
 8000c42:	0d52      	lsrs	r2, r2, #21
 8000c44:	0512      	lsls	r2, r2, #20
 8000c46:	4322      	orrs	r2, r4
 8000c48:	07ed      	lsls	r5, r5, #31
 8000c4a:	432a      	orrs	r2, r5
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	0011      	movs	r1, r2
 8000c50:	b003      	add	sp, #12
 8000c52:	bcf0      	pop	{r4, r5, r6, r7}
 8000c54:	46bb      	mov	fp, r7
 8000c56:	46b2      	mov	sl, r6
 8000c58:	46a9      	mov	r9, r5
 8000c5a:	46a0      	mov	r8, r4
 8000c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5e:	1ab4      	subs	r4, r6, r2
 8000c60:	46a4      	mov	ip, r4
 8000c62:	2c00      	cmp	r4, #0
 8000c64:	dd59      	ble.n	8000d1a <__aeabi_dsub+0x22a>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dsub+0x17c>
 8000c6a:	e0b0      	b.n	8000dce <__aeabi_dsub+0x2de>
 8000c6c:	4556      	cmp	r6, sl
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dsub+0x182>
 8000c70:	e0fa      	b.n	8000e68 <__aeabi_dsub+0x378>
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	0412      	lsls	r2, r2, #16
 8000c76:	4317      	orrs	r7, r2
 8000c78:	4662      	mov	r2, ip
 8000c7a:	2a38      	cmp	r2, #56	; 0x38
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_dsub+0x190>
 8000c7e:	e0d4      	b.n	8000e2a <__aeabi_dsub+0x33a>
 8000c80:	2a1f      	cmp	r2, #31
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_dsub+0x196>
 8000c84:	e1c0      	b.n	8001008 <__aeabi_dsub+0x518>
 8000c86:	0039      	movs	r1, r7
 8000c88:	3a20      	subs	r2, #32
 8000c8a:	40d1      	lsrs	r1, r2
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	2a20      	cmp	r2, #32
 8000c90:	d006      	beq.n	8000ca0 <__aeabi_dsub+0x1b0>
 8000c92:	4664      	mov	r4, ip
 8000c94:	2240      	movs	r2, #64	; 0x40
 8000c96:	1b12      	subs	r2, r2, r4
 8000c98:	003c      	movs	r4, r7
 8000c9a:	4094      	lsls	r4, r2
 8000c9c:	4304      	orrs	r4, r0
 8000c9e:	9401      	str	r4, [sp, #4]
 8000ca0:	9c01      	ldr	r4, [sp, #4]
 8000ca2:	1e62      	subs	r2, r4, #1
 8000ca4:	4194      	sbcs	r4, r2
 8000ca6:	430c      	orrs	r4, r1
 8000ca8:	e0c3      	b.n	8000e32 <__aeabi_dsub+0x342>
 8000caa:	003c      	movs	r4, r7
 8000cac:	4304      	orrs	r4, r0
 8000cae:	d02b      	beq.n	8000d08 <__aeabi_dsub+0x218>
 8000cb0:	468b      	mov	fp, r1
 8000cb2:	428d      	cmp	r5, r1
 8000cb4:	d02e      	beq.n	8000d14 <__aeabi_dsub+0x224>
 8000cb6:	4c6a      	ldr	r4, [pc, #424]	; (8000e60 <__aeabi_dsub+0x370>)
 8000cb8:	46a4      	mov	ip, r4
 8000cba:	44b4      	add	ip, r6
 8000cbc:	4664      	mov	r4, ip
 8000cbe:	2c00      	cmp	r4, #0
 8000cc0:	d05f      	beq.n	8000d82 <__aeabi_dsub+0x292>
 8000cc2:	1b94      	subs	r4, r2, r6
 8000cc4:	46a4      	mov	ip, r4
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d000      	beq.n	8000ccc <__aeabi_dsub+0x1dc>
 8000cca:	e120      	b.n	8000f0e <__aeabi_dsub+0x41e>
 8000ccc:	464c      	mov	r4, r9
 8000cce:	431c      	orrs	r4, r3
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dsub+0x1e4>
 8000cd2:	e1c7      	b.n	8001064 <__aeabi_dsub+0x574>
 8000cd4:	4661      	mov	r1, ip
 8000cd6:	1e4c      	subs	r4, r1, #1
 8000cd8:	2901      	cmp	r1, #1
 8000cda:	d100      	bne.n	8000cde <__aeabi_dsub+0x1ee>
 8000cdc:	e223      	b.n	8001126 <__aeabi_dsub+0x636>
 8000cde:	4d5e      	ldr	r5, [pc, #376]	; (8000e58 <__aeabi_dsub+0x368>)
 8000ce0:	45ac      	cmp	ip, r5
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dsub+0x1f6>
 8000ce4:	e1d8      	b.n	8001098 <__aeabi_dsub+0x5a8>
 8000ce6:	46a4      	mov	ip, r4
 8000ce8:	e11a      	b.n	8000f20 <__aeabi_dsub+0x430>
 8000cea:	003a      	movs	r2, r7
 8000cec:	4302      	orrs	r2, r0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_dsub+0x202>
 8000cf0:	e0e4      	b.n	8000ebc <__aeabi_dsub+0x3cc>
 8000cf2:	0022      	movs	r2, r4
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	2c01      	cmp	r4, #1
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dsub+0x20c>
 8000cfa:	e1c3      	b.n	8001084 <__aeabi_dsub+0x594>
 8000cfc:	4956      	ldr	r1, [pc, #344]	; (8000e58 <__aeabi_dsub+0x368>)
 8000cfe:	428c      	cmp	r4, r1
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dsub+0x214>
 8000d02:	e0b1      	b.n	8000e68 <__aeabi_dsub+0x378>
 8000d04:	4694      	mov	ip, r2
 8000d06:	e72b      	b.n	8000b60 <__aeabi_dsub+0x70>
 8000d08:	2401      	movs	r4, #1
 8000d0a:	4061      	eors	r1, r4
 8000d0c:	468b      	mov	fp, r1
 8000d0e:	428d      	cmp	r5, r1
 8000d10:	d000      	beq.n	8000d14 <__aeabi_dsub+0x224>
 8000d12:	e716      	b.n	8000b42 <__aeabi_dsub+0x52>
 8000d14:	4952      	ldr	r1, [pc, #328]	; (8000e60 <__aeabi_dsub+0x370>)
 8000d16:	468c      	mov	ip, r1
 8000d18:	44b4      	add	ip, r6
 8000d1a:	4664      	mov	r4, ip
 8000d1c:	2c00      	cmp	r4, #0
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dsub+0x232>
 8000d20:	e0d3      	b.n	8000eca <__aeabi_dsub+0x3da>
 8000d22:	1b91      	subs	r1, r2, r6
 8000d24:	468c      	mov	ip, r1
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dsub+0x23c>
 8000d2a:	e15e      	b.n	8000fea <__aeabi_dsub+0x4fa>
 8000d2c:	494a      	ldr	r1, [pc, #296]	; (8000e58 <__aeabi_dsub+0x368>)
 8000d2e:	428a      	cmp	r2, r1
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dsub+0x244>
 8000d32:	e1be      	b.n	80010b2 <__aeabi_dsub+0x5c2>
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	464c      	mov	r4, r9
 8000d38:	0409      	lsls	r1, r1, #16
 8000d3a:	430c      	orrs	r4, r1
 8000d3c:	46a1      	mov	r9, r4
 8000d3e:	4661      	mov	r1, ip
 8000d40:	2938      	cmp	r1, #56	; 0x38
 8000d42:	dd00      	ble.n	8000d46 <__aeabi_dsub+0x256>
 8000d44:	e1ba      	b.n	80010bc <__aeabi_dsub+0x5cc>
 8000d46:	291f      	cmp	r1, #31
 8000d48:	dd00      	ble.n	8000d4c <__aeabi_dsub+0x25c>
 8000d4a:	e227      	b.n	800119c <__aeabi_dsub+0x6ac>
 8000d4c:	2420      	movs	r4, #32
 8000d4e:	1a64      	subs	r4, r4, r1
 8000d50:	4649      	mov	r1, r9
 8000d52:	40a1      	lsls	r1, r4
 8000d54:	001e      	movs	r6, r3
 8000d56:	4688      	mov	r8, r1
 8000d58:	4661      	mov	r1, ip
 8000d5a:	40a3      	lsls	r3, r4
 8000d5c:	40ce      	lsrs	r6, r1
 8000d5e:	4641      	mov	r1, r8
 8000d60:	1e5c      	subs	r4, r3, #1
 8000d62:	41a3      	sbcs	r3, r4
 8000d64:	4331      	orrs	r1, r6
 8000d66:	4319      	orrs	r1, r3
 8000d68:	000c      	movs	r4, r1
 8000d6a:	4663      	mov	r3, ip
 8000d6c:	4649      	mov	r1, r9
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	187f      	adds	r7, r7, r1
 8000d72:	1824      	adds	r4, r4, r0
 8000d74:	4284      	cmp	r4, r0
 8000d76:	419b      	sbcs	r3, r3
 8000d78:	425b      	negs	r3, r3
 8000d7a:	469a      	mov	sl, r3
 8000d7c:	0016      	movs	r6, r2
 8000d7e:	44ba      	add	sl, r7
 8000d80:	e05d      	b.n	8000e3e <__aeabi_dsub+0x34e>
 8000d82:	4c38      	ldr	r4, [pc, #224]	; (8000e64 <__aeabi_dsub+0x374>)
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	4222      	tst	r2, r4
 8000d88:	d000      	beq.n	8000d8c <__aeabi_dsub+0x29c>
 8000d8a:	e0df      	b.n	8000f4c <__aeabi_dsub+0x45c>
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d000      	beq.n	8000d96 <__aeabi_dsub+0x2a6>
 8000d94:	e15c      	b.n	8001050 <__aeabi_dsub+0x560>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dsub+0x2ac>
 8000d9a:	e1cf      	b.n	800113c <__aeabi_dsub+0x64c>
 8000d9c:	003a      	movs	r2, r7
 8000d9e:	4302      	orrs	r2, r0
 8000da0:	d100      	bne.n	8000da4 <__aeabi_dsub+0x2b4>
 8000da2:	e17f      	b.n	80010a4 <__aeabi_dsub+0x5b4>
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	464a      	mov	r2, r9
 8000da8:	42a3      	cmp	r3, r4
 8000daa:	4189      	sbcs	r1, r1
 8000dac:	1bd2      	subs	r2, r2, r7
 8000dae:	4249      	negs	r1, r1
 8000db0:	1a52      	subs	r2, r2, r1
 8000db2:	4692      	mov	sl, r2
 8000db4:	0212      	lsls	r2, r2, #8
 8000db6:	d400      	bmi.n	8000dba <__aeabi_dsub+0x2ca>
 8000db8:	e20a      	b.n	80011d0 <__aeabi_dsub+0x6e0>
 8000dba:	1ac4      	subs	r4, r0, r3
 8000dbc:	42a0      	cmp	r0, r4
 8000dbe:	4180      	sbcs	r0, r0
 8000dc0:	464b      	mov	r3, r9
 8000dc2:	4240      	negs	r0, r0
 8000dc4:	1aff      	subs	r7, r7, r3
 8000dc6:	1a3b      	subs	r3, r7, r0
 8000dc8:	469a      	mov	sl, r3
 8000dca:	465d      	mov	r5, fp
 8000dcc:	e71a      	b.n	8000c04 <__aeabi_dsub+0x114>
 8000dce:	003a      	movs	r2, r7
 8000dd0:	4302      	orrs	r2, r0
 8000dd2:	d073      	beq.n	8000ebc <__aeabi_dsub+0x3cc>
 8000dd4:	0022      	movs	r2, r4
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	2c01      	cmp	r4, #1
 8000dda:	d100      	bne.n	8000dde <__aeabi_dsub+0x2ee>
 8000ddc:	e0cb      	b.n	8000f76 <__aeabi_dsub+0x486>
 8000dde:	4554      	cmp	r4, sl
 8000de0:	d042      	beq.n	8000e68 <__aeabi_dsub+0x378>
 8000de2:	4694      	mov	ip, r2
 8000de4:	e748      	b.n	8000c78 <__aeabi_dsub+0x188>
 8000de6:	0010      	movs	r0, r2
 8000de8:	3b1f      	subs	r3, #31
 8000dea:	40d8      	lsrs	r0, r3
 8000dec:	2920      	cmp	r1, #32
 8000dee:	d003      	beq.n	8000df8 <__aeabi_dsub+0x308>
 8000df0:	2340      	movs	r3, #64	; 0x40
 8000df2:	1a5b      	subs	r3, r3, r1
 8000df4:	409a      	lsls	r2, r3
 8000df6:	4314      	orrs	r4, r2
 8000df8:	1e63      	subs	r3, r4, #1
 8000dfa:	419c      	sbcs	r4, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2600      	movs	r6, #0
 8000e00:	469a      	mov	sl, r3
 8000e02:	4304      	orrs	r4, r0
 8000e04:	0763      	lsls	r3, r4, #29
 8000e06:	d000      	beq.n	8000e0a <__aeabi_dsub+0x31a>
 8000e08:	e6fe      	b.n	8000c08 <__aeabi_dsub+0x118>
 8000e0a:	4652      	mov	r2, sl
 8000e0c:	08e3      	lsrs	r3, r4, #3
 8000e0e:	0752      	lsls	r2, r2, #29
 8000e10:	4313      	orrs	r3, r2
 8000e12:	4652      	mov	r2, sl
 8000e14:	46b4      	mov	ip, r6
 8000e16:	08d2      	lsrs	r2, r2, #3
 8000e18:	490f      	ldr	r1, [pc, #60]	; (8000e58 <__aeabi_dsub+0x368>)
 8000e1a:	458c      	cmp	ip, r1
 8000e1c:	d02a      	beq.n	8000e74 <__aeabi_dsub+0x384>
 8000e1e:	0312      	lsls	r2, r2, #12
 8000e20:	0b14      	lsrs	r4, r2, #12
 8000e22:	4662      	mov	r2, ip
 8000e24:	0552      	lsls	r2, r2, #21
 8000e26:	0d52      	lsrs	r2, r2, #21
 8000e28:	e70c      	b.n	8000c44 <__aeabi_dsub+0x154>
 8000e2a:	003c      	movs	r4, r7
 8000e2c:	4304      	orrs	r4, r0
 8000e2e:	1e62      	subs	r2, r4, #1
 8000e30:	4194      	sbcs	r4, r2
 8000e32:	18e4      	adds	r4, r4, r3
 8000e34:	429c      	cmp	r4, r3
 8000e36:	4192      	sbcs	r2, r2
 8000e38:	4252      	negs	r2, r2
 8000e3a:	444a      	add	r2, r9
 8000e3c:	4692      	mov	sl, r2
 8000e3e:	4653      	mov	r3, sl
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	d5df      	bpl.n	8000e04 <__aeabi_dsub+0x314>
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__aeabi_dsub+0x368>)
 8000e46:	3601      	adds	r6, #1
 8000e48:	429e      	cmp	r6, r3
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_dsub+0x35e>
 8000e4c:	e0a0      	b.n	8000f90 <__aeabi_dsub+0x4a0>
 8000e4e:	0032      	movs	r2, r6
 8000e50:	2400      	movs	r4, #0
 8000e52:	2300      	movs	r3, #0
 8000e54:	e6f6      	b.n	8000c44 <__aeabi_dsub+0x154>
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	000007ff 	.word	0x000007ff
 8000e5c:	ff7fffff 	.word	0xff7fffff
 8000e60:	fffff801 	.word	0xfffff801
 8000e64:	000007fe 	.word	0x000007fe
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	464a      	mov	r2, r9
 8000e6c:	0752      	lsls	r2, r2, #29
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	464a      	mov	r2, r9
 8000e72:	08d2      	lsrs	r2, r2, #3
 8000e74:	0019      	movs	r1, r3
 8000e76:	4311      	orrs	r1, r2
 8000e78:	d100      	bne.n	8000e7c <__aeabi_dsub+0x38c>
 8000e7a:	e1b5      	b.n	80011e8 <__aeabi_dsub+0x6f8>
 8000e7c:	2480      	movs	r4, #128	; 0x80
 8000e7e:	0324      	lsls	r4, r4, #12
 8000e80:	4314      	orrs	r4, r2
 8000e82:	0324      	lsls	r4, r4, #12
 8000e84:	4ad5      	ldr	r2, [pc, #852]	; (80011dc <__aeabi_dsub+0x6ec>)
 8000e86:	0b24      	lsrs	r4, r4, #12
 8000e88:	e6dc      	b.n	8000c44 <__aeabi_dsub+0x154>
 8000e8a:	0020      	movs	r0, r4
 8000e8c:	f000 fa56 	bl	800133c <__clzsi2>
 8000e90:	0003      	movs	r3, r0
 8000e92:	3318      	adds	r3, #24
 8000e94:	2b1f      	cmp	r3, #31
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_dsub+0x3aa>
 8000e98:	e695      	b.n	8000bc6 <__aeabi_dsub+0xd6>
 8000e9a:	0022      	movs	r2, r4
 8000e9c:	3808      	subs	r0, #8
 8000e9e:	4082      	lsls	r2, r0
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	429e      	cmp	r6, r3
 8000ea4:	dc00      	bgt.n	8000ea8 <__aeabi_dsub+0x3b8>
 8000ea6:	e69a      	b.n	8000bde <__aeabi_dsub+0xee>
 8000ea8:	1af6      	subs	r6, r6, r3
 8000eaa:	4bcd      	ldr	r3, [pc, #820]	; (80011e0 <__aeabi_dsub+0x6f0>)
 8000eac:	401a      	ands	r2, r3
 8000eae:	4692      	mov	sl, r2
 8000eb0:	e6a8      	b.n	8000c04 <__aeabi_dsub+0x114>
 8000eb2:	003c      	movs	r4, r7
 8000eb4:	4304      	orrs	r4, r0
 8000eb6:	1e62      	subs	r2, r4, #1
 8000eb8:	4194      	sbcs	r4, r2
 8000eba:	e66c      	b.n	8000b96 <__aeabi_dsub+0xa6>
 8000ebc:	464a      	mov	r2, r9
 8000ebe:	08db      	lsrs	r3, r3, #3
 8000ec0:	0752      	lsls	r2, r2, #29
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	464a      	mov	r2, r9
 8000ec6:	08d2      	lsrs	r2, r2, #3
 8000ec8:	e7a6      	b.n	8000e18 <__aeabi_dsub+0x328>
 8000eca:	4cc6      	ldr	r4, [pc, #792]	; (80011e4 <__aeabi_dsub+0x6f4>)
 8000ecc:	1c72      	adds	r2, r6, #1
 8000ece:	4222      	tst	r2, r4
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_dsub+0x3e4>
 8000ed2:	e0ac      	b.n	800102e <__aeabi_dsub+0x53e>
 8000ed4:	464a      	mov	r2, r9
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d000      	beq.n	8000ede <__aeabi_dsub+0x3ee>
 8000edc:	e105      	b.n	80010ea <__aeabi_dsub+0x5fa>
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dsub+0x3f4>
 8000ee2:	e156      	b.n	8001192 <__aeabi_dsub+0x6a2>
 8000ee4:	003a      	movs	r2, r7
 8000ee6:	4302      	orrs	r2, r0
 8000ee8:	d100      	bne.n	8000eec <__aeabi_dsub+0x3fc>
 8000eea:	e0db      	b.n	80010a4 <__aeabi_dsub+0x5b4>
 8000eec:	181c      	adds	r4, r3, r0
 8000eee:	429c      	cmp	r4, r3
 8000ef0:	419b      	sbcs	r3, r3
 8000ef2:	444f      	add	r7, r9
 8000ef4:	46ba      	mov	sl, r7
 8000ef6:	425b      	negs	r3, r3
 8000ef8:	449a      	add	sl, r3
 8000efa:	4653      	mov	r3, sl
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	d400      	bmi.n	8000f02 <__aeabi_dsub+0x412>
 8000f00:	e780      	b.n	8000e04 <__aeabi_dsub+0x314>
 8000f02:	4652      	mov	r2, sl
 8000f04:	4bb6      	ldr	r3, [pc, #728]	; (80011e0 <__aeabi_dsub+0x6f0>)
 8000f06:	2601      	movs	r6, #1
 8000f08:	401a      	ands	r2, r3
 8000f0a:	4692      	mov	sl, r2
 8000f0c:	e77a      	b.n	8000e04 <__aeabi_dsub+0x314>
 8000f0e:	4cb3      	ldr	r4, [pc, #716]	; (80011dc <__aeabi_dsub+0x6ec>)
 8000f10:	42a2      	cmp	r2, r4
 8000f12:	d100      	bne.n	8000f16 <__aeabi_dsub+0x426>
 8000f14:	e0c0      	b.n	8001098 <__aeabi_dsub+0x5a8>
 8000f16:	2480      	movs	r4, #128	; 0x80
 8000f18:	464d      	mov	r5, r9
 8000f1a:	0424      	lsls	r4, r4, #16
 8000f1c:	4325      	orrs	r5, r4
 8000f1e:	46a9      	mov	r9, r5
 8000f20:	4664      	mov	r4, ip
 8000f22:	2c38      	cmp	r4, #56	; 0x38
 8000f24:	dc53      	bgt.n	8000fce <__aeabi_dsub+0x4de>
 8000f26:	4661      	mov	r1, ip
 8000f28:	2c1f      	cmp	r4, #31
 8000f2a:	dd00      	ble.n	8000f2e <__aeabi_dsub+0x43e>
 8000f2c:	e0cd      	b.n	80010ca <__aeabi_dsub+0x5da>
 8000f2e:	2520      	movs	r5, #32
 8000f30:	001e      	movs	r6, r3
 8000f32:	1b2d      	subs	r5, r5, r4
 8000f34:	464c      	mov	r4, r9
 8000f36:	40ab      	lsls	r3, r5
 8000f38:	40ac      	lsls	r4, r5
 8000f3a:	40ce      	lsrs	r6, r1
 8000f3c:	1e5d      	subs	r5, r3, #1
 8000f3e:	41ab      	sbcs	r3, r5
 8000f40:	4334      	orrs	r4, r6
 8000f42:	4323      	orrs	r3, r4
 8000f44:	464c      	mov	r4, r9
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	1b3f      	subs	r7, r7, r4
 8000f4a:	e045      	b.n	8000fd8 <__aeabi_dsub+0x4e8>
 8000f4c:	464a      	mov	r2, r9
 8000f4e:	1a1c      	subs	r4, r3, r0
 8000f50:	1bd1      	subs	r1, r2, r7
 8000f52:	42a3      	cmp	r3, r4
 8000f54:	4192      	sbcs	r2, r2
 8000f56:	4252      	negs	r2, r2
 8000f58:	4692      	mov	sl, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	4651      	mov	r1, sl
 8000f5e:	1a52      	subs	r2, r2, r1
 8000f60:	4692      	mov	sl, r2
 8000f62:	0212      	lsls	r2, r2, #8
 8000f64:	d500      	bpl.n	8000f68 <__aeabi_dsub+0x478>
 8000f66:	e083      	b.n	8001070 <__aeabi_dsub+0x580>
 8000f68:	4653      	mov	r3, sl
 8000f6a:	4323      	orrs	r3, r4
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_dsub+0x480>
 8000f6e:	e621      	b.n	8000bb4 <__aeabi_dsub+0xc4>
 8000f70:	2200      	movs	r2, #0
 8000f72:	2500      	movs	r5, #0
 8000f74:	e753      	b.n	8000e1e <__aeabi_dsub+0x32e>
 8000f76:	181c      	adds	r4, r3, r0
 8000f78:	429c      	cmp	r4, r3
 8000f7a:	419b      	sbcs	r3, r3
 8000f7c:	444f      	add	r7, r9
 8000f7e:	46ba      	mov	sl, r7
 8000f80:	425b      	negs	r3, r3
 8000f82:	449a      	add	sl, r3
 8000f84:	4653      	mov	r3, sl
 8000f86:	2601      	movs	r6, #1
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	d400      	bmi.n	8000f8e <__aeabi_dsub+0x49e>
 8000f8c:	e73a      	b.n	8000e04 <__aeabi_dsub+0x314>
 8000f8e:	2602      	movs	r6, #2
 8000f90:	4652      	mov	r2, sl
 8000f92:	4b93      	ldr	r3, [pc, #588]	; (80011e0 <__aeabi_dsub+0x6f0>)
 8000f94:	2101      	movs	r1, #1
 8000f96:	401a      	ands	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	4021      	ands	r1, r4
 8000f9c:	0862      	lsrs	r2, r4, #1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	07dc      	lsls	r4, r3, #31
 8000fa2:	085b      	lsrs	r3, r3, #1
 8000fa4:	469a      	mov	sl, r3
 8000fa6:	4314      	orrs	r4, r2
 8000fa8:	e62c      	b.n	8000c04 <__aeabi_dsub+0x114>
 8000faa:	0039      	movs	r1, r7
 8000fac:	3a20      	subs	r2, #32
 8000fae:	40d1      	lsrs	r1, r2
 8000fb0:	4662      	mov	r2, ip
 8000fb2:	2a20      	cmp	r2, #32
 8000fb4:	d006      	beq.n	8000fc4 <__aeabi_dsub+0x4d4>
 8000fb6:	4664      	mov	r4, ip
 8000fb8:	2240      	movs	r2, #64	; 0x40
 8000fba:	1b12      	subs	r2, r2, r4
 8000fbc:	003c      	movs	r4, r7
 8000fbe:	4094      	lsls	r4, r2
 8000fc0:	4304      	orrs	r4, r0
 8000fc2:	9401      	str	r4, [sp, #4]
 8000fc4:	9c01      	ldr	r4, [sp, #4]
 8000fc6:	1e62      	subs	r2, r4, #1
 8000fc8:	4194      	sbcs	r4, r2
 8000fca:	430c      	orrs	r4, r1
 8000fcc:	e5e3      	b.n	8000b96 <__aeabi_dsub+0xa6>
 8000fce:	4649      	mov	r1, r9
 8000fd0:	4319      	orrs	r1, r3
 8000fd2:	000b      	movs	r3, r1
 8000fd4:	1e5c      	subs	r4, r3, #1
 8000fd6:	41a3      	sbcs	r3, r4
 8000fd8:	1ac4      	subs	r4, r0, r3
 8000fda:	42a0      	cmp	r0, r4
 8000fdc:	419b      	sbcs	r3, r3
 8000fde:	425b      	negs	r3, r3
 8000fe0:	1afb      	subs	r3, r7, r3
 8000fe2:	469a      	mov	sl, r3
 8000fe4:	465d      	mov	r5, fp
 8000fe6:	0016      	movs	r6, r2
 8000fe8:	e5dc      	b.n	8000ba4 <__aeabi_dsub+0xb4>
 8000fea:	4649      	mov	r1, r9
 8000fec:	4319      	orrs	r1, r3
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_dsub+0x502>
 8000ff0:	e0ae      	b.n	8001150 <__aeabi_dsub+0x660>
 8000ff2:	4661      	mov	r1, ip
 8000ff4:	4664      	mov	r4, ip
 8000ff6:	3901      	subs	r1, #1
 8000ff8:	2c01      	cmp	r4, #1
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dsub+0x50e>
 8000ffc:	e0e0      	b.n	80011c0 <__aeabi_dsub+0x6d0>
 8000ffe:	4c77      	ldr	r4, [pc, #476]	; (80011dc <__aeabi_dsub+0x6ec>)
 8001000:	45a4      	cmp	ip, r4
 8001002:	d056      	beq.n	80010b2 <__aeabi_dsub+0x5c2>
 8001004:	468c      	mov	ip, r1
 8001006:	e69a      	b.n	8000d3e <__aeabi_dsub+0x24e>
 8001008:	4661      	mov	r1, ip
 800100a:	2220      	movs	r2, #32
 800100c:	003c      	movs	r4, r7
 800100e:	1a52      	subs	r2, r2, r1
 8001010:	4094      	lsls	r4, r2
 8001012:	0001      	movs	r1, r0
 8001014:	4090      	lsls	r0, r2
 8001016:	46a0      	mov	r8, r4
 8001018:	4664      	mov	r4, ip
 800101a:	1e42      	subs	r2, r0, #1
 800101c:	4190      	sbcs	r0, r2
 800101e:	4662      	mov	r2, ip
 8001020:	40e1      	lsrs	r1, r4
 8001022:	4644      	mov	r4, r8
 8001024:	40d7      	lsrs	r7, r2
 8001026:	430c      	orrs	r4, r1
 8001028:	4304      	orrs	r4, r0
 800102a:	44b9      	add	r9, r7
 800102c:	e701      	b.n	8000e32 <__aeabi_dsub+0x342>
 800102e:	496b      	ldr	r1, [pc, #428]	; (80011dc <__aeabi_dsub+0x6ec>)
 8001030:	428a      	cmp	r2, r1
 8001032:	d100      	bne.n	8001036 <__aeabi_dsub+0x546>
 8001034:	e70c      	b.n	8000e50 <__aeabi_dsub+0x360>
 8001036:	1818      	adds	r0, r3, r0
 8001038:	4298      	cmp	r0, r3
 800103a:	419b      	sbcs	r3, r3
 800103c:	444f      	add	r7, r9
 800103e:	425b      	negs	r3, r3
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	07dc      	lsls	r4, r3, #31
 8001044:	0840      	lsrs	r0, r0, #1
 8001046:	085b      	lsrs	r3, r3, #1
 8001048:	469a      	mov	sl, r3
 800104a:	0016      	movs	r6, r2
 800104c:	4304      	orrs	r4, r0
 800104e:	e6d9      	b.n	8000e04 <__aeabi_dsub+0x314>
 8001050:	2a00      	cmp	r2, #0
 8001052:	d000      	beq.n	8001056 <__aeabi_dsub+0x566>
 8001054:	e081      	b.n	800115a <__aeabi_dsub+0x66a>
 8001056:	003b      	movs	r3, r7
 8001058:	4303      	orrs	r3, r0
 800105a:	d11d      	bne.n	8001098 <__aeabi_dsub+0x5a8>
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	2500      	movs	r5, #0
 8001060:	0312      	lsls	r2, r2, #12
 8001062:	e70b      	b.n	8000e7c <__aeabi_dsub+0x38c>
 8001064:	08c0      	lsrs	r0, r0, #3
 8001066:	077b      	lsls	r3, r7, #29
 8001068:	465d      	mov	r5, fp
 800106a:	4303      	orrs	r3, r0
 800106c:	08fa      	lsrs	r2, r7, #3
 800106e:	e6d3      	b.n	8000e18 <__aeabi_dsub+0x328>
 8001070:	1ac4      	subs	r4, r0, r3
 8001072:	42a0      	cmp	r0, r4
 8001074:	4180      	sbcs	r0, r0
 8001076:	464b      	mov	r3, r9
 8001078:	4240      	negs	r0, r0
 800107a:	1aff      	subs	r7, r7, r3
 800107c:	1a3b      	subs	r3, r7, r0
 800107e:	469a      	mov	sl, r3
 8001080:	465d      	mov	r5, fp
 8001082:	e597      	b.n	8000bb4 <__aeabi_dsub+0xc4>
 8001084:	1a1c      	subs	r4, r3, r0
 8001086:	464a      	mov	r2, r9
 8001088:	42a3      	cmp	r3, r4
 800108a:	419b      	sbcs	r3, r3
 800108c:	1bd7      	subs	r7, r2, r7
 800108e:	425b      	negs	r3, r3
 8001090:	1afb      	subs	r3, r7, r3
 8001092:	469a      	mov	sl, r3
 8001094:	2601      	movs	r6, #1
 8001096:	e585      	b.n	8000ba4 <__aeabi_dsub+0xb4>
 8001098:	08c0      	lsrs	r0, r0, #3
 800109a:	077b      	lsls	r3, r7, #29
 800109c:	465d      	mov	r5, fp
 800109e:	4303      	orrs	r3, r0
 80010a0:	08fa      	lsrs	r2, r7, #3
 80010a2:	e6e7      	b.n	8000e74 <__aeabi_dsub+0x384>
 80010a4:	464a      	mov	r2, r9
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	0752      	lsls	r2, r2, #29
 80010aa:	4313      	orrs	r3, r2
 80010ac:	464a      	mov	r2, r9
 80010ae:	08d2      	lsrs	r2, r2, #3
 80010b0:	e6b5      	b.n	8000e1e <__aeabi_dsub+0x32e>
 80010b2:	08c0      	lsrs	r0, r0, #3
 80010b4:	077b      	lsls	r3, r7, #29
 80010b6:	4303      	orrs	r3, r0
 80010b8:	08fa      	lsrs	r2, r7, #3
 80010ba:	e6db      	b.n	8000e74 <__aeabi_dsub+0x384>
 80010bc:	4649      	mov	r1, r9
 80010be:	4319      	orrs	r1, r3
 80010c0:	000b      	movs	r3, r1
 80010c2:	1e59      	subs	r1, r3, #1
 80010c4:	418b      	sbcs	r3, r1
 80010c6:	001c      	movs	r4, r3
 80010c8:	e653      	b.n	8000d72 <__aeabi_dsub+0x282>
 80010ca:	464d      	mov	r5, r9
 80010cc:	3c20      	subs	r4, #32
 80010ce:	40e5      	lsrs	r5, r4
 80010d0:	2920      	cmp	r1, #32
 80010d2:	d005      	beq.n	80010e0 <__aeabi_dsub+0x5f0>
 80010d4:	2440      	movs	r4, #64	; 0x40
 80010d6:	1a64      	subs	r4, r4, r1
 80010d8:	4649      	mov	r1, r9
 80010da:	40a1      	lsls	r1, r4
 80010dc:	430b      	orrs	r3, r1
 80010de:	4698      	mov	r8, r3
 80010e0:	4643      	mov	r3, r8
 80010e2:	1e5c      	subs	r4, r3, #1
 80010e4:	41a3      	sbcs	r3, r4
 80010e6:	432b      	orrs	r3, r5
 80010e8:	e776      	b.n	8000fd8 <__aeabi_dsub+0x4e8>
 80010ea:	2a00      	cmp	r2, #0
 80010ec:	d0e1      	beq.n	80010b2 <__aeabi_dsub+0x5c2>
 80010ee:	003a      	movs	r2, r7
 80010f0:	08db      	lsrs	r3, r3, #3
 80010f2:	4302      	orrs	r2, r0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_dsub+0x608>
 80010f6:	e6b8      	b.n	8000e6a <__aeabi_dsub+0x37a>
 80010f8:	464a      	mov	r2, r9
 80010fa:	0752      	lsls	r2, r2, #29
 80010fc:	2480      	movs	r4, #128	; 0x80
 80010fe:	4313      	orrs	r3, r2
 8001100:	464a      	mov	r2, r9
 8001102:	0324      	lsls	r4, r4, #12
 8001104:	08d2      	lsrs	r2, r2, #3
 8001106:	4222      	tst	r2, r4
 8001108:	d007      	beq.n	800111a <__aeabi_dsub+0x62a>
 800110a:	08fe      	lsrs	r6, r7, #3
 800110c:	4226      	tst	r6, r4
 800110e:	d104      	bne.n	800111a <__aeabi_dsub+0x62a>
 8001110:	465d      	mov	r5, fp
 8001112:	0032      	movs	r2, r6
 8001114:	08c3      	lsrs	r3, r0, #3
 8001116:	077f      	lsls	r7, r7, #29
 8001118:	433b      	orrs	r3, r7
 800111a:	0f59      	lsrs	r1, r3, #29
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	0749      	lsls	r1, r1, #29
 8001120:	08db      	lsrs	r3, r3, #3
 8001122:	430b      	orrs	r3, r1
 8001124:	e6a6      	b.n	8000e74 <__aeabi_dsub+0x384>
 8001126:	1ac4      	subs	r4, r0, r3
 8001128:	42a0      	cmp	r0, r4
 800112a:	4180      	sbcs	r0, r0
 800112c:	464b      	mov	r3, r9
 800112e:	4240      	negs	r0, r0
 8001130:	1aff      	subs	r7, r7, r3
 8001132:	1a3b      	subs	r3, r7, r0
 8001134:	469a      	mov	sl, r3
 8001136:	465d      	mov	r5, fp
 8001138:	2601      	movs	r6, #1
 800113a:	e533      	b.n	8000ba4 <__aeabi_dsub+0xb4>
 800113c:	003b      	movs	r3, r7
 800113e:	4303      	orrs	r3, r0
 8001140:	d100      	bne.n	8001144 <__aeabi_dsub+0x654>
 8001142:	e715      	b.n	8000f70 <__aeabi_dsub+0x480>
 8001144:	08c0      	lsrs	r0, r0, #3
 8001146:	077b      	lsls	r3, r7, #29
 8001148:	465d      	mov	r5, fp
 800114a:	4303      	orrs	r3, r0
 800114c:	08fa      	lsrs	r2, r7, #3
 800114e:	e666      	b.n	8000e1e <__aeabi_dsub+0x32e>
 8001150:	08c0      	lsrs	r0, r0, #3
 8001152:	077b      	lsls	r3, r7, #29
 8001154:	4303      	orrs	r3, r0
 8001156:	08fa      	lsrs	r2, r7, #3
 8001158:	e65e      	b.n	8000e18 <__aeabi_dsub+0x328>
 800115a:	003a      	movs	r2, r7
 800115c:	08db      	lsrs	r3, r3, #3
 800115e:	4302      	orrs	r2, r0
 8001160:	d100      	bne.n	8001164 <__aeabi_dsub+0x674>
 8001162:	e682      	b.n	8000e6a <__aeabi_dsub+0x37a>
 8001164:	464a      	mov	r2, r9
 8001166:	0752      	lsls	r2, r2, #29
 8001168:	2480      	movs	r4, #128	; 0x80
 800116a:	4313      	orrs	r3, r2
 800116c:	464a      	mov	r2, r9
 800116e:	0324      	lsls	r4, r4, #12
 8001170:	08d2      	lsrs	r2, r2, #3
 8001172:	4222      	tst	r2, r4
 8001174:	d007      	beq.n	8001186 <__aeabi_dsub+0x696>
 8001176:	08fe      	lsrs	r6, r7, #3
 8001178:	4226      	tst	r6, r4
 800117a:	d104      	bne.n	8001186 <__aeabi_dsub+0x696>
 800117c:	465d      	mov	r5, fp
 800117e:	0032      	movs	r2, r6
 8001180:	08c3      	lsrs	r3, r0, #3
 8001182:	077f      	lsls	r7, r7, #29
 8001184:	433b      	orrs	r3, r7
 8001186:	0f59      	lsrs	r1, r3, #29
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	08db      	lsrs	r3, r3, #3
 800118c:	0749      	lsls	r1, r1, #29
 800118e:	430b      	orrs	r3, r1
 8001190:	e670      	b.n	8000e74 <__aeabi_dsub+0x384>
 8001192:	08c0      	lsrs	r0, r0, #3
 8001194:	077b      	lsls	r3, r7, #29
 8001196:	4303      	orrs	r3, r0
 8001198:	08fa      	lsrs	r2, r7, #3
 800119a:	e640      	b.n	8000e1e <__aeabi_dsub+0x32e>
 800119c:	464c      	mov	r4, r9
 800119e:	3920      	subs	r1, #32
 80011a0:	40cc      	lsrs	r4, r1
 80011a2:	4661      	mov	r1, ip
 80011a4:	2920      	cmp	r1, #32
 80011a6:	d006      	beq.n	80011b6 <__aeabi_dsub+0x6c6>
 80011a8:	4666      	mov	r6, ip
 80011aa:	2140      	movs	r1, #64	; 0x40
 80011ac:	1b89      	subs	r1, r1, r6
 80011ae:	464e      	mov	r6, r9
 80011b0:	408e      	lsls	r6, r1
 80011b2:	4333      	orrs	r3, r6
 80011b4:	4698      	mov	r8, r3
 80011b6:	4643      	mov	r3, r8
 80011b8:	1e59      	subs	r1, r3, #1
 80011ba:	418b      	sbcs	r3, r1
 80011bc:	431c      	orrs	r4, r3
 80011be:	e5d8      	b.n	8000d72 <__aeabi_dsub+0x282>
 80011c0:	181c      	adds	r4, r3, r0
 80011c2:	4284      	cmp	r4, r0
 80011c4:	4180      	sbcs	r0, r0
 80011c6:	444f      	add	r7, r9
 80011c8:	46ba      	mov	sl, r7
 80011ca:	4240      	negs	r0, r0
 80011cc:	4482      	add	sl, r0
 80011ce:	e6d9      	b.n	8000f84 <__aeabi_dsub+0x494>
 80011d0:	4653      	mov	r3, sl
 80011d2:	4323      	orrs	r3, r4
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dsub+0x6e8>
 80011d6:	e6cb      	b.n	8000f70 <__aeabi_dsub+0x480>
 80011d8:	e614      	b.n	8000e04 <__aeabi_dsub+0x314>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	000007ff 	.word	0x000007ff
 80011e0:	ff7fffff 	.word	0xff7fffff
 80011e4:	000007fe 	.word	0x000007fe
 80011e8:	2300      	movs	r3, #0
 80011ea:	4a01      	ldr	r2, [pc, #4]	; (80011f0 <__aeabi_dsub+0x700>)
 80011ec:	001c      	movs	r4, r3
 80011ee:	e529      	b.n	8000c44 <__aeabi_dsub+0x154>
 80011f0:	000007ff 	.word	0x000007ff

080011f4 <__aeabi_d2iz>:
 80011f4:	000a      	movs	r2, r1
 80011f6:	b530      	push	{r4, r5, lr}
 80011f8:	4c13      	ldr	r4, [pc, #76]	; (8001248 <__aeabi_d2iz+0x54>)
 80011fa:	0053      	lsls	r3, r2, #1
 80011fc:	0309      	lsls	r1, r1, #12
 80011fe:	0005      	movs	r5, r0
 8001200:	0b09      	lsrs	r1, r1, #12
 8001202:	2000      	movs	r0, #0
 8001204:	0d5b      	lsrs	r3, r3, #21
 8001206:	0fd2      	lsrs	r2, r2, #31
 8001208:	42a3      	cmp	r3, r4
 800120a:	dd04      	ble.n	8001216 <__aeabi_d2iz+0x22>
 800120c:	480f      	ldr	r0, [pc, #60]	; (800124c <__aeabi_d2iz+0x58>)
 800120e:	4283      	cmp	r3, r0
 8001210:	dd02      	ble.n	8001218 <__aeabi_d2iz+0x24>
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <__aeabi_d2iz+0x5c>)
 8001214:	18d0      	adds	r0, r2, r3
 8001216:	bd30      	pop	{r4, r5, pc}
 8001218:	2080      	movs	r0, #128	; 0x80
 800121a:	0340      	lsls	r0, r0, #13
 800121c:	4301      	orrs	r1, r0
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <__aeabi_d2iz+0x60>)
 8001220:	1ac0      	subs	r0, r0, r3
 8001222:	281f      	cmp	r0, #31
 8001224:	dd08      	ble.n	8001238 <__aeabi_d2iz+0x44>
 8001226:	480c      	ldr	r0, [pc, #48]	; (8001258 <__aeabi_d2iz+0x64>)
 8001228:	1ac3      	subs	r3, r0, r3
 800122a:	40d9      	lsrs	r1, r3
 800122c:	000b      	movs	r3, r1
 800122e:	4258      	negs	r0, r3
 8001230:	2a00      	cmp	r2, #0
 8001232:	d1f0      	bne.n	8001216 <__aeabi_d2iz+0x22>
 8001234:	0018      	movs	r0, r3
 8001236:	e7ee      	b.n	8001216 <__aeabi_d2iz+0x22>
 8001238:	4c08      	ldr	r4, [pc, #32]	; (800125c <__aeabi_d2iz+0x68>)
 800123a:	40c5      	lsrs	r5, r0
 800123c:	46a4      	mov	ip, r4
 800123e:	4463      	add	r3, ip
 8001240:	4099      	lsls	r1, r3
 8001242:	000b      	movs	r3, r1
 8001244:	432b      	orrs	r3, r5
 8001246:	e7f2      	b.n	800122e <__aeabi_d2iz+0x3a>
 8001248:	000003fe 	.word	0x000003fe
 800124c:	0000041d 	.word	0x0000041d
 8001250:	7fffffff 	.word	0x7fffffff
 8001254:	00000433 	.word	0x00000433
 8001258:	00000413 	.word	0x00000413
 800125c:	fffffbed 	.word	0xfffffbed

08001260 <__aeabi_i2d>:
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	2800      	cmp	r0, #0
 8001264:	d016      	beq.n	8001294 <__aeabi_i2d+0x34>
 8001266:	17c3      	asrs	r3, r0, #31
 8001268:	18c5      	adds	r5, r0, r3
 800126a:	405d      	eors	r5, r3
 800126c:	0fc4      	lsrs	r4, r0, #31
 800126e:	0028      	movs	r0, r5
 8001270:	f000 f864 	bl	800133c <__clzsi2>
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <__aeabi_i2d+0x5c>)
 8001276:	1a1b      	subs	r3, r3, r0
 8001278:	280a      	cmp	r0, #10
 800127a:	dc16      	bgt.n	80012aa <__aeabi_i2d+0x4a>
 800127c:	0002      	movs	r2, r0
 800127e:	002e      	movs	r6, r5
 8001280:	3215      	adds	r2, #21
 8001282:	4096      	lsls	r6, r2
 8001284:	220b      	movs	r2, #11
 8001286:	1a12      	subs	r2, r2, r0
 8001288:	40d5      	lsrs	r5, r2
 800128a:	055b      	lsls	r3, r3, #21
 800128c:	032d      	lsls	r5, r5, #12
 800128e:	0b2d      	lsrs	r5, r5, #12
 8001290:	0d5b      	lsrs	r3, r3, #21
 8001292:	e003      	b.n	800129c <__aeabi_i2d+0x3c>
 8001294:	2400      	movs	r4, #0
 8001296:	2300      	movs	r3, #0
 8001298:	2500      	movs	r5, #0
 800129a:	2600      	movs	r6, #0
 800129c:	051b      	lsls	r3, r3, #20
 800129e:	432b      	orrs	r3, r5
 80012a0:	07e4      	lsls	r4, r4, #31
 80012a2:	4323      	orrs	r3, r4
 80012a4:	0030      	movs	r0, r6
 80012a6:	0019      	movs	r1, r3
 80012a8:	bd70      	pop	{r4, r5, r6, pc}
 80012aa:	380b      	subs	r0, #11
 80012ac:	4085      	lsls	r5, r0
 80012ae:	055b      	lsls	r3, r3, #21
 80012b0:	032d      	lsls	r5, r5, #12
 80012b2:	2600      	movs	r6, #0
 80012b4:	0b2d      	lsrs	r5, r5, #12
 80012b6:	0d5b      	lsrs	r3, r3, #21
 80012b8:	e7f0      	b.n	800129c <__aeabi_i2d+0x3c>
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	0000041e 	.word	0x0000041e

080012c0 <__aeabi_cdrcmple>:
 80012c0:	4684      	mov	ip, r0
 80012c2:	0010      	movs	r0, r2
 80012c4:	4662      	mov	r2, ip
 80012c6:	468c      	mov	ip, r1
 80012c8:	0019      	movs	r1, r3
 80012ca:	4663      	mov	r3, ip
 80012cc:	e000      	b.n	80012d0 <__aeabi_cdcmpeq>
 80012ce:	46c0      	nop			; (mov r8, r8)

080012d0 <__aeabi_cdcmpeq>:
 80012d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80012d2:	f000 f8f9 	bl	80014c8 <__ledf2>
 80012d6:	2800      	cmp	r0, #0
 80012d8:	d401      	bmi.n	80012de <__aeabi_cdcmpeq+0xe>
 80012da:	2100      	movs	r1, #0
 80012dc:	42c8      	cmn	r0, r1
 80012de:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080012e0 <__aeabi_dcmpeq>:
 80012e0:	b510      	push	{r4, lr}
 80012e2:	f000 f849 	bl	8001378 <__eqdf2>
 80012e6:	4240      	negs	r0, r0
 80012e8:	3001      	adds	r0, #1
 80012ea:	bd10      	pop	{r4, pc}

080012ec <__aeabi_dcmplt>:
 80012ec:	b510      	push	{r4, lr}
 80012ee:	f000 f8eb 	bl	80014c8 <__ledf2>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	db01      	blt.n	80012fa <__aeabi_dcmplt+0xe>
 80012f6:	2000      	movs	r0, #0
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	2001      	movs	r0, #1
 80012fc:	bd10      	pop	{r4, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)

08001300 <__aeabi_dcmple>:
 8001300:	b510      	push	{r4, lr}
 8001302:	f000 f8e1 	bl	80014c8 <__ledf2>
 8001306:	2800      	cmp	r0, #0
 8001308:	dd01      	ble.n	800130e <__aeabi_dcmple+0xe>
 800130a:	2000      	movs	r0, #0
 800130c:	bd10      	pop	{r4, pc}
 800130e:	2001      	movs	r0, #1
 8001310:	bd10      	pop	{r4, pc}
 8001312:	46c0      	nop			; (mov r8, r8)

08001314 <__aeabi_dcmpgt>:
 8001314:	b510      	push	{r4, lr}
 8001316:	f000 f871 	bl	80013fc <__gedf2>
 800131a:	2800      	cmp	r0, #0
 800131c:	dc01      	bgt.n	8001322 <__aeabi_dcmpgt+0xe>
 800131e:	2000      	movs	r0, #0
 8001320:	bd10      	pop	{r4, pc}
 8001322:	2001      	movs	r0, #1
 8001324:	bd10      	pop	{r4, pc}
 8001326:	46c0      	nop			; (mov r8, r8)

08001328 <__aeabi_dcmpge>:
 8001328:	b510      	push	{r4, lr}
 800132a:	f000 f867 	bl	80013fc <__gedf2>
 800132e:	2800      	cmp	r0, #0
 8001330:	da01      	bge.n	8001336 <__aeabi_dcmpge+0xe>
 8001332:	2000      	movs	r0, #0
 8001334:	bd10      	pop	{r4, pc}
 8001336:	2001      	movs	r0, #1
 8001338:	bd10      	pop	{r4, pc}
 800133a:	46c0      	nop			; (mov r8, r8)

0800133c <__clzsi2>:
 800133c:	211c      	movs	r1, #28
 800133e:	2301      	movs	r3, #1
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	4298      	cmp	r0, r3
 8001344:	d301      	bcc.n	800134a <__clzsi2+0xe>
 8001346:	0c00      	lsrs	r0, r0, #16
 8001348:	3910      	subs	r1, #16
 800134a:	0a1b      	lsrs	r3, r3, #8
 800134c:	4298      	cmp	r0, r3
 800134e:	d301      	bcc.n	8001354 <__clzsi2+0x18>
 8001350:	0a00      	lsrs	r0, r0, #8
 8001352:	3908      	subs	r1, #8
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	4298      	cmp	r0, r3
 8001358:	d301      	bcc.n	800135e <__clzsi2+0x22>
 800135a:	0900      	lsrs	r0, r0, #4
 800135c:	3904      	subs	r1, #4
 800135e:	a202      	add	r2, pc, #8	; (adr r2, 8001368 <__clzsi2+0x2c>)
 8001360:	5c10      	ldrb	r0, [r2, r0]
 8001362:	1840      	adds	r0, r0, r1
 8001364:	4770      	bx	lr
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	02020304 	.word	0x02020304
 800136c:	01010101 	.word	0x01010101
	...

08001378 <__eqdf2>:
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	464e      	mov	r6, r9
 800137c:	4645      	mov	r5, r8
 800137e:	46de      	mov	lr, fp
 8001380:	4657      	mov	r7, sl
 8001382:	4690      	mov	r8, r2
 8001384:	b5e0      	push	{r5, r6, r7, lr}
 8001386:	0017      	movs	r7, r2
 8001388:	031a      	lsls	r2, r3, #12
 800138a:	0b12      	lsrs	r2, r2, #12
 800138c:	0005      	movs	r5, r0
 800138e:	4684      	mov	ip, r0
 8001390:	4819      	ldr	r0, [pc, #100]	; (80013f8 <__eqdf2+0x80>)
 8001392:	030e      	lsls	r6, r1, #12
 8001394:	004c      	lsls	r4, r1, #1
 8001396:	4691      	mov	r9, r2
 8001398:	005a      	lsls	r2, r3, #1
 800139a:	0fdb      	lsrs	r3, r3, #31
 800139c:	469b      	mov	fp, r3
 800139e:	0b36      	lsrs	r6, r6, #12
 80013a0:	0d64      	lsrs	r4, r4, #21
 80013a2:	0fc9      	lsrs	r1, r1, #31
 80013a4:	0d52      	lsrs	r2, r2, #21
 80013a6:	4284      	cmp	r4, r0
 80013a8:	d019      	beq.n	80013de <__eqdf2+0x66>
 80013aa:	4282      	cmp	r2, r0
 80013ac:	d010      	beq.n	80013d0 <__eqdf2+0x58>
 80013ae:	2001      	movs	r0, #1
 80013b0:	4294      	cmp	r4, r2
 80013b2:	d10e      	bne.n	80013d2 <__eqdf2+0x5a>
 80013b4:	454e      	cmp	r6, r9
 80013b6:	d10c      	bne.n	80013d2 <__eqdf2+0x5a>
 80013b8:	2001      	movs	r0, #1
 80013ba:	45c4      	cmp	ip, r8
 80013bc:	d109      	bne.n	80013d2 <__eqdf2+0x5a>
 80013be:	4559      	cmp	r1, fp
 80013c0:	d017      	beq.n	80013f2 <__eqdf2+0x7a>
 80013c2:	2c00      	cmp	r4, #0
 80013c4:	d105      	bne.n	80013d2 <__eqdf2+0x5a>
 80013c6:	0030      	movs	r0, r6
 80013c8:	4328      	orrs	r0, r5
 80013ca:	1e43      	subs	r3, r0, #1
 80013cc:	4198      	sbcs	r0, r3
 80013ce:	e000      	b.n	80013d2 <__eqdf2+0x5a>
 80013d0:	2001      	movs	r0, #1
 80013d2:	bcf0      	pop	{r4, r5, r6, r7}
 80013d4:	46bb      	mov	fp, r7
 80013d6:	46b2      	mov	sl, r6
 80013d8:	46a9      	mov	r9, r5
 80013da:	46a0      	mov	r8, r4
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	0033      	movs	r3, r6
 80013e0:	2001      	movs	r0, #1
 80013e2:	432b      	orrs	r3, r5
 80013e4:	d1f5      	bne.n	80013d2 <__eqdf2+0x5a>
 80013e6:	42a2      	cmp	r2, r4
 80013e8:	d1f3      	bne.n	80013d2 <__eqdf2+0x5a>
 80013ea:	464b      	mov	r3, r9
 80013ec:	433b      	orrs	r3, r7
 80013ee:	d1f0      	bne.n	80013d2 <__eqdf2+0x5a>
 80013f0:	e7e2      	b.n	80013b8 <__eqdf2+0x40>
 80013f2:	2000      	movs	r0, #0
 80013f4:	e7ed      	b.n	80013d2 <__eqdf2+0x5a>
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	000007ff 	.word	0x000007ff

080013fc <__gedf2>:
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	4647      	mov	r7, r8
 8001400:	46ce      	mov	lr, r9
 8001402:	0004      	movs	r4, r0
 8001404:	0018      	movs	r0, r3
 8001406:	0016      	movs	r6, r2
 8001408:	031b      	lsls	r3, r3, #12
 800140a:	0b1b      	lsrs	r3, r3, #12
 800140c:	4d2d      	ldr	r5, [pc, #180]	; (80014c4 <__gedf2+0xc8>)
 800140e:	004a      	lsls	r2, r1, #1
 8001410:	4699      	mov	r9, r3
 8001412:	b580      	push	{r7, lr}
 8001414:	0043      	lsls	r3, r0, #1
 8001416:	030f      	lsls	r7, r1, #12
 8001418:	46a4      	mov	ip, r4
 800141a:	46b0      	mov	r8, r6
 800141c:	0b3f      	lsrs	r7, r7, #12
 800141e:	0d52      	lsrs	r2, r2, #21
 8001420:	0fc9      	lsrs	r1, r1, #31
 8001422:	0d5b      	lsrs	r3, r3, #21
 8001424:	0fc0      	lsrs	r0, r0, #31
 8001426:	42aa      	cmp	r2, r5
 8001428:	d021      	beq.n	800146e <__gedf2+0x72>
 800142a:	42ab      	cmp	r3, r5
 800142c:	d013      	beq.n	8001456 <__gedf2+0x5a>
 800142e:	2a00      	cmp	r2, #0
 8001430:	d122      	bne.n	8001478 <__gedf2+0x7c>
 8001432:	433c      	orrs	r4, r7
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <__gedf2+0x42>
 8001438:	464d      	mov	r5, r9
 800143a:	432e      	orrs	r6, r5
 800143c:	d022      	beq.n	8001484 <__gedf2+0x88>
 800143e:	2c00      	cmp	r4, #0
 8001440:	d010      	beq.n	8001464 <__gedf2+0x68>
 8001442:	4281      	cmp	r1, r0
 8001444:	d022      	beq.n	800148c <__gedf2+0x90>
 8001446:	2002      	movs	r0, #2
 8001448:	3901      	subs	r1, #1
 800144a:	4008      	ands	r0, r1
 800144c:	3801      	subs	r0, #1
 800144e:	bcc0      	pop	{r6, r7}
 8001450:	46b9      	mov	r9, r7
 8001452:	46b0      	mov	r8, r6
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001456:	464d      	mov	r5, r9
 8001458:	432e      	orrs	r6, r5
 800145a:	d129      	bne.n	80014b0 <__gedf2+0xb4>
 800145c:	2a00      	cmp	r2, #0
 800145e:	d1f0      	bne.n	8001442 <__gedf2+0x46>
 8001460:	433c      	orrs	r4, r7
 8001462:	d1ee      	bne.n	8001442 <__gedf2+0x46>
 8001464:	2800      	cmp	r0, #0
 8001466:	d1f2      	bne.n	800144e <__gedf2+0x52>
 8001468:	2001      	movs	r0, #1
 800146a:	4240      	negs	r0, r0
 800146c:	e7ef      	b.n	800144e <__gedf2+0x52>
 800146e:	003d      	movs	r5, r7
 8001470:	4325      	orrs	r5, r4
 8001472:	d11d      	bne.n	80014b0 <__gedf2+0xb4>
 8001474:	4293      	cmp	r3, r2
 8001476:	d0ee      	beq.n	8001456 <__gedf2+0x5a>
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e2      	bne.n	8001442 <__gedf2+0x46>
 800147c:	464c      	mov	r4, r9
 800147e:	4326      	orrs	r6, r4
 8001480:	d1df      	bne.n	8001442 <__gedf2+0x46>
 8001482:	e7e0      	b.n	8001446 <__gedf2+0x4a>
 8001484:	2000      	movs	r0, #0
 8001486:	2c00      	cmp	r4, #0
 8001488:	d0e1      	beq.n	800144e <__gedf2+0x52>
 800148a:	e7dc      	b.n	8001446 <__gedf2+0x4a>
 800148c:	429a      	cmp	r2, r3
 800148e:	dc0a      	bgt.n	80014a6 <__gedf2+0xaa>
 8001490:	dbe8      	blt.n	8001464 <__gedf2+0x68>
 8001492:	454f      	cmp	r7, r9
 8001494:	d8d7      	bhi.n	8001446 <__gedf2+0x4a>
 8001496:	d00e      	beq.n	80014b6 <__gedf2+0xba>
 8001498:	2000      	movs	r0, #0
 800149a:	454f      	cmp	r7, r9
 800149c:	d2d7      	bcs.n	800144e <__gedf2+0x52>
 800149e:	2900      	cmp	r1, #0
 80014a0:	d0e2      	beq.n	8001468 <__gedf2+0x6c>
 80014a2:	0008      	movs	r0, r1
 80014a4:	e7d3      	b.n	800144e <__gedf2+0x52>
 80014a6:	4243      	negs	r3, r0
 80014a8:	4158      	adcs	r0, r3
 80014aa:	0040      	lsls	r0, r0, #1
 80014ac:	3801      	subs	r0, #1
 80014ae:	e7ce      	b.n	800144e <__gedf2+0x52>
 80014b0:	2002      	movs	r0, #2
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7cb      	b.n	800144e <__gedf2+0x52>
 80014b6:	45c4      	cmp	ip, r8
 80014b8:	d8c5      	bhi.n	8001446 <__gedf2+0x4a>
 80014ba:	2000      	movs	r0, #0
 80014bc:	45c4      	cmp	ip, r8
 80014be:	d2c6      	bcs.n	800144e <__gedf2+0x52>
 80014c0:	e7ed      	b.n	800149e <__gedf2+0xa2>
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	000007ff 	.word	0x000007ff

080014c8 <__ledf2>:
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	4647      	mov	r7, r8
 80014cc:	46ce      	mov	lr, r9
 80014ce:	0004      	movs	r4, r0
 80014d0:	0018      	movs	r0, r3
 80014d2:	0016      	movs	r6, r2
 80014d4:	031b      	lsls	r3, r3, #12
 80014d6:	0b1b      	lsrs	r3, r3, #12
 80014d8:	4d2c      	ldr	r5, [pc, #176]	; (800158c <__ledf2+0xc4>)
 80014da:	004a      	lsls	r2, r1, #1
 80014dc:	4699      	mov	r9, r3
 80014de:	b580      	push	{r7, lr}
 80014e0:	0043      	lsls	r3, r0, #1
 80014e2:	030f      	lsls	r7, r1, #12
 80014e4:	46a4      	mov	ip, r4
 80014e6:	46b0      	mov	r8, r6
 80014e8:	0b3f      	lsrs	r7, r7, #12
 80014ea:	0d52      	lsrs	r2, r2, #21
 80014ec:	0fc9      	lsrs	r1, r1, #31
 80014ee:	0d5b      	lsrs	r3, r3, #21
 80014f0:	0fc0      	lsrs	r0, r0, #31
 80014f2:	42aa      	cmp	r2, r5
 80014f4:	d00d      	beq.n	8001512 <__ledf2+0x4a>
 80014f6:	42ab      	cmp	r3, r5
 80014f8:	d010      	beq.n	800151c <__ledf2+0x54>
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	d127      	bne.n	800154e <__ledf2+0x86>
 80014fe:	433c      	orrs	r4, r7
 8001500:	2b00      	cmp	r3, #0
 8001502:	d111      	bne.n	8001528 <__ledf2+0x60>
 8001504:	464d      	mov	r5, r9
 8001506:	432e      	orrs	r6, r5
 8001508:	d10e      	bne.n	8001528 <__ledf2+0x60>
 800150a:	2000      	movs	r0, #0
 800150c:	2c00      	cmp	r4, #0
 800150e:	d015      	beq.n	800153c <__ledf2+0x74>
 8001510:	e00e      	b.n	8001530 <__ledf2+0x68>
 8001512:	003d      	movs	r5, r7
 8001514:	4325      	orrs	r5, r4
 8001516:	d110      	bne.n	800153a <__ledf2+0x72>
 8001518:	4293      	cmp	r3, r2
 800151a:	d118      	bne.n	800154e <__ledf2+0x86>
 800151c:	464d      	mov	r5, r9
 800151e:	432e      	orrs	r6, r5
 8001520:	d10b      	bne.n	800153a <__ledf2+0x72>
 8001522:	2a00      	cmp	r2, #0
 8001524:	d102      	bne.n	800152c <__ledf2+0x64>
 8001526:	433c      	orrs	r4, r7
 8001528:	2c00      	cmp	r4, #0
 800152a:	d00b      	beq.n	8001544 <__ledf2+0x7c>
 800152c:	4281      	cmp	r1, r0
 800152e:	d014      	beq.n	800155a <__ledf2+0x92>
 8001530:	2002      	movs	r0, #2
 8001532:	3901      	subs	r1, #1
 8001534:	4008      	ands	r0, r1
 8001536:	3801      	subs	r0, #1
 8001538:	e000      	b.n	800153c <__ledf2+0x74>
 800153a:	2002      	movs	r0, #2
 800153c:	bcc0      	pop	{r6, r7}
 800153e:	46b9      	mov	r9, r7
 8001540:	46b0      	mov	r8, r6
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001544:	2800      	cmp	r0, #0
 8001546:	d1f9      	bne.n	800153c <__ledf2+0x74>
 8001548:	2001      	movs	r0, #1
 800154a:	4240      	negs	r0, r0
 800154c:	e7f6      	b.n	800153c <__ledf2+0x74>
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ec      	bne.n	800152c <__ledf2+0x64>
 8001552:	464c      	mov	r4, r9
 8001554:	4326      	orrs	r6, r4
 8001556:	d1e9      	bne.n	800152c <__ledf2+0x64>
 8001558:	e7ea      	b.n	8001530 <__ledf2+0x68>
 800155a:	429a      	cmp	r2, r3
 800155c:	dd04      	ble.n	8001568 <__ledf2+0xa0>
 800155e:	4243      	negs	r3, r0
 8001560:	4158      	adcs	r0, r3
 8001562:	0040      	lsls	r0, r0, #1
 8001564:	3801      	subs	r0, #1
 8001566:	e7e9      	b.n	800153c <__ledf2+0x74>
 8001568:	429a      	cmp	r2, r3
 800156a:	dbeb      	blt.n	8001544 <__ledf2+0x7c>
 800156c:	454f      	cmp	r7, r9
 800156e:	d8df      	bhi.n	8001530 <__ledf2+0x68>
 8001570:	d006      	beq.n	8001580 <__ledf2+0xb8>
 8001572:	2000      	movs	r0, #0
 8001574:	454f      	cmp	r7, r9
 8001576:	d2e1      	bcs.n	800153c <__ledf2+0x74>
 8001578:	2900      	cmp	r1, #0
 800157a:	d0e5      	beq.n	8001548 <__ledf2+0x80>
 800157c:	0008      	movs	r0, r1
 800157e:	e7dd      	b.n	800153c <__ledf2+0x74>
 8001580:	45c4      	cmp	ip, r8
 8001582:	d8d5      	bhi.n	8001530 <__ledf2+0x68>
 8001584:	2000      	movs	r0, #0
 8001586:	45c4      	cmp	ip, r8
 8001588:	d2d8      	bcs.n	800153c <__ledf2+0x74>
 800158a:	e7f5      	b.n	8001578 <__ledf2+0xb0>
 800158c:	000007ff 	.word	0x000007ff

08001590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b08b      	sub	sp, #44	; 0x2c
 8001594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	2414      	movs	r4, #20
 8001598:	193b      	adds	r3, r7, r4
 800159a:	0018      	movs	r0, r3
 800159c:	2314      	movs	r3, #20
 800159e:	001a      	movs	r2, r3
 80015a0:	2100      	movs	r1, #0
 80015a2:	f003 fb6d 	bl	8004c80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <MX_GPIO_Init+0x11c>)
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	4b40      	ldr	r3, [pc, #256]	; (80016ac <MX_GPIO_Init+0x11c>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0309      	lsls	r1, r1, #12
 80015b0:	430a      	orrs	r2, r1
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <MX_GPIO_Init+0x11c>)
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	031b      	lsls	r3, r3, #12
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015c2:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <MX_GPIO_Init+0x11c>)
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	4b39      	ldr	r3, [pc, #228]	; (80016ac <MX_GPIO_Init+0x11c>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	03c9      	lsls	r1, r1, #15
 80015cc:	430a      	orrs	r2, r1
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <MX_GPIO_Init+0x11c>)
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	03db      	lsls	r3, r3, #15
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <MX_GPIO_Init+0x11c>)
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <MX_GPIO_Init+0x11c>)
 80015e4:	2180      	movs	r1, #128	; 0x80
 80015e6:	0289      	lsls	r1, r1, #10
 80015e8:	430a      	orrs	r2, r1
 80015ea:	615a      	str	r2, [r3, #20]
 80015ec:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <MX_GPIO_Init+0x11c>)
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	029b      	lsls	r3, r3, #10
 80015f4:	4013      	ands	r3, r2
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <MX_GPIO_Init+0x11c>)
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <MX_GPIO_Init+0x11c>)
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	02c9      	lsls	r1, r1, #11
 8001604:	430a      	orrs	r2, r1
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <MX_GPIO_Init+0x11c>)
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	02db      	lsls	r3, r3, #11
 8001610:	4013      	ands	r3, r2
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001616:	2390      	movs	r3, #144	; 0x90
 8001618:	05db      	lsls	r3, r3, #23
 800161a:	2200      	movs	r2, #0
 800161c:	2120      	movs	r1, #32
 800161e:	0018      	movs	r0, r3
 8001620:	f000 fe86 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4821      	ldr	r0, [pc, #132]	; (80016b0 <MX_GPIO_Init+0x120>)
 800162a:	2200      	movs	r2, #0
 800162c:	0019      	movs	r1, r3
 800162e:	f000 fe7f 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001632:	193b      	adds	r3, r7, r4
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	0192      	lsls	r2, r2, #6
 8001638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800163a:	193b      	adds	r3, r7, r4
 800163c:	2284      	movs	r2, #132	; 0x84
 800163e:	0392      	lsls	r2, r2, #14
 8001640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	193b      	adds	r3, r7, r4
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001648:	193b      	adds	r3, r7, r4
 800164a:	4a1a      	ldr	r2, [pc, #104]	; (80016b4 <MX_GPIO_Init+0x124>)
 800164c:	0019      	movs	r1, r3
 800164e:	0010      	movs	r0, r2
 8001650:	f000 fcf6 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001654:	193b      	adds	r3, r7, r4
 8001656:	2220      	movs	r2, #32
 8001658:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	193b      	adds	r3, r7, r4
 800165c:	2201      	movs	r2, #1
 800165e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	193b      	adds	r3, r7, r4
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	193b      	adds	r3, r7, r4
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800166c:	193a      	adds	r2, r7, r4
 800166e:	2390      	movs	r3, #144	; 0x90
 8001670:	05db      	lsls	r3, r3, #23
 8001672:	0011      	movs	r1, r2
 8001674:	0018      	movs	r0, r3
 8001676:	f000 fce3 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800167a:	0021      	movs	r1, r4
 800167c:	187b      	adds	r3, r7, r1
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	0052      	lsls	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2201      	movs	r2, #1
 8001688:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	187b      	adds	r3, r7, r1
 8001698:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <MX_GPIO_Init+0x120>)
 800169a:	0019      	movs	r1, r3
 800169c:	0010      	movs	r0, r2
 800169e:	f000 fccf 	bl	8002040 <HAL_GPIO_Init>

}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b00b      	add	sp, #44	; 0x2c
 80016a8:	bd90      	pop	{r4, r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	40021000 	.word	0x40021000
 80016b0:	48000400 	.word	0x48000400
 80016b4:	48000800 	.word	0x48000800

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b5b0      	push	{r4, r5, r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f000 fb83 	bl	8001dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 f87d 	bl	80017c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f7ff ff63 	bl	8001590 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016ca:	f000 fad7 	bl	8001c7c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80016ce:	f000 f8cf 	bl	8001870 <MX_SPI1_Init>
  MX_TIM1_Init();
 80016d2:	f000 f9bd 	bl	8001a50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  const int MAX_ADC_VAL = 1024;
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	617b      	str	r3, [r7, #20]
  uint8_t dataIn[3] = {0};
 80016dc:	230c      	movs	r3, #12
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	4a30      	ldr	r2, [pc, #192]	; (80017a4 <main+0xec>)
 80016e2:	8812      	ldrh	r2, [r2, #0]
 80016e4:	801a      	strh	r2, [r3, #0]
 80016e6:	2202      	movs	r2, #2
 80016e8:	2100      	movs	r1, #0
 80016ea:	5499      	strb	r1, [r3, r2]
  const int DATA_OUT[3] = {0b00000001, 0b10000000, 0b00000000};
 80016ec:	003b      	movs	r3, r7
 80016ee:	4a2e      	ldr	r2, [pc, #184]	; (80017a8 <main+0xf0>)
 80016f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016f2:	c313      	stmia	r3!, {r0, r1, r4}
  uint16_t adcVal = 0;
 80016f4:	2312      	movs	r3, #18
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	2200      	movs	r2, #0
 80016fa:	801a      	strh	r2, [r3, #0]
  uint16_t counterVal = 0;
 80016fc:	2310      	movs	r3, #16
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	2200      	movs	r2, #0
 8001702:	801a      	strh	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001704:	4b29      	ldr	r3, [pc, #164]	; (80017ac <main+0xf4>)
 8001706:	2100      	movs	r1, #0
 8001708:	0018      	movs	r0, r3
 800170a:	f002 f8d5 	bl	80038b8 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //SPI setting pin low to start, then back to high after transmission is over
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4827      	ldr	r0, [pc, #156]	; (80017b0 <main+0xf8>)
 8001714:	2200      	movs	r2, #0
 8001716:	0019      	movs	r1, r3
 8001718:	f000 fe0a 	bl	8002330 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, DATA_OUT, dataIn, 3, 10);
 800171c:	240c      	movs	r4, #12
 800171e:	193a      	adds	r2, r7, r4
 8001720:	0039      	movs	r1, r7
 8001722:	4824      	ldr	r0, [pc, #144]	; (80017b4 <main+0xfc>)
 8001724:	230a      	movs	r3, #10
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2303      	movs	r3, #3
 800172a:	f001 fcd5 	bl	80030d8 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	481f      	ldr	r0, [pc, #124]	; (80017b0 <main+0xf8>)
 8001734:	2201      	movs	r2, #1
 8001736:	0019      	movs	r1, r3
 8001738:	f000 fdfa 	bl	8002330 <HAL_GPIO_WritePin>

	  adcVal = ((dataIn[1] & 0b11) << 8) + dataIn[2];
 800173c:	0020      	movs	r0, r4
 800173e:	183b      	adds	r3, r7, r0
 8001740:	785b      	ldrb	r3, [r3, #1]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b29a      	uxth	r2, r3
 8001746:	23c0      	movs	r3, #192	; 0xc0
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4013      	ands	r3, r2
 800174c:	b299      	uxth	r1, r3
 800174e:	183b      	adds	r3, r7, r0
 8001750:	789b      	ldrb	r3, [r3, #2]
 8001752:	b29a      	uxth	r2, r3
 8001754:	2012      	movs	r0, #18
 8001756:	183b      	adds	r3, r7, r0
 8001758:	188a      	adds	r2, r1, r2
 800175a:	801a      	strh	r2, [r3, #0]

	  counterVal = round((3000 * ( adcVal / MAX_ADC_VAL ))) + 3000; //will give value between 3000 and 6000
 800175c:	183b      	adds	r3, r7, r0
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	6979      	ldr	r1, [r7, #20]
 8001762:	0018      	movs	r0, r3
 8001764:	f7fe fd5a 	bl	800021c <__divsi3>
 8001768:	0003      	movs	r3, r0
 800176a:	001a      	movs	r2, r3
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <main+0x100>)
 800176e:	4353      	muls	r3, r2
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff fd75 	bl	8001260 <__aeabi_i2d>
 8001776:	2200      	movs	r2, #0
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <main+0x104>)
 800177a:	f7fe fe59 	bl	8000430 <__aeabi_dadd>
 800177e:	0002      	movs	r2, r0
 8001780:	000b      	movs	r3, r1
 8001782:	2510      	movs	r5, #16
 8001784:	197c      	adds	r4, r7, r5
 8001786:	0010      	movs	r0, r2
 8001788:	0019      	movs	r1, r3
 800178a:	f7fe fe33 	bl	80003f4 <__aeabi_d2uiz>
 800178e:	0003      	movs	r3, r0
 8001790:	8023      	strh	r3, [r4, #0]

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, counterVal);
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <main+0xf4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	197a      	adds	r2, r7, r5
 8001798:	8812      	ldrh	r2, [r2, #0]
 800179a:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_Delay(10);
 800179c:	200a      	movs	r0, #10
 800179e:	f000 fb77 	bl	8001e90 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80017a2:	e7b4      	b.n	800170e <main+0x56>
 80017a4:	08004cf0 	.word	0x08004cf0
 80017a8:	08004cf4 	.word	0x08004cf4
 80017ac:	2000008c 	.word	0x2000008c
 80017b0:	48000400 	.word	0x48000400
 80017b4:	20000028 	.word	0x20000028
 80017b8:	00000bb8 	.word	0x00000bb8
 80017bc:	40a77000 	.word	0x40a77000

080017c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b099      	sub	sp, #100	; 0x64
 80017c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c6:	242c      	movs	r4, #44	; 0x2c
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	0018      	movs	r0, r3
 80017cc:	2334      	movs	r3, #52	; 0x34
 80017ce:	001a      	movs	r2, r3
 80017d0:	2100      	movs	r1, #0
 80017d2:	f003 fa55 	bl	8004c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d6:	231c      	movs	r3, #28
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	0018      	movs	r0, r3
 80017dc:	2310      	movs	r3, #16
 80017de:	001a      	movs	r2, r3
 80017e0:	2100      	movs	r1, #0
 80017e2:	f003 fa4d 	bl	8004c80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e6:	003b      	movs	r3, r7
 80017e8:	0018      	movs	r0, r3
 80017ea:	231c      	movs	r3, #28
 80017ec:	001a      	movs	r2, r3
 80017ee:	2100      	movs	r1, #0
 80017f0:	f003 fa46 	bl	8004c80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	2220      	movs	r2, #32
 80017f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80017fa:	193b      	adds	r3, r7, r4
 80017fc:	2201      	movs	r2, #1
 80017fe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001800:	193b      	adds	r3, r7, r4
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	193b      	adds	r3, r7, r4
 8001808:	0018      	movs	r0, r3
 800180a:	f000 fdaf 	bl	800236c <HAL_RCC_OscConfig>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001812:	f000 f828 	bl	8001866 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001816:	211c      	movs	r1, #28
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2207      	movs	r2, #7
 800181c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2203      	movs	r2, #3
 8001822:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800182a:	187b      	adds	r3, r7, r1
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001830:	187b      	adds	r3, r7, r1
 8001832:	2101      	movs	r1, #1
 8001834:	0018      	movs	r0, r3
 8001836:	f001 f91f 	bl	8002a78 <HAL_RCC_ClockConfig>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800183e:	f000 f812 	bl	8001866 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001842:	003b      	movs	r3, r7
 8001844:	2202      	movs	r2, #2
 8001846:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001848:	003b      	movs	r3, r7
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184e:	003b      	movs	r3, r7
 8001850:	0018      	movs	r0, r3
 8001852:	f001 fa8b 	bl	8002d6c <HAL_RCCEx_PeriphCLKConfig>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d001      	beq.n	800185e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800185a:	f000 f804 	bl	8001866 <Error_Handler>
  }
}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b019      	add	sp, #100	; 0x64
 8001864:	bd90      	pop	{r4, r7, pc}

08001866 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186a:	b672      	cpsid	i
}
 800186c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186e:	e7fe      	b.n	800186e <Error_Handler+0x8>

08001870 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <MX_SPI1_Init+0x78>)
 8001878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_SPI1_Init+0x74>)
 800187c:	2282      	movs	r2, #130	; 0x82
 800187e:	0052      	lsls	r2, r2, #1
 8001880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_SPI1_Init+0x74>)
 800188a:	22e0      	movs	r2, #224	; 0xe0
 800188c:	00d2      	lsls	r2, r2, #3
 800188e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_SPI1_Init+0x74>)
 800189e:	2280      	movs	r2, #128	; 0x80
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018a6:	2218      	movs	r2, #24
 80018a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018be:	2207      	movs	r2, #7
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018ca:	2208      	movs	r2, #8
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018d0:	0018      	movs	r0, r3
 80018d2:	f001 fb49 	bl	8002f68 <HAL_SPI_Init>
 80018d6:	1e03      	subs	r3, r0, #0
 80018d8:	d001      	beq.n	80018de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018da:	f7ff ffc4 	bl	8001866 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000028 	.word	0x20000028
 80018e8:	40013000 	.word	0x40013000

080018ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b08b      	sub	sp, #44	; 0x2c
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	2414      	movs	r4, #20
 80018f6:	193b      	adds	r3, r7, r4
 80018f8:	0018      	movs	r0, r3
 80018fa:	2314      	movs	r3, #20
 80018fc:	001a      	movs	r2, r3
 80018fe:	2100      	movs	r1, #0
 8001900:	f003 f9be 	bl	8004c80 <memset>
  if(spiHandle->Instance==SPI1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <HAL_SPI_MspInit+0xd8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d155      	bne.n	80019ba <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_SPI_MspInit+0xdc>)
 8001910:	699a      	ldr	r2, [r3, #24]
 8001912:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_SPI_MspInit+0xdc>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0149      	lsls	r1, r1, #5
 8001918:	430a      	orrs	r2, r1
 800191a:	619a      	str	r2, [r3, #24]
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_SPI_MspInit+0xdc>)
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	015b      	lsls	r3, r3, #5
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_SPI_MspInit+0xdc>)
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_SPI_MspInit+0xdc>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0289      	lsls	r1, r1, #10
 8001934:	430a      	orrs	r2, r1
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_SPI_MspInit+0xdc>)
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	029b      	lsls	r3, r3, #10
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_SPI_MspInit+0xdc>)
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_SPI_MspInit+0xdc>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	02c9      	lsls	r1, r1, #11
 8001950:	430a      	orrs	r2, r1
 8001952:	615a      	str	r2, [r3, #20]
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_SPI_MspInit+0xdc>)
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	02db      	lsls	r3, r3, #11
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001962:	193b      	adds	r3, r7, r4
 8001964:	22c0      	movs	r2, #192	; 0xc0
 8001966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	193b      	adds	r3, r7, r4
 800196a:	2202      	movs	r2, #2
 800196c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	193b      	adds	r3, r7, r4
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001974:	193b      	adds	r3, r7, r4
 8001976:	2203      	movs	r2, #3
 8001978:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800197a:	193b      	adds	r3, r7, r4
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	193a      	adds	r2, r7, r4
 8001982:	2390      	movs	r3, #144	; 0x90
 8001984:	05db      	lsls	r3, r3, #23
 8001986:	0011      	movs	r1, r2
 8001988:	0018      	movs	r0, r3
 800198a:	f000 fb59 	bl	8002040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800198e:	0021      	movs	r1, r4
 8001990:	187b      	adds	r3, r7, r1
 8001992:	2208      	movs	r2, #8
 8001994:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	187b      	adds	r3, r7, r1
 8001998:	2202      	movs	r2, #2
 800199a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	187b      	adds	r3, r7, r1
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	2203      	movs	r2, #3
 80019a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_SPI_MspInit+0xe0>)
 80019b2:	0019      	movs	r1, r3
 80019b4:	0010      	movs	r0, r2
 80019b6:	f000 fb43 	bl	8002040 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	b00b      	add	sp, #44	; 0x2c
 80019c0:	bd90      	pop	{r4, r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	40013000 	.word	0x40013000
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000400 	.word	0x48000400

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_MspInit+0x44>)
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_MspInit+0x44>)
 80019dc:	2101      	movs	r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	619a      	str	r2, [r3, #24]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_MspInit+0x44>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2201      	movs	r2, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_MspInit+0x44>)
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_MspInit+0x44>)
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	0549      	lsls	r1, r1, #21
 80019f8:	430a      	orrs	r2, r1
 80019fa:	61da      	str	r2, [r3, #28]
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_MspInit+0x44>)
 80019fe:	69da      	ldr	r2, [r3, #28]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	055b      	lsls	r3, r3, #21
 8001a04:	4013      	ands	r3, r2
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	40021000 	.word	0x40021000

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <NMI_Handler+0x4>

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler+0x4>

08001a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3c:	f000 fa0c 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b096      	sub	sp, #88	; 0x58
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a56:	2348      	movs	r3, #72	; 0x48
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	001a      	movs	r2, r3
 8001a60:	2100      	movs	r1, #0
 8001a62:	f003 f90d 	bl	8004c80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a66:	2340      	movs	r3, #64	; 0x40
 8001a68:	18fb      	adds	r3, r7, r3
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	001a      	movs	r2, r3
 8001a70:	2100      	movs	r1, #0
 8001a72:	f003 f905 	bl	8004c80 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a76:	2324      	movs	r3, #36	; 0x24
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	231c      	movs	r3, #28
 8001a7e:	001a      	movs	r2, r3
 8001a80:	2100      	movs	r1, #0
 8001a82:	f003 f8fd 	bl	8004c80 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	0018      	movs	r0, r3
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	001a      	movs	r2, r3
 8001a8e:	2100      	movs	r1, #0
 8001a90:	f003 f8f6 	bl	8004c80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a94:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001a96:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <MX_TIM1_Init+0x164>)
 8001a98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001a9a:	4b45      	ldr	r3, [pc, #276]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa0:	4b43      	ldr	r3, [pc, #268]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001aa6:	4b42      	ldr	r3, [pc, #264]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001aa8:	4a43      	ldr	r2, [pc, #268]	; (8001bb8 <MX_TIM1_Init+0x168>)
 8001aaa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aac:	4b40      	ldr	r3, [pc, #256]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f001 fe51 	bl	8003768 <HAL_TIM_Base_Init>
 8001ac6:	1e03      	subs	r3, r0, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001aca:	f7ff fecc 	bl	8001866 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ace:	2148      	movs	r1, #72	; 0x48
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	0152      	lsls	r2, r2, #5
 8001ad6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ad8:	187a      	adds	r2, r7, r1
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001adc:	0011      	movs	r1, r2
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f002 f868 	bl	8003bb4 <HAL_TIM_ConfigClockSource>
 8001ae4:	1e03      	subs	r3, r0, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001ae8:	f7ff febd 	bl	8001866 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001aee:	0018      	movs	r0, r3
 8001af0:	f001 fe8a 	bl	8003808 <HAL_TIM_PWM_Init>
 8001af4:	1e03      	subs	r3, r0, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001af8:	f7ff feb5 	bl	8001866 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afc:	2140      	movs	r1, #64	; 0x40
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	2200      	movs	r2, #0
 8001b08:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b0a:	187a      	adds	r2, r7, r1
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001b0e:	0011      	movs	r1, r2
 8001b10:	0018      	movs	r0, r3
 8001b12:	f002 fc5d 	bl	80043d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001b1a:	f7ff fea4 	bl	8001866 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1e:	2124      	movs	r1, #36	; 0x24
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	2260      	movs	r2, #96	; 0x60
 8001b24:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4a:	1879      	adds	r1, r7, r1
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	0018      	movs	r0, r3
 8001b52:	f001 ff69 	bl	8003a28 <HAL_TIM_PWM_ConfigChannel>
 8001b56:	1e03      	subs	r3, r0, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001b5a:	f7ff fe84 	bl	8001866 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2200      	movs	r2, #0
 8001b68:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	0192      	lsls	r2, r2, #6
 8001b82:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b8a:	1d3a      	adds	r2, r7, #4
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001b8e:	0011      	movs	r1, r2
 8001b90:	0018      	movs	r0, r3
 8001b92:	f002 fc7b 	bl	800448c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8001b9a:	f7ff fe64 	bl	8001866 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <MX_TIM1_Init+0x160>)
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f000 f82b 	bl	8001bfc <HAL_TIM_MspPostInit>

}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b016      	add	sp, #88	; 0x58
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	2000008c 	.word	0x2000008c
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	0000ea60 	.word	0x0000ea60

08001bbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_TIM_Base_MspInit+0x38>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10d      	bne.n	8001bea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	0109      	lsls	r1, r1, #4
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b004      	add	sp, #16
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	40012c00 	.word	0x40012c00
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	240c      	movs	r4, #12
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	0018      	movs	r0, r3
 8001c0a:	2314      	movs	r3, #20
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	2100      	movs	r1, #0
 8001c10:	f003 f836 	bl	8004c80 <memset>
  if(timHandle->Instance==TIM1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a16      	ldr	r2, [pc, #88]	; (8001c74 <HAL_TIM_MspPostInit+0x78>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d125      	bne.n	8001c6a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_TIM_MspPostInit+0x7c>)
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_TIM_MspPostInit+0x7c>)
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	0289      	lsls	r1, r1, #10
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	615a      	str	r2, [r3, #20]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_TIM_MspPostInit+0x7c>)
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	029b      	lsls	r3, r3, #10
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	2280      	movs	r2, #128	; 0x80
 8001c3e:	0052      	lsls	r2, r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	0021      	movs	r1, r4
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	2202      	movs	r2, #2
 8001c48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	2202      	movs	r2, #2
 8001c5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	187a      	adds	r2, r7, r1
 8001c5e:	2390      	movs	r3, #144	; 0x90
 8001c60:	05db      	lsls	r3, r3, #23
 8001c62:	0011      	movs	r1, r2
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 f9eb 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b009      	add	sp, #36	; 0x24
 8001c70:	bd90      	pop	{r4, r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	40012c00 	.word	0x40012c00
 8001c78:	40021000 	.word	0x40021000

08001c7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <MX_USART2_UART_Init+0x5c>)
 8001c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001c88:	2296      	movs	r2, #150	; 0x96
 8001c8a:	0212      	lsls	r2, r2, #8
 8001c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <MX_USART2_UART_Init+0x58>)
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f002 fc41 	bl	8004548 <HAL_UART_Init>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cca:	f7ff fdcc 	bl	8001866 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200000d4 	.word	0x200000d4
 8001cd8:	40004400 	.word	0x40004400

08001cdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b08b      	sub	sp, #44	; 0x2c
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	2414      	movs	r4, #20
 8001ce6:	193b      	adds	r3, r7, r4
 8001ce8:	0018      	movs	r0, r3
 8001cea:	2314      	movs	r3, #20
 8001cec:	001a      	movs	r2, r3
 8001cee:	2100      	movs	r1, #0
 8001cf0:	f002 ffc6 	bl	8004c80 <memset>
  if(uartHandle->Instance==USART2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <HAL_UART_MspInit+0x90>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d132      	bne.n	8001d64 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_UART_MspInit+0x94>)
 8001d00:	69da      	ldr	r2, [r3, #28]
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_UART_MspInit+0x94>)
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	0289      	lsls	r1, r1, #10
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	61da      	str	r2, [r3, #28]
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_UART_MspInit+0x94>)
 8001d0e:	69da      	ldr	r2, [r3, #28]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	029b      	lsls	r3, r3, #10
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_UART_MspInit+0x94>)
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_UART_MspInit+0x94>)
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	0289      	lsls	r1, r1, #10
 8001d24:	430a      	orrs	r2, r1
 8001d26:	615a      	str	r2, [r3, #20]
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_UART_MspInit+0x94>)
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	029b      	lsls	r3, r3, #10
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d36:	0021      	movs	r1, r4
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	2202      	movs	r2, #2
 8001d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2201      	movs	r2, #1
 8001d54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	187a      	adds	r2, r7, r1
 8001d58:	2390      	movs	r3, #144	; 0x90
 8001d5a:	05db      	lsls	r3, r3, #23
 8001d5c:	0011      	movs	r1, r2
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 f96e 	bl	8002040 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b00b      	add	sp, #44	; 0x2c
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	40004400 	.word	0x40004400
 8001d70:	40021000 	.word	0x40021000

08001d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d78:	480d      	ldr	r0, [pc, #52]	; (8001db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d7a:	490e      	ldr	r1, [pc, #56]	; (8001db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <LoopForever+0xe>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d90:	4c0b      	ldr	r4, [pc, #44]	; (8001dc0 <LoopForever+0x16>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d9e:	f7ff fe52 	bl	8001a46 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001da2:	f002 ff75 	bl	8004c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001da6:	f7ff fc87 	bl	80016b8 <main>

08001daa <LoopForever>:

LoopForever:
    b LoopForever
 8001daa:	e7fe      	b.n	8001daa <LoopForever>
  ldr   r0, =_estack
 8001dac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001db8:	08004d40 	.word	0x08004d40
  ldr r2, =_sbss
 8001dbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dc0:	2000015c 	.word	0x2000015c

08001dc4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC1_COMP_IRQHandler>
	...

08001dc8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_Init+0x24>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_Init+0x24>)
 8001dd2:	2110      	movs	r1, #16
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f000 f809 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dde:	f7ff fdf7 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_InitTick+0x5c>)
 8001dfa:	681c      	ldr	r4, [r3, #0]
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_InitTick+0x60>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	0019      	movs	r1, r3
 8001e02:	23fa      	movs	r3, #250	; 0xfa
 8001e04:	0098      	lsls	r0, r3, #2
 8001e06:	f7fe f97f 	bl	8000108 <__udivsi3>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	0020      	movs	r0, r4
 8001e10:	f7fe f97a 	bl	8000108 <__udivsi3>
 8001e14:	0003      	movs	r3, r0
 8001e16:	0018      	movs	r0, r3
 8001e18:	f000 f905 	bl	8002026 <HAL_SYSTICK_Config>
 8001e1c:	1e03      	subs	r3, r0, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e00f      	b.n	8001e44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d80b      	bhi.n	8001e42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	425b      	negs	r3, r3
 8001e30:	2200      	movs	r2, #0
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 f8e2 	bl	8001ffc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_InitTick+0x64>)
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b003      	add	sp, #12
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000008 	.word	0x20000008
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_IncTick+0x1c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	001a      	movs	r2, r3
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_IncTick+0x20>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	18d2      	adds	r2, r2, r3
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_IncTick+0x20>)
 8001e6a:	601a      	str	r2, [r3, #0]
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000158 	.word	0x20000158

08001e7c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <HAL_GetTick+0x10>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	20000158 	.word	0x20000158

08001e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	d005      	beq.n	8001eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_Delay+0x44>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	001a      	movs	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	189b      	adds	r3, r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	f7ff ffe0 	bl	8001e7c <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d8f7      	bhi.n	8001eb8 <HAL_Delay+0x28>
  {
  }
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b004      	add	sp, #16
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	20000008 	.word	0x20000008

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	0002      	movs	r2, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	1dfb      	adds	r3, r7, #7
 8001ee4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	1dfb      	adds	r3, r7, #7
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b7f      	cmp	r3, #127	; 0x7f
 8001eec:	d828      	bhi.n	8001f40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eee:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <__NVIC_SetPriority+0xd4>)
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b25b      	sxtb	r3, r3
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	33c0      	adds	r3, #192	; 0xc0
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	589b      	ldr	r3, [r3, r2]
 8001efe:	1dfa      	adds	r2, r7, #7
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	0011      	movs	r1, r2
 8001f04:	2203      	movs	r2, #3
 8001f06:	400a      	ands	r2, r1
 8001f08:	00d2      	lsls	r2, r2, #3
 8001f0a:	21ff      	movs	r1, #255	; 0xff
 8001f0c:	4091      	lsls	r1, r2
 8001f0e:	000a      	movs	r2, r1
 8001f10:	43d2      	mvns	r2, r2
 8001f12:	401a      	ands	r2, r3
 8001f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	22ff      	movs	r2, #255	; 0xff
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	0018      	movs	r0, r3
 8001f24:	2303      	movs	r3, #3
 8001f26:	4003      	ands	r3, r0
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f2c:	481f      	ldr	r0, [pc, #124]	; (8001fac <__NVIC_SetPriority+0xd4>)
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	430a      	orrs	r2, r1
 8001f38:	33c0      	adds	r3, #192	; 0xc0
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f3e:	e031      	b.n	8001fa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <__NVIC_SetPriority+0xd8>)
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	0019      	movs	r1, r3
 8001f48:	230f      	movs	r3, #15
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	3b08      	subs	r3, #8
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3306      	adds	r3, #6
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	3304      	adds	r3, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	1dfa      	adds	r2, r7, #7
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	0011      	movs	r1, r2
 8001f60:	2203      	movs	r2, #3
 8001f62:	400a      	ands	r2, r1
 8001f64:	00d2      	lsls	r2, r2, #3
 8001f66:	21ff      	movs	r1, #255	; 0xff
 8001f68:	4091      	lsls	r1, r2
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	43d2      	mvns	r2, r2
 8001f6e:	401a      	ands	r2, r3
 8001f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	019b      	lsls	r3, r3, #6
 8001f76:	22ff      	movs	r2, #255	; 0xff
 8001f78:	401a      	ands	r2, r3
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	2303      	movs	r3, #3
 8001f82:	4003      	ands	r3, r0
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f88:	4809      	ldr	r0, [pc, #36]	; (8001fb0 <__NVIC_SetPriority+0xd8>)
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	001c      	movs	r4, r3
 8001f90:	230f      	movs	r3, #15
 8001f92:	4023      	ands	r3, r4
 8001f94:	3b08      	subs	r3, #8
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	3306      	adds	r3, #6
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	18c3      	adds	r3, r0, r3
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b003      	add	sp, #12
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1e5a      	subs	r2, r3, #1
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	045b      	lsls	r3, r3, #17
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d301      	bcc.n	8001fcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e010      	b.n	8001fee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <SysTick_Config+0x44>)
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	3a01      	subs	r2, #1
 8001fd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	2103      	movs	r1, #3
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7ff ff7c 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SysTick_Config+0x44>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <SysTick_Config+0x44>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b002      	add	sp, #8
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	210f      	movs	r1, #15
 8002008:	187b      	adds	r3, r7, r1
 800200a:	1c02      	adds	r2, r0, #0
 800200c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	187b      	adds	r3, r7, r1
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b25b      	sxtb	r3, r3
 8002016:	0011      	movs	r1, r2
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	b004      	add	sp, #16
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff ffbf 	bl	8001fb4 <SysTick_Config>
 8002036:	0003      	movs	r3, r0
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204e:	e155      	b.n	80022fc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4091      	lsls	r1, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d100      	bne.n	8002068 <HAL_GPIO_Init+0x28>
 8002066:	e146      	b.n	80022f6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	4013      	ands	r3, r2
 8002070:	2b01      	cmp	r3, #1
 8002072:	d005      	beq.n	8002080 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2203      	movs	r2, #3
 800207a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800207c:	2b02      	cmp	r3, #2
 800207e:	d130      	bne.n	80020e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	409a      	lsls	r2, r3
 800208e:	0013      	movs	r3, r2
 8002090:	43da      	mvns	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	409a      	lsls	r2, r3
 80020a2:	0013      	movs	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b6:	2201      	movs	r2, #1
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	43da      	mvns	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	2201      	movs	r2, #1
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
 80020d4:	0013      	movs	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2203      	movs	r2, #3
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d017      	beq.n	800211e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	409a      	lsls	r2, r3
 80020fc:	0013      	movs	r3, r2
 80020fe:	43da      	mvns	r2, r3
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	409a      	lsls	r2, r3
 8002110:	0013      	movs	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2203      	movs	r2, #3
 8002124:	4013      	ands	r3, r2
 8002126:	2b02      	cmp	r3, #2
 8002128:	d123      	bne.n	8002172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	08da      	lsrs	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3208      	adds	r2, #8
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	58d3      	ldr	r3, [r2, r3]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2207      	movs	r2, #7
 800213c:	4013      	ands	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	409a      	lsls	r2, r3
 8002144:	0013      	movs	r3, r2
 8002146:	43da      	mvns	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2107      	movs	r1, #7
 8002156:	400b      	ands	r3, r1
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	409a      	lsls	r2, r3
 800215c:	0013      	movs	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	6939      	ldr	r1, [r7, #16]
 8002170:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	409a      	lsls	r2, r3
 8002180:	0013      	movs	r3, r2
 8002182:	43da      	mvns	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2203      	movs	r2, #3
 8002190:	401a      	ands	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	23c0      	movs	r3, #192	; 0xc0
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	4013      	ands	r3, r2
 80021b0:	d100      	bne.n	80021b4 <HAL_GPIO_Init+0x174>
 80021b2:	e0a0      	b.n	80022f6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b4:	4b57      	ldr	r3, [pc, #348]	; (8002314 <HAL_GPIO_Init+0x2d4>)
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	4b56      	ldr	r3, [pc, #344]	; (8002314 <HAL_GPIO_Init+0x2d4>)
 80021ba:	2101      	movs	r1, #1
 80021bc:	430a      	orrs	r2, r1
 80021be:	619a      	str	r2, [r3, #24]
 80021c0:	4b54      	ldr	r3, [pc, #336]	; (8002314 <HAL_GPIO_Init+0x2d4>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021cc:	4a52      	ldr	r2, [pc, #328]	; (8002318 <HAL_GPIO_Init+0x2d8>)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	589b      	ldr	r3, [r3, r2]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2203      	movs	r2, #3
 80021de:	4013      	ands	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	220f      	movs	r2, #15
 80021e4:	409a      	lsls	r2, r3
 80021e6:	0013      	movs	r3, r2
 80021e8:	43da      	mvns	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	2390      	movs	r3, #144	; 0x90
 80021f4:	05db      	lsls	r3, r3, #23
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d019      	beq.n	800222e <HAL_GPIO_Init+0x1ee>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a47      	ldr	r2, [pc, #284]	; (800231c <HAL_GPIO_Init+0x2dc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0x1ea>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a46      	ldr	r2, [pc, #280]	; (8002320 <HAL_GPIO_Init+0x2e0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00d      	beq.n	8002226 <HAL_GPIO_Init+0x1e6>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a45      	ldr	r2, [pc, #276]	; (8002324 <HAL_GPIO_Init+0x2e4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d007      	beq.n	8002222 <HAL_GPIO_Init+0x1e2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a44      	ldr	r2, [pc, #272]	; (8002328 <HAL_GPIO_Init+0x2e8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d101      	bne.n	800221e <HAL_GPIO_Init+0x1de>
 800221a:	2304      	movs	r3, #4
 800221c:	e008      	b.n	8002230 <HAL_GPIO_Init+0x1f0>
 800221e:	2305      	movs	r3, #5
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x1f0>
 8002222:	2303      	movs	r3, #3
 8002224:	e004      	b.n	8002230 <HAL_GPIO_Init+0x1f0>
 8002226:	2302      	movs	r3, #2
 8002228:	e002      	b.n	8002230 <HAL_GPIO_Init+0x1f0>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_GPIO_Init+0x1f0>
 800222e:	2300      	movs	r3, #0
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	2103      	movs	r1, #3
 8002234:	400a      	ands	r2, r1
 8002236:	0092      	lsls	r2, r2, #2
 8002238:	4093      	lsls	r3, r2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002240:	4935      	ldr	r1, [pc, #212]	; (8002318 <HAL_GPIO_Init+0x2d8>)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800224e:	4b37      	ldr	r3, [pc, #220]	; (800232c <HAL_GPIO_Init+0x2ec>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43da      	mvns	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	025b      	lsls	r3, r3, #9
 8002266:	4013      	ands	r3, r2
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002272:	4b2e      	ldr	r3, [pc, #184]	; (800232c <HAL_GPIO_Init+0x2ec>)
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002278:	4b2c      	ldr	r3, [pc, #176]	; (800232c <HAL_GPIO_Init+0x2ec>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43da      	mvns	r2, r3
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	4013      	ands	r3, r2
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_GPIO_Init+0x2ec>)
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_GPIO_Init+0x2ec>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43da      	mvns	r2, r3
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	035b      	lsls	r3, r3, #13
 80022ba:	4013      	ands	r3, r2
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_GPIO_Init+0x2ec>)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80022cc:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_GPIO_Init+0x2ec>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	039b      	lsls	r3, r3, #14
 80022e4:	4013      	ands	r3, r2
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_GPIO_Init+0x2ec>)
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	40da      	lsrs	r2, r3
 8002304:	1e13      	subs	r3, r2, #0
 8002306:	d000      	beq.n	800230a <HAL_GPIO_Init+0x2ca>
 8002308:	e6a2      	b.n	8002050 <HAL_GPIO_Init+0x10>
  } 
}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b006      	add	sp, #24
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	40010000 	.word	0x40010000
 800231c:	48000400 	.word	0x48000400
 8002320:	48000800 	.word	0x48000800
 8002324:	48000c00 	.word	0x48000c00
 8002328:	48001000 	.word	0x48001000
 800232c:	40010400 	.word	0x40010400

08002330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	0008      	movs	r0, r1
 800233a:	0011      	movs	r1, r2
 800233c:	1cbb      	adds	r3, r7, #2
 800233e:	1c02      	adds	r2, r0, #0
 8002340:	801a      	strh	r2, [r3, #0]
 8002342:	1c7b      	adds	r3, r7, #1
 8002344:	1c0a      	adds	r2, r1, #0
 8002346:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002348:	1c7b      	adds	r3, r7, #1
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002350:	1cbb      	adds	r3, r7, #2
 8002352:	881a      	ldrh	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002358:	e003      	b.n	8002362 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800235a:	1cbb      	adds	r3, r7, #2
 800235c:	881a      	ldrh	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	46bd      	mov	sp, r7
 8002366:	b002      	add	sp, #8
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	f000 fb76 	bl	8002a6c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	4013      	ands	r3, r2
 8002388:	d100      	bne.n	800238c <HAL_RCC_OscConfig+0x20>
 800238a:	e08e      	b.n	80024aa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800238c:	4bc5      	ldr	r3, [pc, #788]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	220c      	movs	r2, #12
 8002392:	4013      	ands	r3, r2
 8002394:	2b04      	cmp	r3, #4
 8002396:	d00e      	beq.n	80023b6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002398:	4bc2      	ldr	r3, [pc, #776]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	220c      	movs	r2, #12
 800239e:	4013      	ands	r3, r2
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d117      	bne.n	80023d4 <HAL_RCC_OscConfig+0x68>
 80023a4:	4bbf      	ldr	r3, [pc, #764]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	23c0      	movs	r3, #192	; 0xc0
 80023aa:	025b      	lsls	r3, r3, #9
 80023ac:	401a      	ands	r2, r3
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	025b      	lsls	r3, r3, #9
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d10e      	bne.n	80023d4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b6:	4bbb      	ldr	r3, [pc, #748]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	4013      	ands	r3, r2
 80023c0:	d100      	bne.n	80023c4 <HAL_RCC_OscConfig+0x58>
 80023c2:	e071      	b.n	80024a8 <HAL_RCC_OscConfig+0x13c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d000      	beq.n	80023ce <HAL_RCC_OscConfig+0x62>
 80023cc:	e06c      	b.n	80024a8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f000 fb4c 	bl	8002a6c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d107      	bne.n	80023ec <HAL_RCC_OscConfig+0x80>
 80023dc:	4bb1      	ldr	r3, [pc, #708]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4bb0      	ldr	r3, [pc, #704]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	0249      	lsls	r1, r1, #9
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e02f      	b.n	800244c <HAL_RCC_OscConfig+0xe0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_OscConfig+0xa2>
 80023f4:	4bab      	ldr	r3, [pc, #684]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4baa      	ldr	r3, [pc, #680]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80023fa:	49ab      	ldr	r1, [pc, #684]	; (80026a8 <HAL_RCC_OscConfig+0x33c>)
 80023fc:	400a      	ands	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	4ba8      	ldr	r3, [pc, #672]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4ba7      	ldr	r3, [pc, #668]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002406:	49a9      	ldr	r1, [pc, #676]	; (80026ac <HAL_RCC_OscConfig+0x340>)
 8002408:	400a      	ands	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e01e      	b.n	800244c <HAL_RCC_OscConfig+0xe0>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b05      	cmp	r3, #5
 8002414:	d10e      	bne.n	8002434 <HAL_RCC_OscConfig+0xc8>
 8002416:	4ba3      	ldr	r3, [pc, #652]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4ba2      	ldr	r3, [pc, #648]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800241c:	2180      	movs	r1, #128	; 0x80
 800241e:	02c9      	lsls	r1, r1, #11
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	4b9f      	ldr	r3, [pc, #636]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b9e      	ldr	r3, [pc, #632]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800242a:	2180      	movs	r1, #128	; 0x80
 800242c:	0249      	lsls	r1, r1, #9
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0xe0>
 8002434:	4b9b      	ldr	r3, [pc, #620]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b9a      	ldr	r3, [pc, #616]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800243a:	499b      	ldr	r1, [pc, #620]	; (80026a8 <HAL_RCC_OscConfig+0x33c>)
 800243c:	400a      	ands	r2, r1
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	4b98      	ldr	r3, [pc, #608]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b97      	ldr	r3, [pc, #604]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002446:	4999      	ldr	r1, [pc, #612]	; (80026ac <HAL_RCC_OscConfig+0x340>)
 8002448:	400a      	ands	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d014      	beq.n	800247e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fd12 	bl	8001e7c <HAL_GetTick>
 8002458:	0003      	movs	r3, r0
 800245a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245e:	f7ff fd0d 	bl	8001e7c <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	; 0x64
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e2fd      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002470:	4b8c      	ldr	r3, [pc, #560]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	029b      	lsls	r3, r3, #10
 8002478:	4013      	ands	r3, r2
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0xf2>
 800247c:	e015      	b.n	80024aa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7ff fcfd 	bl	8001e7c <HAL_GetTick>
 8002482:	0003      	movs	r3, r0
 8002484:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff fcf8 	bl	8001e7c <HAL_GetTick>
 800248c:	0002      	movs	r2, r0
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e2e8      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	4b82      	ldr	r3, [pc, #520]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	029b      	lsls	r3, r3, #10
 80024a2:	4013      	ands	r3, r2
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x11c>
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2202      	movs	r2, #2
 80024b0:	4013      	ands	r3, r2
 80024b2:	d100      	bne.n	80024b6 <HAL_RCC_OscConfig+0x14a>
 80024b4:	e06c      	b.n	8002590 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024b6:	4b7b      	ldr	r3, [pc, #492]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	220c      	movs	r2, #12
 80024bc:	4013      	ands	r3, r2
 80024be:	d00e      	beq.n	80024de <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024c0:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	220c      	movs	r2, #12
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d11f      	bne.n	800250c <HAL_RCC_OscConfig+0x1a0>
 80024cc:	4b75      	ldr	r3, [pc, #468]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	23c0      	movs	r3, #192	; 0xc0
 80024d2:	025b      	lsls	r3, r3, #9
 80024d4:	401a      	ands	r2, r3
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	429a      	cmp	r2, r3
 80024dc:	d116      	bne.n	800250c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	4b71      	ldr	r3, [pc, #452]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2202      	movs	r2, #2
 80024e4:	4013      	ands	r3, r2
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_OscConfig+0x188>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e2bb      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b6b      	ldr	r3, [pc, #428]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	22f8      	movs	r2, #248	; 0xf8
 80024fa:	4393      	bics	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00da      	lsls	r2, r3, #3
 8002504:	4b67      	ldr	r3, [pc, #412]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	e041      	b.n	8002590 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d024      	beq.n	800255e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002514:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b62      	ldr	r3, [pc, #392]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800251a:	2101      	movs	r1, #1
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff fcac 	bl	8001e7c <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252a:	f7ff fca7 	bl	8001e7c <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e297      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2202      	movs	r2, #2
 8002542:	4013      	ands	r3, r2
 8002544:	d0f1      	beq.n	800252a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	22f8      	movs	r2, #248	; 0xf8
 800254c:	4393      	bics	r3, r2
 800254e:	0019      	movs	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	00da      	lsls	r2, r3, #3
 8002556:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e018      	b.n	8002590 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255e:	4b51      	ldr	r3, [pc, #324]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002564:	2101      	movs	r1, #1
 8002566:	438a      	bics	r2, r1
 8002568:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7ff fc87 	bl	8001e7c <HAL_GetTick>
 800256e:	0003      	movs	r3, r0
 8002570:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002574:	f7ff fc82 	bl	8001e7c <HAL_GetTick>
 8002578:	0002      	movs	r2, r0
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e272      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2202      	movs	r2, #2
 800258c:	4013      	ands	r3, r2
 800258e:	d1f1      	bne.n	8002574 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2208      	movs	r2, #8
 8002596:	4013      	ands	r3, r2
 8002598:	d036      	beq.n	8002608 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d019      	beq.n	80025d6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a2:	4b40      	ldr	r3, [pc, #256]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80025a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025a6:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	430a      	orrs	r2, r1
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ae:	f7ff fc65 	bl	8001e7c <HAL_GetTick>
 80025b2:	0003      	movs	r3, r0
 80025b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b8:	f7ff fc60 	bl	8001e7c <HAL_GetTick>
 80025bc:	0002      	movs	r2, r0
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e250      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ca:	4b36      	ldr	r3, [pc, #216]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	2202      	movs	r2, #2
 80025d0:	4013      	ands	r3, r2
 80025d2:	d0f1      	beq.n	80025b8 <HAL_RCC_OscConfig+0x24c>
 80025d4:	e018      	b.n	8002608 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d6:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80025d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 80025dc:	2101      	movs	r1, #1
 80025de:	438a      	bics	r2, r1
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7ff fc4b 	bl	8001e7c <HAL_GetTick>
 80025e6:	0003      	movs	r3, r0
 80025e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ec:	f7ff fc46 	bl	8001e7c <HAL_GetTick>
 80025f0:	0002      	movs	r2, r0
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e236      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fe:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	2202      	movs	r2, #2
 8002604:	4013      	ands	r3, r2
 8002606:	d1f1      	bne.n	80025ec <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2204      	movs	r2, #4
 800260e:	4013      	ands	r3, r2
 8002610:	d100      	bne.n	8002614 <HAL_RCC_OscConfig+0x2a8>
 8002612:	e0b5      	b.n	8002780 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002614:	201f      	movs	r0, #31
 8002616:	183b      	adds	r3, r7, r0
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	055b      	lsls	r3, r3, #21
 8002624:	4013      	ands	r3, r2
 8002626:	d110      	bne.n	800264a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	0549      	lsls	r1, r1, #21
 8002632:	430a      	orrs	r2, r1
 8002634:	61da      	str	r2, [r3, #28]
 8002636:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	055b      	lsls	r3, r3, #21
 800263e:	4013      	ands	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002644:	183b      	adds	r3, r7, r0
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_RCC_OscConfig+0x344>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4013      	ands	r3, r2
 8002654:	d11a      	bne.n	800268c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_RCC_OscConfig+0x344>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <HAL_RCC_OscConfig+0x344>)
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	0049      	lsls	r1, r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002664:	f7ff fc0a 	bl	8001e7c <HAL_GetTick>
 8002668:	0003      	movs	r3, r0
 800266a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266e:	f7ff fc05 	bl	8001e7c <HAL_GetTick>
 8002672:	0002      	movs	r2, r0
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b64      	cmp	r3, #100	; 0x64
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1f5      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_OscConfig+0x344>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4013      	ands	r3, r2
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10f      	bne.n	80026b4 <HAL_RCC_OscConfig+0x348>
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	4b02      	ldr	r3, [pc, #8]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 800269a:	2101      	movs	r1, #1
 800269c:	430a      	orrs	r2, r1
 800269e:	621a      	str	r2, [r3, #32]
 80026a0:	e036      	b.n	8002710 <HAL_RCC_OscConfig+0x3a4>
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	40021000 	.word	0x40021000
 80026a8:	fffeffff 	.word	0xfffeffff
 80026ac:	fffbffff 	.word	0xfffbffff
 80026b0:	40007000 	.word	0x40007000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10c      	bne.n	80026d6 <HAL_RCC_OscConfig+0x36a>
 80026bc:	4bca      	ldr	r3, [pc, #808]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80026be:	6a1a      	ldr	r2, [r3, #32]
 80026c0:	4bc9      	ldr	r3, [pc, #804]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	438a      	bics	r2, r1
 80026c6:	621a      	str	r2, [r3, #32]
 80026c8:	4bc7      	ldr	r3, [pc, #796]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80026ca:	6a1a      	ldr	r2, [r3, #32]
 80026cc:	4bc6      	ldr	r3, [pc, #792]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80026ce:	2104      	movs	r1, #4
 80026d0:	438a      	bics	r2, r1
 80026d2:	621a      	str	r2, [r3, #32]
 80026d4:	e01c      	b.n	8002710 <HAL_RCC_OscConfig+0x3a4>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b05      	cmp	r3, #5
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x38c>
 80026de:	4bc2      	ldr	r3, [pc, #776]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80026e0:	6a1a      	ldr	r2, [r3, #32]
 80026e2:	4bc1      	ldr	r3, [pc, #772]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80026e4:	2104      	movs	r1, #4
 80026e6:	430a      	orrs	r2, r1
 80026e8:	621a      	str	r2, [r3, #32]
 80026ea:	4bbf      	ldr	r3, [pc, #764]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	4bbe      	ldr	r3, [pc, #760]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80026f0:	2101      	movs	r1, #1
 80026f2:	430a      	orrs	r2, r1
 80026f4:	621a      	str	r2, [r3, #32]
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0x3a4>
 80026f8:	4bbb      	ldr	r3, [pc, #748]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	4bba      	ldr	r3, [pc, #744]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80026fe:	2101      	movs	r1, #1
 8002700:	438a      	bics	r2, r1
 8002702:	621a      	str	r2, [r3, #32]
 8002704:	4bb8      	ldr	r3, [pc, #736]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002706:	6a1a      	ldr	r2, [r3, #32]
 8002708:	4bb7      	ldr	r3, [pc, #732]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800270a:	2104      	movs	r1, #4
 800270c:	438a      	bics	r2, r1
 800270e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d014      	beq.n	8002742 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002718:	f7ff fbb0 	bl	8001e7c <HAL_GetTick>
 800271c:	0003      	movs	r3, r0
 800271e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	e009      	b.n	8002736 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7ff fbab 	bl	8001e7c <HAL_GetTick>
 8002726:	0002      	movs	r2, r0
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	4aaf      	ldr	r2, [pc, #700]	; (80029ec <HAL_RCC_OscConfig+0x680>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e19a      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002736:	4bac      	ldr	r3, [pc, #688]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	2202      	movs	r2, #2
 800273c:	4013      	ands	r3, r2
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x3b6>
 8002740:	e013      	b.n	800276a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002742:	f7ff fb9b 	bl	8001e7c <HAL_GetTick>
 8002746:	0003      	movs	r3, r0
 8002748:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274a:	e009      	b.n	8002760 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f7ff fb96 	bl	8001e7c <HAL_GetTick>
 8002750:	0002      	movs	r2, r0
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	4aa5      	ldr	r2, [pc, #660]	; (80029ec <HAL_RCC_OscConfig+0x680>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e185      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	4ba1      	ldr	r3, [pc, #644]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	2202      	movs	r2, #2
 8002766:	4013      	ands	r3, r2
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800276a:	231f      	movs	r3, #31
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d105      	bne.n	8002780 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002774:	4b9c      	ldr	r3, [pc, #624]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	4b9b      	ldr	r3, [pc, #620]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800277a:	499d      	ldr	r1, [pc, #628]	; (80029f0 <HAL_RCC_OscConfig+0x684>)
 800277c:	400a      	ands	r2, r1
 800277e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2210      	movs	r2, #16
 8002786:	4013      	ands	r3, r2
 8002788:	d063      	beq.n	8002852 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d12a      	bne.n	80027e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002792:	4b95      	ldr	r3, [pc, #596]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002796:	4b94      	ldr	r3, [pc, #592]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002798:	2104      	movs	r1, #4
 800279a:	430a      	orrs	r2, r1
 800279c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800279e:	4b92      	ldr	r3, [pc, #584]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80027a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a2:	4b91      	ldr	r3, [pc, #580]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80027a4:	2101      	movs	r1, #1
 80027a6:	430a      	orrs	r2, r1
 80027a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027aa:	f7ff fb67 	bl	8001e7c <HAL_GetTick>
 80027ae:	0003      	movs	r3, r0
 80027b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80027b4:	f7ff fb62 	bl	8001e7c <HAL_GetTick>
 80027b8:	0002      	movs	r2, r0
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e152      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80027c6:	4b88      	ldr	r3, [pc, #544]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ca:	2202      	movs	r2, #2
 80027cc:	4013      	ands	r3, r2
 80027ce:	d0f1      	beq.n	80027b4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027d0:	4b85      	ldr	r3, [pc, #532]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80027d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d4:	22f8      	movs	r2, #248	; 0xf8
 80027d6:	4393      	bics	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	00da      	lsls	r2, r3, #3
 80027e0:	4b81      	ldr	r3, [pc, #516]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80027e2:	430a      	orrs	r2, r1
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
 80027e6:	e034      	b.n	8002852 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	3305      	adds	r3, #5
 80027ee:	d111      	bne.n	8002814 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80027f0:	4b7d      	ldr	r3, [pc, #500]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80027f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f4:	4b7c      	ldr	r3, [pc, #496]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80027f6:	2104      	movs	r1, #4
 80027f8:	438a      	bics	r2, r1
 80027fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80027fc:	4b7a      	ldr	r3, [pc, #488]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	22f8      	movs	r2, #248	; 0xf8
 8002802:	4393      	bics	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	00da      	lsls	r2, r3, #3
 800280c:	4b76      	ldr	r3, [pc, #472]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800280e:	430a      	orrs	r2, r1
 8002810:	635a      	str	r2, [r3, #52]	; 0x34
 8002812:	e01e      	b.n	8002852 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002814:	4b74      	ldr	r3, [pc, #464]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002818:	4b73      	ldr	r3, [pc, #460]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800281a:	2104      	movs	r1, #4
 800281c:	430a      	orrs	r2, r1
 800281e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002820:	4b71      	ldr	r3, [pc, #452]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002824:	4b70      	ldr	r3, [pc, #448]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002826:	2101      	movs	r1, #1
 8002828:	438a      	bics	r2, r1
 800282a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7ff fb26 	bl	8001e7c <HAL_GetTick>
 8002830:	0003      	movs	r3, r0
 8002832:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002836:	f7ff fb21 	bl	8001e7c <HAL_GetTick>
 800283a:	0002      	movs	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e111      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002848:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d1f1      	bne.n	8002836 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2220      	movs	r2, #32
 8002858:	4013      	ands	r3, r2
 800285a:	d05c      	beq.n	8002916 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800285c:	4b62      	ldr	r3, [pc, #392]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	220c      	movs	r2, #12
 8002862:	4013      	ands	r3, r2
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d00e      	beq.n	8002886 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002868:	4b5f      	ldr	r3, [pc, #380]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	220c      	movs	r2, #12
 800286e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002870:	2b08      	cmp	r3, #8
 8002872:	d114      	bne.n	800289e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002874:	4b5c      	ldr	r3, [pc, #368]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	23c0      	movs	r3, #192	; 0xc0
 800287a:	025b      	lsls	r3, r3, #9
 800287c:	401a      	ands	r2, r3
 800287e:	23c0      	movs	r3, #192	; 0xc0
 8002880:	025b      	lsls	r3, r3, #9
 8002882:	429a      	cmp	r2, r3
 8002884:	d10b      	bne.n	800289e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002886:	4b58      	ldr	r3, [pc, #352]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	025b      	lsls	r3, r3, #9
 800288e:	4013      	ands	r3, r2
 8002890:	d040      	beq.n	8002914 <HAL_RCC_OscConfig+0x5a8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d03c      	beq.n	8002914 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0e6      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01b      	beq.n	80028de <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80028a6:	4b50      	ldr	r3, [pc, #320]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80028a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028aa:	4b4f      	ldr	r3, [pc, #316]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	0249      	lsls	r1, r1, #9
 80028b0:	430a      	orrs	r2, r1
 80028b2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7ff fae2 	bl	8001e7c <HAL_GetTick>
 80028b8:	0003      	movs	r3, r0
 80028ba:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028be:	f7ff fadd 	bl	8001e7c <HAL_GetTick>
 80028c2:	0002      	movs	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0cd      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80028d0:	4b45      	ldr	r3, [pc, #276]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80028d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	025b      	lsls	r3, r3, #9
 80028d8:	4013      	ands	r3, r2
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x552>
 80028dc:	e01b      	b.n	8002916 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80028de:	4b42      	ldr	r3, [pc, #264]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80028e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80028e4:	4943      	ldr	r1, [pc, #268]	; (80029f4 <HAL_RCC_OscConfig+0x688>)
 80028e6:	400a      	ands	r2, r1
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7ff fac7 	bl	8001e7c <HAL_GetTick>
 80028ee:	0003      	movs	r3, r0
 80028f0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028f4:	f7ff fac2 	bl	8001e7c <HAL_GetTick>
 80028f8:	0002      	movs	r2, r0
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0b2      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002906:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	025b      	lsls	r3, r3, #9
 800290e:	4013      	ands	r3, r2
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x588>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002914:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2b00      	cmp	r3, #0
 800291c:	d100      	bne.n	8002920 <HAL_RCC_OscConfig+0x5b4>
 800291e:	e0a4      	b.n	8002a6a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002920:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	220c      	movs	r2, #12
 8002926:	4013      	ands	r3, r2
 8002928:	2b08      	cmp	r3, #8
 800292a:	d100      	bne.n	800292e <HAL_RCC_OscConfig+0x5c2>
 800292c:	e078      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2b02      	cmp	r3, #2
 8002934:	d14c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800293c:	492e      	ldr	r1, [pc, #184]	; (80029f8 <HAL_RCC_OscConfig+0x68c>)
 800293e:	400a      	ands	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7ff fa9b 	bl	8001e7c <HAL_GetTick>
 8002946:	0003      	movs	r3, r0
 8002948:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294c:	f7ff fa96 	bl	8001e7c <HAL_GetTick>
 8002950:	0002      	movs	r2, r0
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e086      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	049b      	lsls	r3, r3, #18
 8002966:	4013      	ands	r3, r2
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800296a:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	220f      	movs	r2, #15
 8002970:	4393      	bics	r3, r2
 8002972:	0019      	movs	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002978:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800297a:	430a      	orrs	r2, r1
 800297c:	62da      	str	r2, [r3, #44]	; 0x2c
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <HAL_RCC_OscConfig+0x690>)
 8002984:	4013      	ands	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	431a      	orrs	r2, r3
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 8002994:	430a      	orrs	r2, r1
 8002996:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 800299e:	2180      	movs	r1, #128	; 0x80
 80029a0:	0449      	lsls	r1, r1, #17
 80029a2:	430a      	orrs	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7ff fa69 	bl	8001e7c <HAL_GetTick>
 80029aa:	0003      	movs	r3, r0
 80029ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff fa64 	bl	8001e7c <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e054      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	049b      	lsls	r3, r3, #18
 80029ca:	4013      	ands	r3, r2
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x644>
 80029ce:	e04c      	b.n	8002a6a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <HAL_RCC_OscConfig+0x67c>)
 80029d6:	4908      	ldr	r1, [pc, #32]	; (80029f8 <HAL_RCC_OscConfig+0x68c>)
 80029d8:	400a      	ands	r2, r1
 80029da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7ff fa4e 	bl	8001e7c <HAL_GetTick>
 80029e0:	0003      	movs	r3, r0
 80029e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e4:	e015      	b.n	8002a12 <HAL_RCC_OscConfig+0x6a6>
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	40021000 	.word	0x40021000
 80029ec:	00001388 	.word	0x00001388
 80029f0:	efffffff 	.word	0xefffffff
 80029f4:	fffeffff 	.word	0xfffeffff
 80029f8:	feffffff 	.word	0xfeffffff
 80029fc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a00:	f7ff fa3c 	bl	8001e7c <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e02c      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_RCC_OscConfig+0x708>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	049b      	lsls	r3, r3, #18
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x694>
 8002a1e:	e024      	b.n	8002a6a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e01f      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_RCC_OscConfig+0x708>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_RCC_OscConfig+0x708>)
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	23c0      	movs	r3, #192	; 0xc0
 8002a3c:	025b      	lsls	r3, r3, #9
 8002a3e:	401a      	ands	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d10e      	bne.n	8002a66 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	23f0      	movs	r3, #240	; 0xf0
 8002a5a:	039b      	lsls	r3, r3, #14
 8002a5c:	401a      	ands	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b008      	add	sp, #32
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000

08002a78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0bf      	b.n	8002c0c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <HAL_RCC_ClockConfig+0x19c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2201      	movs	r2, #1
 8002a92:	4013      	ands	r3, r2
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d911      	bls.n	8002abe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b5e      	ldr	r3, [pc, #376]	; (8002c14 <HAL_RCC_ClockConfig+0x19c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4393      	bics	r3, r2
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	4b5b      	ldr	r3, [pc, #364]	; (8002c14 <HAL_RCC_ClockConfig+0x19c>)
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x19c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0a6      	b.n	8002c0c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d015      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2204      	movs	r2, #4
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d006      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ad2:	4b51      	ldr	r3, [pc, #324]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4b50      	ldr	r3, [pc, #320]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002ad8:	21e0      	movs	r1, #224	; 0xe0
 8002ada:	00c9      	lsls	r1, r1, #3
 8002adc:	430a      	orrs	r2, r1
 8002ade:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b4d      	ldr	r3, [pc, #308]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	22f0      	movs	r2, #240	; 0xf0
 8002ae6:	4393      	bics	r3, r2
 8002ae8:	0019      	movs	r1, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2201      	movs	r2, #1
 8002afa:	4013      	ands	r3, r2
 8002afc:	d04c      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b44      	ldr	r3, [pc, #272]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	029b      	lsls	r3, r3, #10
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d120      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07a      	b.n	8002c0c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	049b      	lsls	r3, r3, #18
 8002b26:	4013      	ands	r3, r2
 8002b28:	d114      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06e      	b.n	8002c0c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b36:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	025b      	lsls	r3, r3, #9
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d108      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e062      	b.n	8002c0c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e05b      	b.n	8002c0c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b54:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	4393      	bics	r3, r2
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b68:	f7ff f988 	bl	8001e7c <HAL_GetTick>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b70:	e009      	b.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b72:	f7ff f983 	bl	8001e7c <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <HAL_RCC_ClockConfig+0x1a4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e042      	b.n	8002c0c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1ec      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b98:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <HAL_RCC_ClockConfig+0x19c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d211      	bcs.n	8002bca <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCC_ClockConfig+0x19c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2201      	movs	r2, #1
 8002bac:	4393      	bics	r3, r2
 8002bae:	0019      	movs	r1, r3
 8002bb0:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <HAL_RCC_ClockConfig+0x19c>)
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb8:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_RCC_ClockConfig+0x19c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e020      	b.n	8002c0c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2204      	movs	r2, #4
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d009      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd4:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_RCC_ClockConfig+0x1a8>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002be8:	f000 f820 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bec:	0001      	movs	r1, r0
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1a0>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <HAL_RCC_ClockConfig+0x1ac>)
 8002bfa:	5cd3      	ldrb	r3, [r2, r3]
 8002bfc:	000a      	movs	r2, r1
 8002bfe:	40da      	lsrs	r2, r3
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1b0>)
 8002c02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7ff f8f3 	bl	8001df0 <HAL_InitTick>
  
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b004      	add	sp, #16
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40022000 	.word	0x40022000
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	00001388 	.word	0x00001388
 8002c20:	fffff8ff 	.word	0xfffff8ff
 8002c24:	08004d20 	.word	0x08004d20
 8002c28:	20000000 	.word	0x20000000

08002c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b08f      	sub	sp, #60	; 0x3c
 8002c30:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c32:	2314      	movs	r3, #20
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	4a38      	ldr	r2, [pc, #224]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xec>)
 8002c38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c3a:	c313      	stmia	r3!, {r0, r1, r4}
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	4a36      	ldr	r2, [pc, #216]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002c44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c46:	c313      	stmia	r3!, {r0, r1, r4}
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c50:	2300      	movs	r3, #0
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	220c      	movs	r2, #12
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d047      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0xd4>
 8002c70:	d849      	bhi.n	8002d06 <HAL_RCC_GetSysClockFreq+0xda>
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d002      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x50>
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x56>
 8002c7a:	e044      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c7c:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c80:	e044      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	0c9b      	lsrs	r3, r3, #18
 8002c86:	220f      	movs	r2, #15
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2214      	movs	r2, #20
 8002c8c:	18ba      	adds	r2, r7, r2
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c92:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	220f      	movs	r2, #15
 8002c98:	4013      	ands	r3, r2
 8002c9a:	1d3a      	adds	r2, r7, #4
 8002c9c:	5cd3      	ldrb	r3, [r2, r3]
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca2:	23c0      	movs	r3, #192	; 0xc0
 8002ca4:	025b      	lsls	r3, r3, #9
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	025b      	lsls	r3, r3, #9
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d109      	bne.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cb2:	481c      	ldr	r0, [pc, #112]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cb4:	f7fd fa28 	bl	8000108 <__udivsi3>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	001a      	movs	r2, r3
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	4353      	muls	r3, r2
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc2:	e01a      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc6:	23c0      	movs	r3, #192	; 0xc0
 8002cc8:	025b      	lsls	r3, r3, #9
 8002cca:	401a      	ands	r2, r3
 8002ccc:	23c0      	movs	r3, #192	; 0xc0
 8002cce:	025b      	lsls	r3, r3, #9
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d109      	bne.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd6:	4814      	ldr	r0, [pc, #80]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cd8:	f7fd fa16 	bl	8000108 <__udivsi3>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	001a      	movs	r2, r3
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	4353      	muls	r3, r2
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cea:	480e      	ldr	r0, [pc, #56]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cec:	f7fd fa0c 	bl	8000108 <__udivsi3>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	4353      	muls	r3, r2
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cfe:	e005      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d04:	e002      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d0a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b00f      	add	sp, #60	; 0x3c
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	08004d00 	.word	0x08004d00
 8002d1c:	08004d10 	.word	0x08004d10
 8002d20:	40021000 	.word	0x40021000
 8002d24:	007a1200 	.word	0x007a1200
 8002d28:	02dc6c00 	.word	0x02dc6c00

08002d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d30:	4b02      	ldr	r3, [pc, #8]	; (8002d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	20000000 	.word	0x20000000

08002d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d44:	f7ff fff2 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 8002d48:	0001      	movs	r1, r0
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	2207      	movs	r2, #7
 8002d52:	4013      	ands	r3, r2
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d56:	5cd3      	ldrb	r3, [r2, r3]
 8002d58:	40d9      	lsrs	r1, r3
 8002d5a:	000b      	movs	r3, r1
}    
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	40021000 	.word	0x40021000
 8002d68:	08004d30 	.word	0x08004d30

08002d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	025b      	lsls	r3, r3, #9
 8002d84:	4013      	ands	r3, r2
 8002d86:	d100      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002d88:	e08e      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002d8a:	2017      	movs	r0, #23
 8002d8c:	183b      	adds	r3, r7, r0
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d92:	4b6e      	ldr	r3, [pc, #440]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d94:	69da      	ldr	r2, [r3, #28]
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	055b      	lsls	r3, r3, #21
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d110      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	4b6b      	ldr	r3, [pc, #428]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0549      	lsls	r1, r1, #21
 8002da8:	430a      	orrs	r2, r1
 8002daa:	61da      	str	r2, [r3, #28]
 8002dac:	4b67      	ldr	r3, [pc, #412]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	2380      	movs	r3, #128	; 0x80
 8002db2:	055b      	lsls	r3, r3, #21
 8002db4:	4013      	ands	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dba:	183b      	adds	r3, r7, r0
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d11a      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dcc:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b5f      	ldr	r3, [pc, #380]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002dd2:	2180      	movs	r1, #128	; 0x80
 8002dd4:	0049      	lsls	r1, r1, #1
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7ff f84f 	bl	8001e7c <HAL_GetTick>
 8002dde:	0003      	movs	r3, r0
 8002de0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	e008      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7ff f84a 	bl	8001e7c <HAL_GetTick>
 8002de8:	0002      	movs	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e0a6      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b56      	ldr	r3, [pc, #344]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e02:	4b52      	ldr	r3, [pc, #328]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	23c0      	movs	r3, #192	; 0xc0
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d034      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	23c0      	movs	r3, #192	; 0xc0
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d02c      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e24:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a4a      	ldr	r2, [pc, #296]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e30:	6a1a      	ldr	r2, [r3, #32]
 8002e32:	4b46      	ldr	r3, [pc, #280]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	0249      	lsls	r1, r1, #9
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3c:	4b43      	ldr	r3, [pc, #268]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e42:	4945      	ldr	r1, [pc, #276]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e48:	4b40      	ldr	r3, [pc, #256]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	4013      	ands	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e56:	f7ff f811 	bl	8001e7c <HAL_GetTick>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5e:	e009      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7ff f80c 	bl	8001e7c <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	4a3c      	ldr	r2, [pc, #240]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e067      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e7e:	4b33      	ldr	r3, [pc, #204]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a34      	ldr	r2, [pc, #208]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e92:	2317      	movs	r3, #23
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ea2:	492f      	ldr	r1, [pc, #188]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2201      	movs	r2, #1
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	4393      	bics	r3, r2
 8002eba:	0019      	movs	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ed0:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	4013      	ands	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	2210      	movs	r2, #16
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002efe:	430a      	orrs	r2, r1
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	029b      	lsls	r3, r3, #10
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d009      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	4393      	bics	r3, r2
 8002f16:	0019      	movs	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699a      	ldr	r2, [r3, #24]
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	2240      	movs	r2, #64	; 0x40
 8002f34:	4393      	bics	r3, r2
 8002f36:	0019      	movs	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b006      	add	sp, #24
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40007000 	.word	0x40007000
 8002f54:	fffffcff 	.word	0xfffffcff
 8002f58:	fffeffff 	.word	0xfffeffff
 8002f5c:	00001388 	.word	0x00001388
 8002f60:	efffffff 	.word	0xefffffff
 8002f64:	fffcffff 	.word	0xfffcffff

08002f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0a8      	b.n	80030cc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	2382      	movs	r3, #130	; 0x82
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d009      	beq.n	8002fa2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	61da      	str	r2, [r3, #28]
 8002f94:	e005      	b.n	8002fa2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	225d      	movs	r2, #93	; 0x5d
 8002fac:	5c9b      	ldrb	r3, [r3, r2]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	225c      	movs	r2, #92	; 0x5c
 8002fb8:	2100      	movs	r1, #0
 8002fba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7fe fc94 	bl	80018ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	225d      	movs	r2, #93	; 0x5d
 8002fc8:	2102      	movs	r1, #2
 8002fca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2140      	movs	r1, #64	; 0x40
 8002fd8:	438a      	bics	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	23e0      	movs	r3, #224	; 0xe0
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d902      	bls.n	8002fee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e002      	b.n	8002ff4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	015b      	lsls	r3, r3, #5
 8002ff2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	23f0      	movs	r3, #240	; 0xf0
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d008      	beq.n	8003012 <HAL_SPI_Init+0xaa>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	23e0      	movs	r3, #224	; 0xe0
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	429a      	cmp	r2, r3
 800300a:	d002      	beq.n	8003012 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	2382      	movs	r3, #130	; 0x82
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	401a      	ands	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6899      	ldr	r1, [r3, #8]
 8003020:	2384      	movs	r3, #132	; 0x84
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	400b      	ands	r3, r1
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2102      	movs	r1, #2
 800302e:	400b      	ands	r3, r1
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	2101      	movs	r1, #1
 8003038:	400b      	ands	r3, r1
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6999      	ldr	r1, [r3, #24]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	400b      	ands	r3, r1
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	2138      	movs	r1, #56	; 0x38
 800304e:	400b      	ands	r3, r1
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	400b      	ands	r3, r1
 800305a:	431a      	orrs	r2, r3
 800305c:	0011      	movs	r1, r2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	019b      	lsls	r3, r3, #6
 8003066:	401a      	ands	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	2204      	movs	r2, #4
 8003078:	401a      	ands	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	2110      	movs	r1, #16
 8003080:	400b      	ands	r3, r1
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	2108      	movs	r1, #8
 800308a:	400b      	ands	r3, r1
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68d9      	ldr	r1, [r3, #12]
 8003092:	23f0      	movs	r3, #240	; 0xf0
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	400b      	ands	r3, r1
 8003098:	431a      	orrs	r2, r3
 800309a:	0011      	movs	r1, r2
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	015b      	lsls	r3, r3, #5
 80030a2:	401a      	ands	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4907      	ldr	r1, [pc, #28]	; (80030d4 <HAL_SPI_Init+0x16c>)
 80030b8:	400a      	ands	r2, r1
 80030ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	225d      	movs	r2, #93	; 0x5d
 80030c6:	2101      	movs	r1, #1
 80030c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b004      	add	sp, #16
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	fffff7ff 	.word	0xfffff7ff

080030d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	001a      	movs	r2, r3
 80030e6:	1cbb      	adds	r3, r7, #2
 80030e8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030ea:	2301      	movs	r3, #1
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030ee:	2323      	movs	r3, #35	; 0x23
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	225c      	movs	r2, #92	; 0x5c
 80030fa:	5c9b      	ldrb	r3, [r3, r2]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_SPI_TransmitReceive+0x2c>
 8003100:	2302      	movs	r3, #2
 8003102:	e1b5      	b.n	8003470 <HAL_SPI_TransmitReceive+0x398>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	225c      	movs	r2, #92	; 0x5c
 8003108:	2101      	movs	r1, #1
 800310a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800310c:	f7fe feb6 	bl	8001e7c <HAL_GetTick>
 8003110:	0003      	movs	r3, r0
 8003112:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003114:	201b      	movs	r0, #27
 8003116:	183b      	adds	r3, r7, r0
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	215d      	movs	r1, #93	; 0x5d
 800311c:	5c52      	ldrb	r2, [r2, r1]
 800311e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003126:	2312      	movs	r3, #18
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	1cba      	adds	r2, r7, #2
 800312c:	8812      	ldrh	r2, [r2, #0]
 800312e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003130:	183b      	adds	r3, r7, r0
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d011      	beq.n	800315c <HAL_SPI_TransmitReceive+0x84>
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	2382      	movs	r3, #130	; 0x82
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	429a      	cmp	r2, r3
 8003140:	d107      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d103      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x7a>
 800314a:	183b      	adds	r3, r7, r0
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d004      	beq.n	800315c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003152:	2323      	movs	r3, #35	; 0x23
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2202      	movs	r2, #2
 8003158:	701a      	strb	r2, [r3, #0]
    goto error;
 800315a:	e17e      	b.n	800345a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <HAL_SPI_TransmitReceive+0x98>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_SPI_TransmitReceive+0x98>
 8003168:	1cbb      	adds	r3, r7, #2
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003170:	2323      	movs	r3, #35	; 0x23
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
    goto error;
 8003178:	e16f      	b.n	800345a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	225d      	movs	r2, #93	; 0x5d
 800317e:	5c9b      	ldrb	r3, [r3, r2]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b04      	cmp	r3, #4
 8003184:	d003      	beq.n	800318e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	225d      	movs	r2, #93	; 0x5d
 800318a:	2105      	movs	r1, #5
 800318c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1cba      	adds	r2, r7, #2
 800319e:	2146      	movs	r1, #70	; 0x46
 80031a0:	8812      	ldrh	r2, [r2, #0]
 80031a2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1cba      	adds	r2, r7, #2
 80031a8:	2144      	movs	r1, #68	; 0x44
 80031aa:	8812      	ldrh	r2, [r2, #0]
 80031ac:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1cba      	adds	r2, r7, #2
 80031b8:	8812      	ldrh	r2, [r2, #0]
 80031ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1cba      	adds	r2, r7, #2
 80031c0:	8812      	ldrh	r2, [r2, #0]
 80031c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	23e0      	movs	r3, #224	; 0xe0
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	429a      	cmp	r2, r3
 80031da:	d908      	bls.n	80031ee <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	49a4      	ldr	r1, [pc, #656]	; (8003478 <HAL_SPI_TransmitReceive+0x3a0>)
 80031e8:	400a      	ands	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	e008      	b.n	8003200 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2180      	movs	r1, #128	; 0x80
 80031fa:	0149      	lsls	r1, r1, #5
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2240      	movs	r2, #64	; 0x40
 8003208:	4013      	ands	r3, r2
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d007      	beq.n	800321e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2140      	movs	r1, #64	; 0x40
 800321a:	430a      	orrs	r2, r1
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	23e0      	movs	r3, #224	; 0xe0
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	429a      	cmp	r2, r3
 8003228:	d800      	bhi.n	800322c <HAL_SPI_TransmitReceive+0x154>
 800322a:	e07f      	b.n	800332c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_SPI_TransmitReceive+0x168>
 8003234:	2312      	movs	r3, #18
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d000      	beq.n	8003240 <HAL_SPI_TransmitReceive+0x168>
 800323e:	e069      	b.n	8003314 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	881a      	ldrh	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	1c9a      	adds	r2, r3, #2
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003264:	e056      	b.n	8003314 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2202      	movs	r2, #2
 800326e:	4013      	ands	r3, r2
 8003270:	2b02      	cmp	r3, #2
 8003272:	d11b      	bne.n	80032ac <HAL_SPI_TransmitReceive+0x1d4>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <HAL_SPI_TransmitReceive+0x1d4>
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	2b01      	cmp	r3, #1
 8003282:	d113      	bne.n	80032ac <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	1c9a      	adds	r2, r3, #2
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2201      	movs	r2, #1
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d11c      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x21c>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2246      	movs	r2, #70	; 0x46
 80032be:	5a9b      	ldrh	r3, [r3, r2]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	b292      	uxth	r2, r2
 80032d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	1c9a      	adds	r2, r3, #2
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2246      	movs	r2, #70	; 0x46
 80032e2:	5a9b      	ldrh	r3, [r3, r2]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b299      	uxth	r1, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2246      	movs	r2, #70	; 0x46
 80032ee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032f0:	2301      	movs	r3, #1
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032f4:	f7fe fdc2 	bl	8001e7c <HAL_GetTick>
 80032f8:	0002      	movs	r2, r0
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003300:	429a      	cmp	r2, r3
 8003302:	d807      	bhi.n	8003314 <HAL_SPI_TransmitReceive+0x23c>
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003306:	3301      	adds	r3, #1
 8003308:	d004      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800330a:	2323      	movs	r3, #35	; 0x23
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	2203      	movs	r2, #3
 8003310:	701a      	strb	r2, [r3, #0]
        goto error;
 8003312:	e0a2      	b.n	800345a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1a3      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x18e>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2246      	movs	r2, #70	; 0x46
 8003322:	5a9b      	ldrh	r3, [r3, r2]
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d19d      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x18e>
 800332a:	e085      	b.n	8003438 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x268>
 8003334:	2312      	movs	r3, #18
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d000      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x268>
 800333e:	e070      	b.n	8003422 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	330c      	adds	r3, #12
 800334a:	7812      	ldrb	r2, [r2, #0]
 800334c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003366:	e05c      	b.n	8003422 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d11c      	bne.n	80033b0 <HAL_SPI_TransmitReceive+0x2d8>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d017      	beq.n	80033b0 <HAL_SPI_TransmitReceive+0x2d8>
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	2b01      	cmp	r3, #1
 8003384:	d114      	bne.n	80033b0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	7812      	ldrb	r2, [r2, #0]
 8003392:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2201      	movs	r2, #1
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d11e      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x324>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2246      	movs	r2, #70	; 0x46
 80033c2:	5a9b      	ldrh	r3, [r3, r2]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d018      	beq.n	80033fc <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	330c      	adds	r3, #12
 80033d0:	001a      	movs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	7812      	ldrb	r2, [r2, #0]
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2246      	movs	r2, #70	; 0x46
 80033ea:	5a9b      	ldrh	r3, [r3, r2]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b299      	uxth	r1, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2246      	movs	r2, #70	; 0x46
 80033f6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033f8:	2301      	movs	r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033fc:	f7fe fd3e 	bl	8001e7c <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003408:	429a      	cmp	r2, r3
 800340a:	d802      	bhi.n	8003412 <HAL_SPI_TransmitReceive+0x33a>
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	3301      	adds	r3, #1
 8003410:	d102      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x340>
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003418:	2323      	movs	r3, #35	; 0x23
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	2203      	movs	r2, #3
 800341e:	701a      	strb	r2, [r3, #0]
        goto error;
 8003420:	e01b      	b.n	800345a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d19d      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x290>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2246      	movs	r2, #70	; 0x46
 8003430:	5a9b      	ldrh	r3, [r3, r2]
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d197      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	0018      	movs	r0, r3
 8003440:	f000 f94c 	bl	80036dc <SPI_EndRxTxTransaction>
 8003444:	1e03      	subs	r3, r0, #0
 8003446:	d007      	beq.n	8003458 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003448:	2323      	movs	r3, #35	; 0x23
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	661a      	str	r2, [r3, #96]	; 0x60
 8003456:	e000      	b.n	800345a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003458:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	225d      	movs	r2, #93	; 0x5d
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	225c      	movs	r2, #92	; 0x5c
 8003466:	2100      	movs	r1, #0
 8003468:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800346a:	2323      	movs	r3, #35	; 0x23
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	781b      	ldrb	r3, [r3, #0]
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b00a      	add	sp, #40	; 0x28
 8003476:	bd80      	pop	{r7, pc}
 8003478:	ffffefff 	.word	0xffffefff

0800347c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	1dfb      	adds	r3, r7, #7
 800348a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800348c:	f7fe fcf6 	bl	8001e7c <HAL_GetTick>
 8003490:	0002      	movs	r2, r0
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	18d3      	adds	r3, r2, r3
 800349a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800349c:	f7fe fcee 	bl	8001e7c <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034a4:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	015b      	lsls	r3, r3, #5
 80034aa:	0d1b      	lsrs	r3, r3, #20
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	4353      	muls	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034b2:	e058      	b.n	8003566 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	d055      	beq.n	8003566 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034ba:	f7fe fcdf 	bl	8001e7c <HAL_GetTick>
 80034be:	0002      	movs	r2, r0
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d902      	bls.n	80034d0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d142      	bne.n	8003556 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	21e0      	movs	r1, #224	; 0xe0
 80034dc:	438a      	bics	r2, r1
 80034de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	2382      	movs	r3, #130	; 0x82
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d113      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0x98>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d005      	beq.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	429a      	cmp	r2, r3
 8003502:	d107      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2140      	movs	r1, #64	; 0x40
 8003510:	438a      	bics	r2, r1
 8003512:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	019b      	lsls	r3, r3, #6
 800351c:	429a      	cmp	r2, r3
 800351e:	d110      	bne.n	8003542 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	491a      	ldr	r1, [pc, #104]	; (8003594 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800352c:	400a      	ands	r2, r1
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	0189      	lsls	r1, r1, #6
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	225d      	movs	r2, #93	; 0x5d
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	225c      	movs	r2, #92	; 0x5c
 800354e:	2100      	movs	r1, #0
 8003550:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e017      	b.n	8003586 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3b01      	subs	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	4013      	ands	r3, r2
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	425a      	negs	r2, r3
 8003576:	4153      	adcs	r3, r2
 8003578:	b2db      	uxtb	r3, r3
 800357a:	001a      	movs	r2, r3
 800357c:	1dfb      	adds	r3, r7, #7
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d197      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b008      	add	sp, #32
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	20000000 	.word	0x20000000
 8003594:	ffffdfff 	.word	0xffffdfff

08003598 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035a6:	2317      	movs	r3, #23
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035ae:	f7fe fc65 	bl	8001e7c <HAL_GetTick>
 80035b2:	0002      	movs	r2, r0
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	18d3      	adds	r3, r2, r3
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035be:	f7fe fc5d 	bl	8001e7c <HAL_GetTick>
 80035c2:	0003      	movs	r3, r0
 80035c4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035ce:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	0013      	movs	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	189b      	adds	r3, r3, r2
 80035d8:	00da      	lsls	r2, r3, #3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	0d1b      	lsrs	r3, r3, #20
 80035de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e0:	4353      	muls	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035e4:	e068      	b.n	80036b8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	23c0      	movs	r3, #192	; 0xc0
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d10a      	bne.n	8003606 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d107      	bne.n	8003606 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	2117      	movs	r1, #23
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003602:	187b      	adds	r3, r7, r1
 8003604:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	3301      	adds	r3, #1
 800360a:	d055      	beq.n	80036b8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800360c:	f7fe fc36 	bl	8001e7c <HAL_GetTick>
 8003610:	0002      	movs	r2, r0
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	429a      	cmp	r2, r3
 800361a:	d902      	bls.n	8003622 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	2b00      	cmp	r3, #0
 8003620:	d142      	bne.n	80036a8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	21e0      	movs	r1, #224	; 0xe0
 800362e:	438a      	bics	r2, r1
 8003630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	2382      	movs	r3, #130	; 0x82
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	429a      	cmp	r2, r3
 800363c:	d113      	bne.n	8003666 <SPI_WaitFifoStateUntilTimeout+0xce>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	429a      	cmp	r2, r3
 8003648:	d005      	beq.n	8003656 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	429a      	cmp	r2, r3
 8003654:	d107      	bne.n	8003666 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2140      	movs	r1, #64	; 0x40
 8003662:	438a      	bics	r2, r1
 8003664:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	429a      	cmp	r2, r3
 8003670:	d110      	bne.n	8003694 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4916      	ldr	r1, [pc, #88]	; (80036d8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800367e:	400a      	ands	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2180      	movs	r1, #128	; 0x80
 800368e:	0189      	lsls	r1, r1, #6
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	225d      	movs	r2, #93	; 0x5d
 8003698:	2101      	movs	r1, #1
 800369a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	225c      	movs	r2, #92	; 0x5c
 80036a0:	2100      	movs	r1, #0
 80036a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e010      	b.n	80036ca <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d18e      	bne.n	80035e6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b00a      	add	sp, #40	; 0x28
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	20000000 	.word	0x20000000
 80036d8:	ffffdfff 	.word	0xffffdfff

080036dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	23c0      	movs	r3, #192	; 0xc0
 80036ec:	0159      	lsls	r1, r3, #5
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	0013      	movs	r3, r2
 80036f6:	2200      	movs	r2, #0
 80036f8:	f7ff ff4e 	bl	8003598 <SPI_WaitFifoStateUntilTimeout>
 80036fc:	1e03      	subs	r3, r0, #0
 80036fe:	d007      	beq.n	8003710 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003704:	2220      	movs	r2, #32
 8003706:	431a      	orrs	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e027      	b.n	8003760 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	0013      	movs	r3, r2
 800371a:	2200      	movs	r2, #0
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	f7ff fead 	bl	800347c <SPI_WaitFlagStateUntilTimeout>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d007      	beq.n	8003736 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372a:	2220      	movs	r2, #32
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e014      	b.n	8003760 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	23c0      	movs	r3, #192	; 0xc0
 800373a:	00d9      	lsls	r1, r3, #3
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	0013      	movs	r3, r2
 8003744:	2200      	movs	r2, #0
 8003746:	f7ff ff27 	bl	8003598 <SPI_WaitFifoStateUntilTimeout>
 800374a:	1e03      	subs	r3, r0, #0
 800374c:	d007      	beq.n	800375e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003752:	2220      	movs	r2, #32
 8003754:	431a      	orrs	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e000      	b.n	8003760 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	b004      	add	sp, #16
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e042      	b.n	8003800 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	223d      	movs	r2, #61	; 0x3d
 800377e:	5c9b      	ldrb	r3, [r3, r2]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	223c      	movs	r2, #60	; 0x3c
 800378a:	2100      	movs	r1, #0
 800378c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	0018      	movs	r0, r3
 8003792:	f7fe fa13 	bl	8001bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	223d      	movs	r2, #61	; 0x3d
 800379a:	2102      	movs	r1, #2
 800379c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	0019      	movs	r1, r3
 80037a8:	0010      	movs	r0, r2
 80037aa:	f000 fad7 	bl	8003d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2246      	movs	r2, #70	; 0x46
 80037b2:	2101      	movs	r1, #1
 80037b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	223e      	movs	r2, #62	; 0x3e
 80037ba:	2101      	movs	r1, #1
 80037bc:	5499      	strb	r1, [r3, r2]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	223f      	movs	r2, #63	; 0x3f
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2240      	movs	r2, #64	; 0x40
 80037ca:	2101      	movs	r1, #1
 80037cc:	5499      	strb	r1, [r3, r2]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2241      	movs	r2, #65	; 0x41
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2242      	movs	r2, #66	; 0x42
 80037da:	2101      	movs	r1, #1
 80037dc:	5499      	strb	r1, [r3, r2]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2243      	movs	r2, #67	; 0x43
 80037e2:	2101      	movs	r1, #1
 80037e4:	5499      	strb	r1, [r3, r2]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2244      	movs	r2, #68	; 0x44
 80037ea:	2101      	movs	r1, #1
 80037ec:	5499      	strb	r1, [r3, r2]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2245      	movs	r2, #69	; 0x45
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	223d      	movs	r2, #61	; 0x3d
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	0018      	movs	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	b002      	add	sp, #8
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e042      	b.n	80038a0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	223d      	movs	r2, #61	; 0x3d
 800381e:	5c9b      	ldrb	r3, [r3, r2]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d107      	bne.n	8003836 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	223c      	movs	r2, #60	; 0x3c
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	0018      	movs	r0, r3
 8003832:	f000 f839 	bl	80038a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	223d      	movs	r2, #61	; 0x3d
 800383a:	2102      	movs	r1, #2
 800383c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3304      	adds	r3, #4
 8003846:	0019      	movs	r1, r3
 8003848:	0010      	movs	r0, r2
 800384a:	f000 fa87 	bl	8003d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2246      	movs	r2, #70	; 0x46
 8003852:	2101      	movs	r1, #1
 8003854:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	223e      	movs	r2, #62	; 0x3e
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	223f      	movs	r2, #63	; 0x3f
 8003862:	2101      	movs	r1, #1
 8003864:	5499      	strb	r1, [r3, r2]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2240      	movs	r2, #64	; 0x40
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2241      	movs	r2, #65	; 0x41
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2242      	movs	r2, #66	; 0x42
 800387a:	2101      	movs	r1, #1
 800387c:	5499      	strb	r1, [r3, r2]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2243      	movs	r2, #67	; 0x43
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2244      	movs	r2, #68	; 0x44
 800388a:	2101      	movs	r1, #1
 800388c:	5499      	strb	r1, [r3, r2]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2245      	movs	r2, #69	; 0x45
 8003892:	2101      	movs	r1, #1
 8003894:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	223d      	movs	r2, #61	; 0x3d
 800389a:	2101      	movs	r1, #1
 800389c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b002      	add	sp, #8
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d108      	bne.n	80038da <HAL_TIM_PWM_Start+0x22>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	223e      	movs	r2, #62	; 0x3e
 80038cc:	5c9b      	ldrb	r3, [r3, r2]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	1e5a      	subs	r2, r3, #1
 80038d4:	4193      	sbcs	r3, r2
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	e01f      	b.n	800391a <HAL_TIM_PWM_Start+0x62>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d108      	bne.n	80038f2 <HAL_TIM_PWM_Start+0x3a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	223f      	movs	r2, #63	; 0x3f
 80038e4:	5c9b      	ldrb	r3, [r3, r2]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	1e5a      	subs	r2, r3, #1
 80038ec:	4193      	sbcs	r3, r2
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	e013      	b.n	800391a <HAL_TIM_PWM_Start+0x62>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d108      	bne.n	800390a <HAL_TIM_PWM_Start+0x52>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2240      	movs	r2, #64	; 0x40
 80038fc:	5c9b      	ldrb	r3, [r3, r2]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	1e5a      	subs	r2, r3, #1
 8003904:	4193      	sbcs	r3, r2
 8003906:	b2db      	uxtb	r3, r3
 8003908:	e007      	b.n	800391a <HAL_TIM_PWM_Start+0x62>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2241      	movs	r2, #65	; 0x41
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	1e5a      	subs	r2, r3, #1
 8003916:	4193      	sbcs	r3, r2
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e074      	b.n	8003a0c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <HAL_TIM_PWM_Start+0x7a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	223e      	movs	r2, #62	; 0x3e
 800392c:	2102      	movs	r1, #2
 800392e:	5499      	strb	r1, [r3, r2]
 8003930:	e013      	b.n	800395a <HAL_TIM_PWM_Start+0xa2>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b04      	cmp	r3, #4
 8003936:	d104      	bne.n	8003942 <HAL_TIM_PWM_Start+0x8a>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	223f      	movs	r2, #63	; 0x3f
 800393c:	2102      	movs	r1, #2
 800393e:	5499      	strb	r1, [r3, r2]
 8003940:	e00b      	b.n	800395a <HAL_TIM_PWM_Start+0xa2>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d104      	bne.n	8003952 <HAL_TIM_PWM_Start+0x9a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	2102      	movs	r1, #2
 800394e:	5499      	strb	r1, [r3, r2]
 8003950:	e003      	b.n	800395a <HAL_TIM_PWM_Start+0xa2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2241      	movs	r2, #65	; 0x41
 8003956:	2102      	movs	r1, #2
 8003958:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6839      	ldr	r1, [r7, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	0018      	movs	r0, r3
 8003964:	f000 fd10 	bl	8004388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a29      	ldr	r2, [pc, #164]	; (8003a14 <HAL_TIM_PWM_Start+0x15c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00e      	beq.n	8003990 <HAL_TIM_PWM_Start+0xd8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a28      	ldr	r2, [pc, #160]	; (8003a18 <HAL_TIM_PWM_Start+0x160>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d009      	beq.n	8003990 <HAL_TIM_PWM_Start+0xd8>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <HAL_TIM_PWM_Start+0x164>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_TIM_PWM_Start+0xd8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a25      	ldr	r2, [pc, #148]	; (8003a20 <HAL_TIM_PWM_Start+0x168>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <HAL_TIM_PWM_Start+0xdc>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <HAL_TIM_PWM_Start+0xde>
 8003994:	2300      	movs	r3, #0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2180      	movs	r1, #128	; 0x80
 80039a6:	0209      	lsls	r1, r1, #8
 80039a8:	430a      	orrs	r2, r1
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <HAL_TIM_PWM_Start+0x15c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00f      	beq.n	80039d6 <HAL_TIM_PWM_Start+0x11e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	05db      	lsls	r3, r3, #23
 80039be:	429a      	cmp	r2, r3
 80039c0:	d009      	beq.n	80039d6 <HAL_TIM_PWM_Start+0x11e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <HAL_TIM_PWM_Start+0x16c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d004      	beq.n	80039d6 <HAL_TIM_PWM_Start+0x11e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a11      	ldr	r2, [pc, #68]	; (8003a18 <HAL_TIM_PWM_Start+0x160>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d111      	bne.n	80039fa <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2207      	movs	r2, #7
 80039de:	4013      	ands	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b06      	cmp	r3, #6
 80039e6:	d010      	beq.n	8003a0a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2101      	movs	r1, #1
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f8:	e007      	b.n	8003a0a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2101      	movs	r1, #1
 8003a06:	430a      	orrs	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b004      	add	sp, #16
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800
 8003a24:	40000400 	.word	0x40000400

08003a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a34:	2317      	movs	r3, #23
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	223c      	movs	r2, #60	; 0x3c
 8003a40:	5c9b      	ldrb	r3, [r3, r2]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e0ad      	b.n	8003ba6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	223c      	movs	r2, #60	; 0x3c
 8003a4e:	2101      	movs	r1, #1
 8003a50:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b0c      	cmp	r3, #12
 8003a56:	d100      	bne.n	8003a5a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a58:	e076      	b.n	8003b48 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	d900      	bls.n	8003a62 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003a60:	e095      	b.n	8003b8e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d04e      	beq.n	8003b06 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d900      	bls.n	8003a70 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003a6e:	e08e      	b.n	8003b8e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d021      	beq.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003a7c:	e087      	b.n	8003b8e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	0011      	movs	r1, r2
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 f9e8 	bl	8003e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2108      	movs	r1, #8
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2104      	movs	r1, #4
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6999      	ldr	r1, [r3, #24]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	619a      	str	r2, [r3, #24]
      break;
 8003abe:	e06b      	b.n	8003b98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 fa4f 	bl	8003f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2180      	movs	r1, #128	; 0x80
 8003ada:	0109      	lsls	r1, r1, #4
 8003adc:	430a      	orrs	r2, r1
 8003ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699a      	ldr	r2, [r3, #24]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4931      	ldr	r1, [pc, #196]	; (8003bb0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003aec:	400a      	ands	r2, r1
 8003aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6999      	ldr	r1, [r3, #24]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	021a      	lsls	r2, r3, #8
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	619a      	str	r2, [r3, #24]
      break;
 8003b04:	e048      	b.n	8003b98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	0011      	movs	r1, r2
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f000 fab0 	bl	8004074 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2108      	movs	r1, #8
 8003b20:	430a      	orrs	r2, r1
 8003b22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2104      	movs	r1, #4
 8003b30:	438a      	bics	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69d9      	ldr	r1, [r3, #28]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	61da      	str	r2, [r3, #28]
      break;
 8003b46:	e027      	b.n	8003b98 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	0011      	movs	r1, r2
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 fb15 	bl	8004180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2180      	movs	r1, #128	; 0x80
 8003b62:	0109      	lsls	r1, r1, #4
 8003b64:	430a      	orrs	r2, r1
 8003b66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	490f      	ldr	r1, [pc, #60]	; (8003bb0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003b74:	400a      	ands	r2, r1
 8003b76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69d9      	ldr	r1, [r3, #28]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	021a      	lsls	r2, r3, #8
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	61da      	str	r2, [r3, #28]
      break;
 8003b8c:	e004      	b.n	8003b98 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003b8e:	2317      	movs	r3, #23
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
      break;
 8003b96:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	223c      	movs	r2, #60	; 0x3c
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	5499      	strb	r1, [r3, r2]

  return status;
 8003ba0:	2317      	movs	r3, #23
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	781b      	ldrb	r3, [r3, #0]
}
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b006      	add	sp, #24
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	fffffbff 	.word	0xfffffbff

08003bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	230f      	movs	r3, #15
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	223c      	movs	r2, #60	; 0x3c
 8003bca:	5c9b      	ldrb	r3, [r3, r2]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIM_ConfigClockSource+0x20>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e0bc      	b.n	8003d4e <HAL_TIM_ConfigClockSource+0x19a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	223c      	movs	r2, #60	; 0x3c
 8003bd8:	2101      	movs	r1, #1
 8003bda:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	223d      	movs	r2, #61	; 0x3d
 8003be0:	2102      	movs	r1, #2
 8003be2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2277      	movs	r2, #119	; 0x77
 8003bf0:	4393      	bics	r3, r2
 8003bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4a58      	ldr	r2, [pc, #352]	; (8003d58 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2280      	movs	r2, #128	; 0x80
 8003c0a:	0192      	lsls	r2, r2, #6
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d040      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0xde>
 8003c10:	2280      	movs	r2, #128	; 0x80
 8003c12:	0192      	lsls	r2, r2, #6
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d900      	bls.n	8003c1a <HAL_TIM_ConfigClockSource+0x66>
 8003c18:	e088      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x178>
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	0152      	lsls	r2, r2, #5
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d100      	bne.n	8003c24 <HAL_TIM_ConfigClockSource+0x70>
 8003c22:	e088      	b.n	8003d36 <HAL_TIM_ConfigClockSource+0x182>
 8003c24:	2280      	movs	r2, #128	; 0x80
 8003c26:	0152      	lsls	r2, r2, #5
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d900      	bls.n	8003c2e <HAL_TIM_ConfigClockSource+0x7a>
 8003c2c:	e07e      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x178>
 8003c2e:	2b70      	cmp	r3, #112	; 0x70
 8003c30:	d018      	beq.n	8003c64 <HAL_TIM_ConfigClockSource+0xb0>
 8003c32:	d900      	bls.n	8003c36 <HAL_TIM_ConfigClockSource+0x82>
 8003c34:	e07a      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x178>
 8003c36:	2b60      	cmp	r3, #96	; 0x60
 8003c38:	d04f      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0x126>
 8003c3a:	d900      	bls.n	8003c3e <HAL_TIM_ConfigClockSource+0x8a>
 8003c3c:	e076      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x178>
 8003c3e:	2b50      	cmp	r3, #80	; 0x50
 8003c40:	d03b      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x106>
 8003c42:	d900      	bls.n	8003c46 <HAL_TIM_ConfigClockSource+0x92>
 8003c44:	e072      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x178>
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d057      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0x146>
 8003c4a:	d900      	bls.n	8003c4e <HAL_TIM_ConfigClockSource+0x9a>
 8003c4c:	e06e      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x178>
 8003c4e:	2b30      	cmp	r3, #48	; 0x30
 8003c50:	d063      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0x166>
 8003c52:	d86b      	bhi.n	8003d2c <HAL_TIM_ConfigClockSource+0x178>
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d060      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0x166>
 8003c58:	d868      	bhi.n	8003d2c <HAL_TIM_ConfigClockSource+0x178>
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d05d      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0x166>
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d05b      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0x166>
 8003c62:	e063      	b.n	8003d2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6899      	ldr	r1, [r3, #8]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f000 fb68 	bl	8004348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2277      	movs	r2, #119	; 0x77
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	609a      	str	r2, [r3, #8]
      break;
 8003c90:	e052      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6899      	ldr	r1, [r3, #8]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f000 fb51 	bl	8004348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	01c9      	lsls	r1, r1, #7
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
      break;
 8003cb8:	e03e      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6859      	ldr	r1, [r3, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	001a      	movs	r2, r3
 8003cc8:	f000 fac4 	bl	8004254 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2150      	movs	r1, #80	; 0x50
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f000 fb1e 	bl	8004314 <TIM_ITRx_SetConfig>
      break;
 8003cd8:	e02e      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6859      	ldr	r1, [r3, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	001a      	movs	r2, r3
 8003ce8:	f000 fae2 	bl	80042b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2160      	movs	r1, #96	; 0x60
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f000 fb0e 	bl	8004314 <TIM_ITRx_SetConfig>
      break;
 8003cf8:	e01e      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6859      	ldr	r1, [r3, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	001a      	movs	r2, r3
 8003d08:	f000 faa4 	bl	8004254 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2140      	movs	r1, #64	; 0x40
 8003d12:	0018      	movs	r0, r3
 8003d14:	f000 fafe 	bl	8004314 <TIM_ITRx_SetConfig>
      break;
 8003d18:	e00e      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	0019      	movs	r1, r3
 8003d24:	0010      	movs	r0, r2
 8003d26:	f000 faf5 	bl	8004314 <TIM_ITRx_SetConfig>
      break;
 8003d2a:	e005      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d2c:	230f      	movs	r3, #15
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
      break;
 8003d34:	e000      	b.n	8003d38 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d36:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	223d      	movs	r2, #61	; 0x3d
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	223c      	movs	r2, #60	; 0x3c
 8003d44:	2100      	movs	r1, #0
 8003d46:	5499      	strb	r1, [r3, r2]

  return status;
 8003d48:	230f      	movs	r3, #15
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	781b      	ldrb	r3, [r3, #0]
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b004      	add	sp, #16
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	ffff00ff 	.word	0xffff00ff

08003d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a34      	ldr	r2, [pc, #208]	; (8003e40 <TIM_Base_SetConfig+0xe4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d008      	beq.n	8003d86 <TIM_Base_SetConfig+0x2a>
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	05db      	lsls	r3, r3, #23
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d003      	beq.n	8003d86 <TIM_Base_SetConfig+0x2a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a30      	ldr	r2, [pc, #192]	; (8003e44 <TIM_Base_SetConfig+0xe8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d108      	bne.n	8003d98 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2270      	movs	r2, #112	; 0x70
 8003d8a:	4393      	bics	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a29      	ldr	r2, [pc, #164]	; (8003e40 <TIM_Base_SetConfig+0xe4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d018      	beq.n	8003dd2 <TIM_Base_SetConfig+0x76>
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	05db      	lsls	r3, r3, #23
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d013      	beq.n	8003dd2 <TIM_Base_SetConfig+0x76>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <TIM_Base_SetConfig+0xe8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00f      	beq.n	8003dd2 <TIM_Base_SetConfig+0x76>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a24      	ldr	r2, [pc, #144]	; (8003e48 <TIM_Base_SetConfig+0xec>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_Base_SetConfig+0x76>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a23      	ldr	r2, [pc, #140]	; (8003e4c <TIM_Base_SetConfig+0xf0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <TIM_Base_SetConfig+0x76>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a22      	ldr	r2, [pc, #136]	; (8003e50 <TIM_Base_SetConfig+0xf4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_Base_SetConfig+0x76>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <TIM_Base_SetConfig+0xf8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d108      	bne.n	8003de4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a20      	ldr	r2, [pc, #128]	; (8003e58 <TIM_Base_SetConfig+0xfc>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2280      	movs	r2, #128	; 0x80
 8003de8:	4393      	bics	r3, r2
 8003dea:	001a      	movs	r2, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <TIM_Base_SetConfig+0xe4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00b      	beq.n	8003e2a <TIM_Base_SetConfig+0xce>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a0d      	ldr	r2, [pc, #52]	; (8003e4c <TIM_Base_SetConfig+0xf0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <TIM_Base_SetConfig+0xce>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a0c      	ldr	r2, [pc, #48]	; (8003e50 <TIM_Base_SetConfig+0xf4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d003      	beq.n	8003e2a <TIM_Base_SetConfig+0xce>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a0b      	ldr	r2, [pc, #44]	; (8003e54 <TIM_Base_SetConfig+0xf8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d103      	bne.n	8003e32 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	615a      	str	r2, [r3, #20]
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b004      	add	sp, #16
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40002000 	.word	0x40002000
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40014400 	.word	0x40014400
 8003e54:	40014800 	.word	0x40014800
 8003e58:	fffffcff 	.word	0xfffffcff

08003e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	4393      	bics	r3, r2
 8003e6e:	001a      	movs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2270      	movs	r2, #112	; 0x70
 8003e8a:	4393      	bics	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2203      	movs	r2, #3
 8003e92:	4393      	bics	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	4393      	bics	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <TIM_OC1_SetConfig+0xf8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00b      	beq.n	8003ed2 <TIM_OC1_SetConfig+0x76>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <TIM_OC1_SetConfig+0xfc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d007      	beq.n	8003ed2 <TIM_OC1_SetConfig+0x76>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a25      	ldr	r2, [pc, #148]	; (8003f5c <TIM_OC1_SetConfig+0x100>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d003      	beq.n	8003ed2 <TIM_OC1_SetConfig+0x76>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a24      	ldr	r2, [pc, #144]	; (8003f60 <TIM_OC1_SetConfig+0x104>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10c      	bne.n	8003eec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	4393      	bics	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	4393      	bics	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <TIM_OC1_SetConfig+0xf8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00b      	beq.n	8003f0c <TIM_OC1_SetConfig+0xb0>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <TIM_OC1_SetConfig+0xfc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d007      	beq.n	8003f0c <TIM_OC1_SetConfig+0xb0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <TIM_OC1_SetConfig+0x100>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d003      	beq.n	8003f0c <TIM_OC1_SetConfig+0xb0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a16      	ldr	r2, [pc, #88]	; (8003f60 <TIM_OC1_SetConfig+0x104>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d111      	bne.n	8003f30 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <TIM_OC1_SetConfig+0x108>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <TIM_OC1_SetConfig+0x10c>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b006      	add	sp, #24
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800
 8003f64:	fffffeff 	.word	0xfffffeff
 8003f68:	fffffdff 	.word	0xfffffdff

08003f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	2210      	movs	r2, #16
 8003f7c:	4393      	bics	r3, r2
 8003f7e:	001a      	movs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4a2e      	ldr	r2, [pc, #184]	; (8004054 <TIM_OC2_SetConfig+0xe8>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a2d      	ldr	r2, [pc, #180]	; (8004058 <TIM_OC2_SetConfig+0xec>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	4393      	bics	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a24      	ldr	r2, [pc, #144]	; (800405c <TIM_OC2_SetConfig+0xf0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10d      	bne.n	8003fea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	4393      	bics	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2240      	movs	r2, #64	; 0x40
 8003fe6:	4393      	bics	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1b      	ldr	r2, [pc, #108]	; (800405c <TIM_OC2_SetConfig+0xf0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00b      	beq.n	800400a <TIM_OC2_SetConfig+0x9e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <TIM_OC2_SetConfig+0xf4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d007      	beq.n	800400a <TIM_OC2_SetConfig+0x9e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a19      	ldr	r2, [pc, #100]	; (8004064 <TIM_OC2_SetConfig+0xf8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d003      	beq.n	800400a <TIM_OC2_SetConfig+0x9e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a18      	ldr	r2, [pc, #96]	; (8004068 <TIM_OC2_SetConfig+0xfc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d113      	bne.n	8004032 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4a17      	ldr	r2, [pc, #92]	; (800406c <TIM_OC2_SetConfig+0x100>)
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4a16      	ldr	r2, [pc, #88]	; (8004070 <TIM_OC2_SetConfig+0x104>)
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	621a      	str	r2, [r3, #32]
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	b006      	add	sp, #24
 8004052:	bd80      	pop	{r7, pc}
 8004054:	ffff8fff 	.word	0xffff8fff
 8004058:	fffffcff 	.word	0xfffffcff
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40014000 	.word	0x40014000
 8004064:	40014400 	.word	0x40014400
 8004068:	40014800 	.word	0x40014800
 800406c:	fffffbff 	.word	0xfffffbff
 8004070:	fffff7ff 	.word	0xfffff7ff

08004074 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	4a35      	ldr	r2, [pc, #212]	; (8004158 <TIM_OC3_SetConfig+0xe4>)
 8004084:	401a      	ands	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2270      	movs	r2, #112	; 0x70
 80040a0:	4393      	bics	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2203      	movs	r2, #3
 80040a8:	4393      	bics	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	4a28      	ldr	r2, [pc, #160]	; (800415c <TIM_OC3_SetConfig+0xe8>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	021b      	lsls	r3, r3, #8
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a24      	ldr	r2, [pc, #144]	; (8004160 <TIM_OC3_SetConfig+0xec>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10d      	bne.n	80040ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	4a23      	ldr	r2, [pc, #140]	; (8004164 <TIM_OC3_SetConfig+0xf0>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <TIM_OC3_SetConfig+0xf4>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a1b      	ldr	r2, [pc, #108]	; (8004160 <TIM_OC3_SetConfig+0xec>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00b      	beq.n	800410e <TIM_OC3_SetConfig+0x9a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1c      	ldr	r2, [pc, #112]	; (800416c <TIM_OC3_SetConfig+0xf8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <TIM_OC3_SetConfig+0x9a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1b      	ldr	r2, [pc, #108]	; (8004170 <TIM_OC3_SetConfig+0xfc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_OC3_SetConfig+0x9a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1a      	ldr	r2, [pc, #104]	; (8004174 <TIM_OC3_SetConfig+0x100>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d113      	bne.n	8004136 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4a19      	ldr	r2, [pc, #100]	; (8004178 <TIM_OC3_SetConfig+0x104>)
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4a18      	ldr	r2, [pc, #96]	; (800417c <TIM_OC3_SetConfig+0x108>)
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	621a      	str	r2, [r3, #32]
}
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b006      	add	sp, #24
 8004156:	bd80      	pop	{r7, pc}
 8004158:	fffffeff 	.word	0xfffffeff
 800415c:	fffffdff 	.word	0xfffffdff
 8004160:	40012c00 	.word	0x40012c00
 8004164:	fffff7ff 	.word	0xfffff7ff
 8004168:	fffffbff 	.word	0xfffffbff
 800416c:	40014000 	.word	0x40014000
 8004170:	40014400 	.word	0x40014400
 8004174:	40014800 	.word	0x40014800
 8004178:	ffffefff 	.word	0xffffefff
 800417c:	ffffdfff 	.word	0xffffdfff

08004180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	4a28      	ldr	r2, [pc, #160]	; (8004230 <TIM_OC4_SetConfig+0xb0>)
 8004190:	401a      	ands	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a22      	ldr	r2, [pc, #136]	; (8004234 <TIM_OC4_SetConfig+0xb4>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a21      	ldr	r2, [pc, #132]	; (8004238 <TIM_OC4_SetConfig+0xb8>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4a1d      	ldr	r2, [pc, #116]	; (800423c <TIM_OC4_SetConfig+0xbc>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	031b      	lsls	r3, r3, #12
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a19      	ldr	r2, [pc, #100]	; (8004240 <TIM_OC4_SetConfig+0xc0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <TIM_OC4_SetConfig+0x78>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a18      	ldr	r2, [pc, #96]	; (8004244 <TIM_OC4_SetConfig+0xc4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d007      	beq.n	80041f8 <TIM_OC4_SetConfig+0x78>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a17      	ldr	r2, [pc, #92]	; (8004248 <TIM_OC4_SetConfig+0xc8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_OC4_SetConfig+0x78>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a16      	ldr	r2, [pc, #88]	; (800424c <TIM_OC4_SetConfig+0xcc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d109      	bne.n	800420c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	4a15      	ldr	r2, [pc, #84]	; (8004250 <TIM_OC4_SetConfig+0xd0>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	46bd      	mov	sp, r7
 800422a:	b006      	add	sp, #24
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	ffffefff 	.word	0xffffefff
 8004234:	ffff8fff 	.word	0xffff8fff
 8004238:	fffffcff 	.word	0xfffffcff
 800423c:	ffffdfff 	.word	0xffffdfff
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800
 8004250:	ffffbfff 	.word	0xffffbfff

08004254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	2201      	movs	r2, #1
 800426c:	4393      	bics	r3, r2
 800426e:	001a      	movs	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	22f0      	movs	r2, #240	; 0xf0
 800427e:	4393      	bics	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	220a      	movs	r2, #10
 8004290:	4393      	bics	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	621a      	str	r2, [r3, #32]
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b006      	add	sp, #24
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	2210      	movs	r2, #16
 80042c2:	4393      	bics	r3, r2
 80042c4:	001a      	movs	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <TIM_TI2_ConfigInputStage+0x60>)
 80042da:	4013      	ands	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	031b      	lsls	r3, r3, #12
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	22a0      	movs	r2, #160	; 0xa0
 80042ec:	4393      	bics	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	46bd      	mov	sp, r7
 800430a:	b006      	add	sp, #24
 800430c:	bd80      	pop	{r7, pc}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	ffff0fff 	.word	0xffff0fff

08004314 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2270      	movs	r2, #112	; 0x70
 8004328:	4393      	bics	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	2207      	movs	r2, #7
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	609a      	str	r2, [r3, #8]
}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	46bd      	mov	sp, r7
 8004342:	b004      	add	sp, #16
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	4a09      	ldr	r2, [pc, #36]	; (8004384 <TIM_ETR_SetConfig+0x3c>)
 8004360:	4013      	ands	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	021a      	lsls	r2, r3, #8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	431a      	orrs	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	609a      	str	r2, [r3, #8]
}
 800437c:	46c0      	nop			; (mov r8, r8)
 800437e:	46bd      	mov	sp, r7
 8004380:	b006      	add	sp, #24
 8004382:	bd80      	pop	{r7, pc}
 8004384:	ffff00ff 	.word	0xffff00ff

08004388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	221f      	movs	r2, #31
 8004398:	4013      	ands	r3, r2
 800439a:	2201      	movs	r2, #1
 800439c:	409a      	lsls	r2, r3
 800439e:	0013      	movs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	43d2      	mvns	r2, r2
 80043aa:	401a      	ands	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a1a      	ldr	r2, [r3, #32]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	211f      	movs	r1, #31
 80043b8:	400b      	ands	r3, r1
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4099      	lsls	r1, r3
 80043be:	000b      	movs	r3, r1
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b006      	add	sp, #24
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	223c      	movs	r2, #60	; 0x3c
 80043de:	5c9b      	ldrb	r3, [r3, r2]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e047      	b.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	223c      	movs	r2, #60	; 0x3c
 80043ec:	2101      	movs	r1, #1
 80043ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	223d      	movs	r2, #61	; 0x3d
 80043f4:	2102      	movs	r1, #2
 80043f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2270      	movs	r2, #112	; 0x70
 800440c:	4393      	bics	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a16      	ldr	r2, [pc, #88]	; (8004480 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00f      	beq.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	05db      	lsls	r3, r3, #23
 8004434:	429a      	cmp	r2, r3
 8004436:	d009      	beq.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a11      	ldr	r2, [pc, #68]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a10      	ldr	r2, [pc, #64]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d10c      	bne.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2280      	movs	r2, #128	; 0x80
 8004450:	4393      	bics	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	4313      	orrs	r3, r2
 800445c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	223d      	movs	r2, #61	; 0x3d
 800446a:	2101      	movs	r1, #1
 800446c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	223c      	movs	r2, #60	; 0x3c
 8004472:	2100      	movs	r1, #0
 8004474:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b004      	add	sp, #16
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40000400 	.word	0x40000400
 8004488:	40014000 	.word	0x40014000

0800448c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	223c      	movs	r2, #60	; 0x3c
 800449e:	5c9b      	ldrb	r3, [r3, r2]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e03e      	b.n	8004526 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	223c      	movs	r2, #60	; 0x3c
 80044ac:	2101      	movs	r1, #1
 80044ae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	22ff      	movs	r2, #255	; 0xff
 80044b4:	4393      	bics	r3, r2
 80044b6:	001a      	movs	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80044c4:	401a      	ands	r2, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a18      	ldr	r2, [pc, #96]	; (8004534 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80044d2:	401a      	ands	r2, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a16      	ldr	r2, [pc, #88]	; (8004538 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80044e0:	401a      	ands	r2, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80044ee:	401a      	ands	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a11      	ldr	r2, [pc, #68]	; (8004540 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80044fc:	401a      	ands	r2, r3
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800450a:	401a      	ands	r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	223c      	movs	r2, #60	; 0x3c
 8004520:	2100      	movs	r1, #0
 8004522:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	0018      	movs	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	b004      	add	sp, #16
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	fffffcff 	.word	0xfffffcff
 8004534:	fffffbff 	.word	0xfffffbff
 8004538:	fffff7ff 	.word	0xfffff7ff
 800453c:	ffffefff 	.word	0xffffefff
 8004540:	ffffdfff 	.word	0xffffdfff
 8004544:	ffffbfff 	.word	0xffffbfff

08004548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e044      	b.n	80045e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800455e:	2b00      	cmp	r3, #0
 8004560:	d107      	bne.n	8004572 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2274      	movs	r2, #116	; 0x74
 8004566:	2100      	movs	r1, #0
 8004568:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0018      	movs	r0, r3
 800456e:	f7fd fbb5 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2224      	movs	r2, #36	; 0x24
 8004576:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2101      	movs	r1, #1
 8004584:	438a      	bics	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	0018      	movs	r0, r3
 800458c:	f000 f830 	bl	80045f0 <UART_SetConfig>
 8004590:	0003      	movs	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e024      	b.n	80045e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f000 f9ab 	bl	8004900 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	490d      	ldr	r1, [pc, #52]	; (80045ec <HAL_UART_Init+0xa4>)
 80045b6:	400a      	ands	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	212a      	movs	r1, #42	; 0x2a
 80045c6:	438a      	bics	r2, r1
 80045c8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2101      	movs	r1, #1
 80045d6:	430a      	orrs	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	0018      	movs	r0, r3
 80045de:	f000 fa43 	bl	8004a68 <UART_CheckIdleState>
 80045e2:	0003      	movs	r3, r0
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b002      	add	sp, #8
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	ffffb7ff 	.word	0xffffb7ff

080045f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f8:	231e      	movs	r3, #30
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4aaf      	ldr	r2, [pc, #700]	; (80048dc <UART_SetConfig+0x2ec>)
 8004620:	4013      	ands	r3, r2
 8004622:	0019      	movs	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	430a      	orrs	r2, r1
 800462c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4aaa      	ldr	r2, [pc, #680]	; (80048e0 <UART_SetConfig+0x2f0>)
 8004636:	4013      	ands	r3, r2
 8004638:	0019      	movs	r1, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4aa1      	ldr	r2, [pc, #644]	; (80048e4 <UART_SetConfig+0x2f4>)
 800465e:	4013      	ands	r3, r2
 8004660:	0019      	movs	r1, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	430a      	orrs	r2, r1
 800466a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a9d      	ldr	r2, [pc, #628]	; (80048e8 <UART_SetConfig+0x2f8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d127      	bne.n	80046c6 <UART_SetConfig+0xd6>
 8004676:	4b9d      	ldr	r3, [pc, #628]	; (80048ec <UART_SetConfig+0x2fc>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	2203      	movs	r2, #3
 800467c:	4013      	ands	r3, r2
 800467e:	2b03      	cmp	r3, #3
 8004680:	d00d      	beq.n	800469e <UART_SetConfig+0xae>
 8004682:	d81b      	bhi.n	80046bc <UART_SetConfig+0xcc>
 8004684:	2b02      	cmp	r3, #2
 8004686:	d014      	beq.n	80046b2 <UART_SetConfig+0xc2>
 8004688:	d818      	bhi.n	80046bc <UART_SetConfig+0xcc>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <UART_SetConfig+0xa4>
 800468e:	2b01      	cmp	r3, #1
 8004690:	d00a      	beq.n	80046a8 <UART_SetConfig+0xb8>
 8004692:	e013      	b.n	80046bc <UART_SetConfig+0xcc>
 8004694:	231f      	movs	r3, #31
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	e065      	b.n	800476a <UART_SetConfig+0x17a>
 800469e:	231f      	movs	r3, #31
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	2202      	movs	r2, #2
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	e060      	b.n	800476a <UART_SetConfig+0x17a>
 80046a8:	231f      	movs	r3, #31
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	2204      	movs	r2, #4
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	e05b      	b.n	800476a <UART_SetConfig+0x17a>
 80046b2:	231f      	movs	r3, #31
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	2208      	movs	r2, #8
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e056      	b.n	800476a <UART_SetConfig+0x17a>
 80046bc:	231f      	movs	r3, #31
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	2210      	movs	r2, #16
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e051      	b.n	800476a <UART_SetConfig+0x17a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a89      	ldr	r2, [pc, #548]	; (80048f0 <UART_SetConfig+0x300>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d134      	bne.n	800473a <UART_SetConfig+0x14a>
 80046d0:	4b86      	ldr	r3, [pc, #536]	; (80048ec <UART_SetConfig+0x2fc>)
 80046d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d4:	23c0      	movs	r3, #192	; 0xc0
 80046d6:	029b      	lsls	r3, r3, #10
 80046d8:	4013      	ands	r3, r2
 80046da:	22c0      	movs	r2, #192	; 0xc0
 80046dc:	0292      	lsls	r2, r2, #10
 80046de:	4293      	cmp	r3, r2
 80046e0:	d017      	beq.n	8004712 <UART_SetConfig+0x122>
 80046e2:	22c0      	movs	r2, #192	; 0xc0
 80046e4:	0292      	lsls	r2, r2, #10
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d822      	bhi.n	8004730 <UART_SetConfig+0x140>
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	0292      	lsls	r2, r2, #10
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d019      	beq.n	8004726 <UART_SetConfig+0x136>
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	0292      	lsls	r2, r2, #10
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d81a      	bhi.n	8004730 <UART_SetConfig+0x140>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <UART_SetConfig+0x118>
 80046fe:	2280      	movs	r2, #128	; 0x80
 8004700:	0252      	lsls	r2, r2, #9
 8004702:	4293      	cmp	r3, r2
 8004704:	d00a      	beq.n	800471c <UART_SetConfig+0x12c>
 8004706:	e013      	b.n	8004730 <UART_SetConfig+0x140>
 8004708:	231f      	movs	r3, #31
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e02b      	b.n	800476a <UART_SetConfig+0x17a>
 8004712:	231f      	movs	r3, #31
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	2202      	movs	r2, #2
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e026      	b.n	800476a <UART_SetConfig+0x17a>
 800471c:	231f      	movs	r3, #31
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	2204      	movs	r2, #4
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	e021      	b.n	800476a <UART_SetConfig+0x17a>
 8004726:	231f      	movs	r3, #31
 8004728:	18fb      	adds	r3, r7, r3
 800472a:	2208      	movs	r2, #8
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	e01c      	b.n	800476a <UART_SetConfig+0x17a>
 8004730:	231f      	movs	r3, #31
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	2210      	movs	r2, #16
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	e017      	b.n	800476a <UART_SetConfig+0x17a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a6d      	ldr	r2, [pc, #436]	; (80048f4 <UART_SetConfig+0x304>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d104      	bne.n	800474e <UART_SetConfig+0x15e>
 8004744:	231f      	movs	r3, #31
 8004746:	18fb      	adds	r3, r7, r3
 8004748:	2200      	movs	r2, #0
 800474a:	701a      	strb	r2, [r3, #0]
 800474c:	e00d      	b.n	800476a <UART_SetConfig+0x17a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a69      	ldr	r2, [pc, #420]	; (80048f8 <UART_SetConfig+0x308>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d104      	bne.n	8004762 <UART_SetConfig+0x172>
 8004758:	231f      	movs	r3, #31
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	e003      	b.n	800476a <UART_SetConfig+0x17a>
 8004762:	231f      	movs	r3, #31
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	2210      	movs	r2, #16
 8004768:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69da      	ldr	r2, [r3, #28]
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	429a      	cmp	r2, r3
 8004774:	d15d      	bne.n	8004832 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8004776:	231f      	movs	r3, #31
 8004778:	18fb      	adds	r3, r7, r3
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d015      	beq.n	80047ac <UART_SetConfig+0x1bc>
 8004780:	dc18      	bgt.n	80047b4 <UART_SetConfig+0x1c4>
 8004782:	2b04      	cmp	r3, #4
 8004784:	d00d      	beq.n	80047a2 <UART_SetConfig+0x1b2>
 8004786:	dc15      	bgt.n	80047b4 <UART_SetConfig+0x1c4>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <UART_SetConfig+0x1a2>
 800478c:	2b02      	cmp	r3, #2
 800478e:	d005      	beq.n	800479c <UART_SetConfig+0x1ac>
 8004790:	e010      	b.n	80047b4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004792:	f7fe fad5 	bl	8002d40 <HAL_RCC_GetPCLK1Freq>
 8004796:	0003      	movs	r3, r0
 8004798:	61bb      	str	r3, [r7, #24]
        break;
 800479a:	e012      	b.n	80047c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800479c:	4b57      	ldr	r3, [pc, #348]	; (80048fc <UART_SetConfig+0x30c>)
 800479e:	61bb      	str	r3, [r7, #24]
        break;
 80047a0:	e00f      	b.n	80047c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047a2:	f7fe fa43 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 80047a6:	0003      	movs	r3, r0
 80047a8:	61bb      	str	r3, [r7, #24]
        break;
 80047aa:	e00a      	b.n	80047c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	61bb      	str	r3, [r7, #24]
        break;
 80047b2:	e006      	b.n	80047c2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047b8:	231e      	movs	r3, #30
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
        break;
 80047c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d100      	bne.n	80047ca <UART_SetConfig+0x1da>
 80047c8:	e07b      	b.n	80048c2 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	005a      	lsls	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	18d2      	adds	r2, r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	0019      	movs	r1, r3
 80047dc:	0010      	movs	r0, r2
 80047de:	f7fb fc93 	bl	8000108 <__udivsi3>
 80047e2:	0003      	movs	r3, r0
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	d91c      	bls.n	8004828 <UART_SetConfig+0x238>
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	025b      	lsls	r3, r3, #9
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d217      	bcs.n	8004828 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	200e      	movs	r0, #14
 80047fe:	183b      	adds	r3, r7, r0
 8004800:	210f      	movs	r1, #15
 8004802:	438a      	bics	r2, r1
 8004804:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	2207      	movs	r2, #7
 800480e:	4013      	ands	r3, r2
 8004810:	b299      	uxth	r1, r3
 8004812:	183b      	adds	r3, r7, r0
 8004814:	183a      	adds	r2, r7, r0
 8004816:	8812      	ldrh	r2, [r2, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	183a      	adds	r2, r7, r0
 8004822:	8812      	ldrh	r2, [r2, #0]
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	e04c      	b.n	80048c2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8004828:	231e      	movs	r3, #30
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	2201      	movs	r2, #1
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	e047      	b.n	80048c2 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004832:	231f      	movs	r3, #31
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d015      	beq.n	8004868 <UART_SetConfig+0x278>
 800483c:	dc18      	bgt.n	8004870 <UART_SetConfig+0x280>
 800483e:	2b04      	cmp	r3, #4
 8004840:	d00d      	beq.n	800485e <UART_SetConfig+0x26e>
 8004842:	dc15      	bgt.n	8004870 <UART_SetConfig+0x280>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <UART_SetConfig+0x25e>
 8004848:	2b02      	cmp	r3, #2
 800484a:	d005      	beq.n	8004858 <UART_SetConfig+0x268>
 800484c:	e010      	b.n	8004870 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800484e:	f7fe fa77 	bl	8002d40 <HAL_RCC_GetPCLK1Freq>
 8004852:	0003      	movs	r3, r0
 8004854:	61bb      	str	r3, [r7, #24]
        break;
 8004856:	e012      	b.n	800487e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b28      	ldr	r3, [pc, #160]	; (80048fc <UART_SetConfig+0x30c>)
 800485a:	61bb      	str	r3, [r7, #24]
        break;
 800485c:	e00f      	b.n	800487e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fe f9e5 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8004862:	0003      	movs	r3, r0
 8004864:	61bb      	str	r3, [r7, #24]
        break;
 8004866:	e00a      	b.n	800487e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	61bb      	str	r3, [r7, #24]
        break;
 800486e:	e006      	b.n	800487e <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004874:	231e      	movs	r3, #30
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]
        break;
 800487c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01e      	beq.n	80048c2 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	085a      	lsrs	r2, r3, #1
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	18d2      	adds	r2, r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	0019      	movs	r1, r3
 8004894:	0010      	movs	r0, r2
 8004896:	f7fb fc37 	bl	8000108 <__udivsi3>
 800489a:	0003      	movs	r3, r0
 800489c:	b29b      	uxth	r3, r3
 800489e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b0f      	cmp	r3, #15
 80048a4:	d909      	bls.n	80048ba <UART_SetConfig+0x2ca>
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	025b      	lsls	r3, r3, #9
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d204      	bcs.n	80048ba <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	60da      	str	r2, [r3, #12]
 80048b8:	e003      	b.n	80048c2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80048ba:	231e      	movs	r3, #30
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	2201      	movs	r2, #1
 80048c0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048ce:	231e      	movs	r3, #30
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	781b      	ldrb	r3, [r3, #0]
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b008      	add	sp, #32
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	efff69f3 	.word	0xefff69f3
 80048e0:	ffffcfff 	.word	0xffffcfff
 80048e4:	fffff4ff 	.word	0xfffff4ff
 80048e8:	40013800 	.word	0x40013800
 80048ec:	40021000 	.word	0x40021000
 80048f0:	40004400 	.word	0x40004400
 80048f4:	40004800 	.word	0x40004800
 80048f8:	40004c00 	.word	0x40004c00
 80048fc:	007a1200 	.word	0x007a1200

08004900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	2201      	movs	r2, #1
 800490e:	4013      	ands	r3, r2
 8004910:	d00b      	beq.n	800492a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4a4a      	ldr	r2, [pc, #296]	; (8004a44 <UART_AdvFeatureConfig+0x144>)
 800491a:	4013      	ands	r3, r2
 800491c:	0019      	movs	r1, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	2202      	movs	r2, #2
 8004930:	4013      	ands	r3, r2
 8004932:	d00b      	beq.n	800494c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4a43      	ldr	r2, [pc, #268]	; (8004a48 <UART_AdvFeatureConfig+0x148>)
 800493c:	4013      	ands	r3, r2
 800493e:	0019      	movs	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	2204      	movs	r2, #4
 8004952:	4013      	ands	r3, r2
 8004954:	d00b      	beq.n	800496e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a3b      	ldr	r2, [pc, #236]	; (8004a4c <UART_AdvFeatureConfig+0x14c>)
 800495e:	4013      	ands	r3, r2
 8004960:	0019      	movs	r1, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2208      	movs	r2, #8
 8004974:	4013      	ands	r3, r2
 8004976:	d00b      	beq.n	8004990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4a34      	ldr	r2, [pc, #208]	; (8004a50 <UART_AdvFeatureConfig+0x150>)
 8004980:	4013      	ands	r3, r2
 8004982:	0019      	movs	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	2210      	movs	r2, #16
 8004996:	4013      	ands	r3, r2
 8004998:	d00b      	beq.n	80049b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4a2c      	ldr	r2, [pc, #176]	; (8004a54 <UART_AdvFeatureConfig+0x154>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	0019      	movs	r1, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	2220      	movs	r2, #32
 80049b8:	4013      	ands	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	4a25      	ldr	r2, [pc, #148]	; (8004a58 <UART_AdvFeatureConfig+0x158>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	0019      	movs	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	2240      	movs	r2, #64	; 0x40
 80049da:	4013      	ands	r3, r2
 80049dc:	d01d      	beq.n	8004a1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <UART_AdvFeatureConfig+0x15c>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	0019      	movs	r1, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	430a      	orrs	r2, r1
 80049f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	035b      	lsls	r3, r3, #13
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d10b      	bne.n	8004a1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <UART_AdvFeatureConfig+0x160>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	4013      	ands	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4a0e      	ldr	r2, [pc, #56]	; (8004a64 <UART_AdvFeatureConfig+0x164>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	605a      	str	r2, [r3, #4]
  }
}
 8004a3c:	46c0      	nop			; (mov r8, r8)
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b002      	add	sp, #8
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	fffdffff 	.word	0xfffdffff
 8004a48:	fffeffff 	.word	0xfffeffff
 8004a4c:	fffbffff 	.word	0xfffbffff
 8004a50:	ffff7fff 	.word	0xffff7fff
 8004a54:	ffffefff 	.word	0xffffefff
 8004a58:	ffffdfff 	.word	0xffffdfff
 8004a5c:	ffefffff 	.word	0xffefffff
 8004a60:	ff9fffff 	.word	0xff9fffff
 8004a64:	fff7ffff 	.word	0xfff7ffff

08004a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2280      	movs	r2, #128	; 0x80
 8004a74:	2100      	movs	r1, #0
 8004a76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a78:	f7fd fa00 	bl	8001e7c <HAL_GetTick>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2208      	movs	r2, #8
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d10c      	bne.n	8004aa8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	0391      	lsls	r1, r2, #14
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <UART_CheckIdleState+0x8c>)
 8004a98:	9200      	str	r2, [sp, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f000 f82c 	bl	8004af8 <UART_WaitOnFlagUntilTimeout>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d001      	beq.n	8004aa8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e021      	b.n	8004aec <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d10c      	bne.n	8004ad0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2280      	movs	r2, #128	; 0x80
 8004aba:	03d1      	lsls	r1, r2, #15
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4a0d      	ldr	r2, [pc, #52]	; (8004af4 <UART_CheckIdleState+0x8c>)
 8004ac0:	9200      	str	r2, [sp, #0]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f000 f818 	bl	8004af8 <UART_WaitOnFlagUntilTimeout>
 8004ac8:	1e03      	subs	r3, r0, #0
 8004aca:	d001      	beq.n	8004ad0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e00d      	b.n	8004aec <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2274      	movs	r2, #116	; 0x74
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b004      	add	sp, #16
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	01ffffff 	.word	0x01ffffff

08004af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b094      	sub	sp, #80	; 0x50
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	1dfb      	adds	r3, r7, #7
 8004b06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b08:	e0a3      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	d100      	bne.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004b10:	e09f      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fd f9b3 	bl	8001e7c <HAL_GetTick>
 8004b16:	0002      	movs	r2, r0
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d13d      	bne.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b28:	f3ef 8310 	mrs	r3, PRIMASK
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
 8004b32:	2301      	movs	r3, #1
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	f383 8810 	msr	PRIMASK, r3
}
 8004b3c:	46c0      	nop			; (mov r8, r8)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	494c      	ldr	r1, [pc, #304]	; (8004c7c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004b4a:	400a      	ands	r2, r1
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b50:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	f383 8810 	msr	PRIMASK, r3
}
 8004b58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b62:	643b      	str	r3, [r7, #64]	; 0x40
 8004b64:	2301      	movs	r3, #1
 8004b66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	f383 8810 	msr	PRIMASK, r3
}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	438a      	bics	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2274      	movs	r2, #116	; 0x74
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e067      	b.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2204      	movs	r2, #4
 8004bac:	4013      	ands	r3, r2
 8004bae:	d050      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	401a      	ands	r2, r3
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d146      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2280      	movs	r2, #128	; 0x80
 8004bca:	0112      	lsls	r2, r2, #4
 8004bcc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bce:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd2:	613b      	str	r3, [r7, #16]
  return(result);
 8004bd4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd8:	2301      	movs	r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4923      	ldr	r1, [pc, #140]	; (8004c7c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004bf0:	400a      	ands	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	f383 8810 	msr	PRIMASK, r3
}
 8004bfe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c00:	f3ef 8310 	mrs	r3, PRIMASK
 8004c04:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c06:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	f383 8810 	msr	PRIMASK, r3
}
 8004c14:	46c0      	nop			; (mov r8, r8)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2101      	movs	r1, #1
 8004c22:	438a      	bics	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]
 8004c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	f383 8810 	msr	PRIMASK, r3
}
 8004c30:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2280      	movs	r2, #128	; 0x80
 8004c42:	2120      	movs	r1, #32
 8004c44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2274      	movs	r2, #116	; 0x74
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e010      	b.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	425a      	negs	r2, r3
 8004c62:	4153      	adcs	r3, r2
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	001a      	movs	r2, r3
 8004c68:	1dfb      	adds	r3, r7, #7
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d100      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004c70:	e74b      	b.n	8004b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	0018      	movs	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b014      	add	sp, #80	; 0x50
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	fffffe5f 	.word	0xfffffe5f

08004c80 <memset>:
 8004c80:	0003      	movs	r3, r0
 8004c82:	1882      	adds	r2, r0, r2
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d100      	bne.n	8004c8a <memset+0xa>
 8004c88:	4770      	bx	lr
 8004c8a:	7019      	strb	r1, [r3, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	e7f9      	b.n	8004c84 <memset+0x4>

08004c90 <__libc_init_array>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	2600      	movs	r6, #0
 8004c94:	4c0c      	ldr	r4, [pc, #48]	; (8004cc8 <__libc_init_array+0x38>)
 8004c96:	4d0d      	ldr	r5, [pc, #52]	; (8004ccc <__libc_init_array+0x3c>)
 8004c98:	1b64      	subs	r4, r4, r5
 8004c9a:	10a4      	asrs	r4, r4, #2
 8004c9c:	42a6      	cmp	r6, r4
 8004c9e:	d109      	bne.n	8004cb4 <__libc_init_array+0x24>
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	f000 f819 	bl	8004cd8 <_init>
 8004ca6:	4c0a      	ldr	r4, [pc, #40]	; (8004cd0 <__libc_init_array+0x40>)
 8004ca8:	4d0a      	ldr	r5, [pc, #40]	; (8004cd4 <__libc_init_array+0x44>)
 8004caa:	1b64      	subs	r4, r4, r5
 8004cac:	10a4      	asrs	r4, r4, #2
 8004cae:	42a6      	cmp	r6, r4
 8004cb0:	d105      	bne.n	8004cbe <__libc_init_array+0x2e>
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	00b3      	lsls	r3, r6, #2
 8004cb6:	58eb      	ldr	r3, [r5, r3]
 8004cb8:	4798      	blx	r3
 8004cba:	3601      	adds	r6, #1
 8004cbc:	e7ee      	b.n	8004c9c <__libc_init_array+0xc>
 8004cbe:	00b3      	lsls	r3, r6, #2
 8004cc0:	58eb      	ldr	r3, [r5, r3]
 8004cc2:	4798      	blx	r3
 8004cc4:	3601      	adds	r6, #1
 8004cc6:	e7f2      	b.n	8004cae <__libc_init_array+0x1e>
 8004cc8:	08004d38 	.word	0x08004d38
 8004ccc:	08004d38 	.word	0x08004d38
 8004cd0:	08004d3c 	.word	0x08004d3c
 8004cd4:	08004d38 	.word	0x08004d38

08004cd8 <_init>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr

08004ce4 <_fini>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr
